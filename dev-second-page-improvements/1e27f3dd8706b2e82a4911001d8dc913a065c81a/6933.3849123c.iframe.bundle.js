(self.webpackChunklayerswap=self.webpackChunklayerswap||[]).push([[6933],{"./Models/BalanceProvider.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{w:()=>BalanceProvider});var posthog_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/posthog-js/dist/module.js");class BalanceProvider{constructor(){this.resolveTokenBalanceFetchError=(err,token,network,isNativeCurrency)=>{var _token_symbol;posthog_js__WEBPACK_IMPORTED_MODULE_0__.Ay.capture("balance_fetch_error",{where:"BalanceProvider",severity:"warn",network:network.name,token:null!==(_token_symbol=token.symbol)&&void 0!==_token_symbol?_token_symbol:void 0,message:err.message||`Could not fetch balance for ${token.symbol} in ${network.name}`,code:err.code,cause:err.cause});return{network:network.name,token:token.symbol,amount:void 0,request_time:(new Date).toJSON(),decimals:Number(null==token?void 0:token.decimals),isNativeCurrency:null!=isNativeCurrency?isNativeCurrency:!token.contract,error:`Could not fetch balance for ${token.symbol}`}}}}},"./context/balanceAccounts.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Qp:()=>useBalanceAccounts,wM:()=>useUpdateBalanceAccount,wz:()=>useSelectedAccount});__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js");var react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");__webpack_require__("./hooks/useWallet.ts"),__webpack_require__("./components/AddressIcon.tsx"),__webpack_require__("./stores/balanceStore.ts");const BalanceAccountsStateContext=(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null),BalanceAccountsUpdateContext=(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);function useBalanceAccounts(direction){const values=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BalanceAccountsStateContext);if(void 0===values)throw new Error("useBalanceAccounts must be used within a BalanceAccountsProvider");return"from"===direction?values.sourceAccounts:values.destinationAccounts}function useSelectedAccount(direction,providerName){var _values_sourceAccounts,_values_destinationAccounts;const values=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BalanceAccountsStateContext);if(providerName){if(void 0===values)throw new Error("useBalanceAccounts must be used within a BalanceAccountsProvider");return"from"===direction?null==values||null===(_values_sourceAccounts=values.sourceAccounts)||void 0===_values_sourceAccounts?void 0:_values_sourceAccounts.find(acc=>(null==acc?void 0:acc.providerName)===providerName):null==values||null===(_values_destinationAccounts=values.destinationAccounts)||void 0===_values_destinationAccounts?void 0:_values_destinationAccounts.find(acc=>(null==acc?void 0:acc.providerName)===providerName)}}function useUpdateBalanceAccount(direction){const values=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BalanceAccountsUpdateContext);if(void 0===values)throw new Error("useUpdateBalanceAccount must be used within a BalanceAccountsUpdateContext");return"from"===direction?values.selectSourceAccount:values.selectDestinationAccount}},"./lib/balances/helpers.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{S:()=>insertIfNotExists});const insertIfNotExists=(arr,item)=>!item||arr.some(el=>el.symbol===item.symbol)?arr:[...arr,item]},"./lib/balances/providers/zkSyncBalanceProvider.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>ZkSyncLiteRPCClient,i:()=>ZkSyncBalanceProvider});var _lib_formatAmount__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./lib/formatAmount.ts"),_lib_knownIds__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./lib/knownIds.ts"),_helpers__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./lib/balances/helpers.ts"),_Models_BalanceProvider__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./Models/BalanceProvider.ts");class ZkSyncBalanceProvider extends _Models_BalanceProvider__WEBPACK_IMPORTED_MODULE_3__.w{constructor(...args){super(...args),this.supportsNetwork=network=>_lib_knownIds__WEBPACK_IMPORTED_MODULE_1__.A.Networks.ZksyncMainnet.includes(network.name),this.fetchBalance=async(address,network)=>{const client=new ZkSyncLiteRPCClient,tokens=(0,_helpers__WEBPACK_IMPORTED_MODULE_2__.S)(network.tokens||[],network.token);if(null==network?void 0:network.tokens)try{const result=await client.getAccountInfo(network.node_url,address);return tokens.map(currency=>{const amount=currency&&result.committed.balances[currency.symbol];return{network:network.name,token:currency.symbol,amount:(0,_lib_formatAmount__WEBPACK_IMPORTED_MODULE_0__.A)(amount,Number(null==currency?void 0:currency.decimals)),request_time:(new Date).toJSON(),decimals:Number(null==currency?void 0:currency.decimals),isNativeCurrency:!0}})}catch(e){var _e_message;const error={message:null!==(_e_message=null==e?void 0:e.message)&&void 0!==_e_message?_e_message:"Failed get token balance",code:null==e?void 0:e.code,cause:e};return tokens.map(currency=>this.resolveTokenBalanceFetchError(error,currency,network))}}}}class ZkSyncLiteRPCClient{async getPublicClient(nodeUrl){if(null==this._client){const{createPublicClient,http}=await Promise.all([__webpack_require__.e(8996),__webpack_require__.e(8440),__webpack_require__.e(5115)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/viem/_esm/index.js"));this._client=createPublicClient({transport:http(`${nodeUrl}jsrpc`)})}return this._client}async getTransferFee(nodeUrl,recipientAddress,asset){let client=await this.getPublicClient(nodeUrl);return await client.request({method:"get_tx_fee",params:["Transfer",recipientAddress,asset]})}async getAccountInfo(nodeUrl,address){let client=await this.getPublicClient(nodeUrl);return await client.request({method:"account_info",params:[address]})}}},"./lib/formatAmount.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=(unformattedAmount,decimals)=>Number(BigInt((null==unformattedAmount?void 0:unformattedAmount.toString())||0))/Math.pow(10,decimals)},"./lib/loopring/LoopringAPI.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{x:()=>LoopringAPI});var AppSettings=__webpack_require__("./lib/AppSettings.ts"),defs=__webpack_require__("./lib/loopring/defs.ts"),dist_browser=__webpack_require__("./node_modules/ethereumjs-util/dist.browser/index.js"),bn=__webpack_require__("./node_modules/bn.js/lib/bn.js"),bn_default=__webpack_require__.n(bn),bignumber=__webpack_require__("./node_modules/bignumber.js/bignumber.mjs"),buffer=__webpack_require__("./node_modules/buffer/index.js");function addHexPrefix(input){if("string"==typeof input)return input.startsWith("0x")?input:"0x"+input;throw new Error("Unsupported type")}function toBuffer(mixed){return mixed instanceof buffer.Buffer?mixed:"string"!=typeof mixed||mixed.startsWith("0x")?dist_browser.toBuffer(mixed):buffer.Buffer.from(mixed)}function toHex(mixed){if("number"==typeof mixed)return addHexPrefix(toBig(mixed).toString(16));if(mixed instanceof bignumber.A||mixed instanceof bn_default())return addHexPrefix(mixed.toString(16));if(mixed instanceof buffer.Buffer||mixed instanceof Uint8Array)return addHexPrefix(mixed.toString("hex"));if("string"==typeof mixed){return new RegExp(/^0x[0-9a-fA-F]*$/).test(mixed)?mixed:addHexPrefix(toBuffer(mixed).toString("hex"))}throw new Error("Unsupported type")}function toBig(mixed){if(mixed instanceof bignumber.A)return mixed;if("number"==typeof mixed)return new bignumber.A(mixed.toString());if("string"==typeof mixed)return new bignumber.A(mixed);if(mixed instanceof buffer.Buffer||mixed instanceof Uint8Array)return new bignumber.A(mixed.toString("hex"));throw new Error("Unsupported type")}function toBN(mixed){return mixed instanceof bn_default()?mixed:new(bn_default())(toBig(mixed).toString(10),10)}function clearHexPrefix(input){if("string"==typeof input)return input.startsWith("0x")?input.slice(2):input;throw new Error("Unsupported type")}function formatEddsaKey(key){const hexKey=clearHexPrefix(key);return addHexPrefix(String(hexKey).padStart(64,"0"))}bignumber.A.config({EXPONENTIAL_AT:100,RANGE:[-1e5,1e7],ROUNDING_MODE:1});var signTypedData=__webpack_require__("./node_modules/@wagmi/core/dist/esm/actions/signTypedData.js"),signMessage=__webpack_require__("./node_modules/@wagmi/core/dist/esm/actions/signMessage.js"),parseUnits=__webpack_require__("./node_modules/viem/_esm/utils/unit/parseUnits.js"),lib_esm_bignumber=__webpack_require__("./node_modules/ethers/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"),jsbn=__webpack_require__("./node_modules/jsbn/index.js");class field{}field.SNARK_SCALAR_FIELD=lib_esm_bignumber.gH.from("21888242871839275222246405745257275088548364400416034343698204186575808495617"),field.FR_ORDER=lib_esm_bignumber.gH.from("21888242871839275222246405745257275088614511777268538073601725287587578984328");class FQ{add(other){const on=other,n=this.n.add(on).mod(this.m);return new FQ(n,this.m)}mul(other){const on=other,n=this.n.mul(on).mod(this.m);return new FQ(n,this.m)}sub(other){const on=other;let new_n;return new_n=this.n.gte(on)?this.n.sub(on).mod(this.m):this.n.sub(on).add(this.m).mod(this.m),new FQ(new_n,this.m)}div(other){const on_c=other,m_c=this.m,two_c=lib_esm_bignumber.gH.from("2"),on_power_c=modulo(on_c,m_c.sub(two_c),m_c),n_on_power_remainder=this.n.mul(on_power_c).mod(this.m);return new FQ(n_on_power_remainder,this.m)}static one(modulus=field.SNARK_SCALAR_FIELD){return new FQ(lib_esm_bignumber.gH.from("1"),modulus)}static zero(modulus=field.SNARK_SCALAR_FIELD){return new FQ(lib_esm_bignumber.gH.from("0"),modulus)}constructor(n,field_modulus=field.SNARK_SCALAR_FIELD){this.m=field_modulus,this.n=n.mod(this.m)}}function modulo(n,p,m){const n_=new jsbn.BigInteger(n.toString()),p_=new jsbn.BigInteger(p.toString()),m_=new jsbn.BigInteger(m.toString()),result=n_.modPow(p_,m_);return lib_esm_bignumber.gH.from(result.toString())}class jubjub{}jubjub.JUBJUB_Q=field.SNARK_SCALAR_FIELD,jubjub.JUBJUB_E=lib_esm_bignumber.gH.from("21888242871839275222246405745257275088614511777268538073601725287587578984328"),jubjub.JUBJUB_C=lib_esm_bignumber.gH.from("8"),jubjub.JUBJUB_L=jubjub.JUBJUB_E.div(jubjub.JUBJUB_C),jubjub.JUBJUB_A=lib_esm_bignumber.gH.from("168700"),jubjub.JUBJUB_D=lib_esm_bignumber.gH.from("168696");class Point{static generate(){const xBigInt=lib_esm_bignumber.gH.from("16540640123574156134436876038791482806971768689494387082833631921987005038935"),yBigInt=lib_esm_bignumber.gH.from("20819045374670962167435360035096875258406992893633759881276124905556507972311");return new Point(new FQ(xBigInt),new FQ(yBigInt))}mul(scaler){let p=new Point(this.x,this.y),a=Point.infinity(),i=0;for(;!scaler.eq(lib_esm_bignumber.gH.from("0"));){scaler.and(lib_esm_bignumber.gH.from("1")).eq(lib_esm_bignumber.gH.from("0"))||(a=a.add(p));let copyP1=new Point(p.x,p.y),copyP2=new Point(p.x,p.y);p=copyP1.add(copyP2),scaler=scaler.div(lib_esm_bignumber.gH.from("2")),i+=1}return a}add(other){if(this.x.n.eq(lib_esm_bignumber.gH.from("0"))&&this.y.n.eq(lib_esm_bignumber.gH.from("0")))return other;const u1=this.x,v1=this.y,u2=other.x,v2=other.y,u3_tmp0=u1.mul(v2.n).add(v1.mul(u2.n).n),u3_tmp1=u1.mul(u2.n).mul(v1.n).mul(v2.n).mul(jubjub.JUBJUB_D),u3_tmp2=FQ.one().add(u3_tmp1.n),u3=u3_tmp0.div(u3_tmp2.n),v3_tmp0=v1.mul(v2.n),v3_tmp1=u1.mul(u2.n).mul(jubjub.JUBJUB_A),v3_tmp3=v3_tmp0.sub(v3_tmp1.n),v3_tmp5=FQ.one().sub(u3_tmp1.n),v3=v3_tmp3.div(v3_tmp5.n);return new Point(u3,v3)}static infinity(){return new Point(new FQ(lib_esm_bignumber.gH.from("0")),new FQ(lib_esm_bignumber.gH.from("1")))}constructor(x,y){this.x=x,this.y=y}}var sha512=__webpack_require__("./node_modules/js-sha512/src/sha512.js"),lib=__webpack_require__("./node_modules/web-encoding/src/lib.mjs"),blake2b=__webpack_require__("./node_modules/blake2b/index.js"),blake2b_default=__webpack_require__.n(blake2b),permutation_Buffer=__webpack_require__("./node_modules/buffer/index.js").Buffer;class PoseidonParams{constructor(p,t,nRoundsF,nRoundsP,seed,e,constants_C,constants_M,security_target){this.p=p,this.t=t,this.nRoundsF=nRoundsF,this.nRoundsP=nRoundsP,this.seed=seed,this.e=e,this.constants_C=null==constants_C?permunation.poseidon_constants(p,`${seed}_constants`,nRoundsF+nRoundsP):constants_C,this.constants_M=null==constants_M?permunation.poseidon_matrix(p,`${seed}_matrix_0000`,t):constants_M,this.security_target=security_target}}class permunation{static H(arg){const message=(new lib._).encode(arg),buf=permutation_Buffer.alloc(32);blake2b_default()(buf.length,void 0).update(message).final(buf);const items=buf.toJSON().data;let sum=lib_esm_bignumber.gH.from("0");var i=0;for(i=0;i<items.length;i++){const tmp=lib_esm_bignumber.gH.from(items[i]).mul(lib_esm_bignumber.gH.from("256").pow(lib_esm_bignumber.gH.from(i)));sum=sum.add(tmp)}return sum}static H_Bigint(arg){const message=new Uint8Array(SignatureScheme.to_bytes(arg)),buf=permutation_Buffer.alloc(32);blake2b_default()(buf.length,void 0).update(message).final(buf);const items=buf.toJSON().data;let sum=lib_esm_bignumber.gH.from("0");var i=0;for(i=0;i<items.length;i++){const tmp=lib_esm_bignumber.gH.from(items[i]).mul(lib_esm_bignumber.gH.from("256").pow(lib_esm_bignumber.gH.from(i)));sum=sum.add(tmp)}return sum}static poseidon_constants(p,seed,n){let c;c=[];let seedBigInt=this.H(seed);const result=seedBigInt.mod(p);c.push(result);for(let i=0;i<n-1;i++){seedBigInt=this.H_Bigint(seedBigInt);const result=seedBigInt.mod(p);c.push(result)}return c}static poseidon_matrix(p,seed,t){const c=this.poseidon_constants(p,seed,2*t);let matrix;matrix=[];for(let i=0;i<t;i++){let row;row=[];for(let j=0;j<t;j++){const c_i=c[i],p_c=p,c_t_j_p=c[t+j].mod(p_c),item_c=modulo(c_i.sub(c_t_j_p),p_c.sub(2),p_c);row.push(item_c)}matrix.push(row)}return matrix}static poseidon_sbox(state,i,params){const half_F=params.nRoundsF/2;if(i<half_F||i>=half_F+params.nRoundsP)for(let j=0;j<state.length;j++){const item=modulo(state[j],params.e,params.p);state[j]=item}else{const item=modulo(state[0],params.e,params.p);state[0]=item}return state}static poseidon_mix(state,M,p){let newState;newState=[];for(let i=0;i<M.length;i++){let sum=lib_esm_bignumber.gH.from(0);for(let j=0;j<state.length;j++){const element=state[j];sum=sum.add(M[i][j].mul(element))}newState.push(sum.mod(p))}return newState}static poseidon(inputs,params){let state;state=[],state=state.concat(inputs);for(var i=0;i<params.t-inputs.length;i++)state.push(lib_esm_bignumber.gH.from(0));for(i=0;i<params.constants_C.length;i++){const C_i=params.constants_C[i];for(let index=0;index<state.length;index++){const element=state[index];state[index]=element.add(C_i)}state=this.poseidon_sbox(state,i,params),state=this.poseidon_mix(state,params.constants_M,params.p)}return state[0]}}class Signature{toStr(){return`${this.R.x.n} ${this.R.y.n} ${this.s.n}`}constructor(R,s){this.R=R,this.s=s}}class SignedMessage{toStr(){return`${this.A.x.n} ${this.A.y.n} ${this.sig.toStr()} ${this.msg.toString()}`}constructor(A,sig,msg){this.A=A,this.sig=sig,this.msg=msg}}class SignatureScheme{static to_bytes(arg){let bitIntDataItems=function bnToBuf(bn){let hex=BigInt(bn).toString(16);hex.length%2&&(hex="0"+hex);const len=hex.length/2,u8=new Uint8Array(len);let i=0,j=0;for(;i<len;)u8[i]=parseInt(hex.slice(j,j+2),16),i+=1,j+=2;return Array.from(u8)}(arg.toString());const more=32-bitIntDataItems.length;if(more>0)for(let i=0;i<more;i++)bitIntDataItems=[0].concat(bitIntDataItems);else bitIntDataItems=bitIntDataItems.slice(0,32);return bitIntDataItems=bitIntDataItems.reverse(),bitIntDataItems}static prehash_message(M){return M}static hash_secret_python(k,arg){const byteArray0=this.to_bytes(k.n),byteArray1=this.to_bytes(arg),sum=byteArray0.concat(byteArray1),digest1=sha512.sha512.array(new Uint8Array(sum).buffer);let sha512StrItems;for(let i=0;i<digest1.length;i++){let st=digest1[i].toString(16);1==st.length&&(st="0"+st),sha512StrItems=[st].concat(sha512StrItems)}const sha512MessageHexStr=sha512StrItems.join("");return lib_esm_bignumber.gH.from("0x"+sha512MessageHexStr).mod(jubjub.JUBJUB_L)}static B(){return Point.generate()}static sign(msg,key,B){const copyKey=new FQ(key.n,key.m),A=B.mul(copyKey.n),M=this.prehash_message(msg),r=this.hash_secret_python(key,M),copy_r=lib_esm_bignumber.gH.from(r.toString()),R=B.mul(copy_r),t_c=this.hash_public(R,A,M),key_n_t=key.n.mul(t_c),S=r.add(key_n_t).mod(jubjub.JUBJUB_E),signatureResult=new Signature(R,new FQ(S));return new SignedMessage(A,signatureResult,msg)}static as_scalar(point){return[point.x.n,point.y.n]}static hash_public(R,A,M){let inputMsg;inputMsg=this.as_scalar(R).concat(this.as_scalar(A)).concat([M]);const params=new PoseidonParams(field.SNARK_SCALAR_FIELD,6,6,52,"poseidon",lib_esm_bignumber.gH.from(5),null,null,128);return permunation.poseidon(inputMsg,params)}}class eddsa_Signature{toStr(){return`${this.R.x.n} ${this.R.y.n} ${this.s.n}`}constructor(R,s){this.R=R,this.s=s}}class eddsa_SignedMessage{toStr(){return`${this.A.x.n} ${this.A.y.n} ${this.sig.toStr()} ${this.msg.toString()}`}constructor(A,sig,msg){this.A=A,this.sig=sig,this.msg=msg}}class eddsa_SignatureScheme{static to_bytes(arg){let bitIntDataItems=function eddsa_bnToBuf(bn){let hex=BigInt(bn).toString(16);hex.length%2&&(hex="0"+hex);const len=hex.length/2,u8=new Uint8Array(len);let i=0,j=0;for(;i<len;)u8[i]=parseInt(hex.slice(j,j+2),16),i+=1,j+=2;return Array.from(u8)}(arg.toString());const more=32-bitIntDataItems.length;if(more>0)for(let i=0;i<more;i++)bitIntDataItems=[0].concat(bitIntDataItems);else bitIntDataItems=bitIntDataItems.slice(0,32);return bitIntDataItems=bitIntDataItems.reverse(),bitIntDataItems}static prehash_message(M){return M}static hash_secret_python(k,arg){const byteArray0=this.to_bytes(k.n),byteArray1=this.to_bytes(arg),sum=byteArray0.concat(byteArray1),digest1=sha512.sha512.array(new Uint8Array(sum).buffer);let sha512StrItems;for(let i=0;i<digest1.length;i++){let st=digest1[i].toString(16);1==st.length&&(st="0"+st),sha512StrItems=[st].concat(sha512StrItems)}const sha512MessageHexStr=sha512StrItems.join("");return lib_esm_bignumber.gH.from("0x"+sha512MessageHexStr).mod(jubjub.JUBJUB_L)}static B(){return Point.generate()}static sign(msg,key,B){const copyKey=new FQ(key.n,key.m),A=B.mul(copyKey.n),M=this.prehash_message(msg),r=this.hash_secret_python(key,M),copy_r=lib_esm_bignumber.gH.from(r.toString()),R=B.mul(copy_r),t_c=this.hash_public(R,A,M),key_n_t=key.n.mul(t_c),S=r.add(key_n_t).mod(jubjub.JUBJUB_E),signatureResult=new eddsa_Signature(R,new FQ(S));return new eddsa_SignedMessage(A,signatureResult,msg)}static as_scalar(point){return[point.x.n,point.y.n]}static hash_public(R,A,M){let inputMsg;inputMsg=this.as_scalar(R).concat(this.as_scalar(A)).concat([M]);const params=new PoseidonParams(field.SNARK_SCALAR_FIELD,6,6,52,"poseidon",lib_esm_bignumber.gH.from(5),null,null,128);return permunation.poseidon(inputMsg,params)}}class babyJub{static packPoint(P0,P1){const packed=eddsa_SignatureScheme.to_bytes(P1).reverse();babyJub.lt(P0,lib_esm_bignumber.gH.from("0"))&&(packed[0]=128|packed[0]);return function eddsa_bytesToHexString(bytes){let strItems;strItems=[];for(let i=0;i<bytes.length;i++){let st=bytes[i].toString(16);1==st.length&&(st="0"+st),strItems.push(st)}return strItems.join("")}(packed)}static lt(a,b){const half=field.SNARK_SCALAR_FIELD.div(lib_esm_bignumber.gH.from("2")),p=field.SNARK_SCALAR_FIELD;let aa,bb;return aa=a.gt(half)?a.sub(p):a,bb=b.gt(half)?b.sub(p):b,aa.lt(bb)}static gt(a,b){const half=field.SNARK_SCALAR_FIELD.div(lib_esm_bignumber.gH.from("2")),p=field.SNARK_SCALAR_FIELD;let aa,bb;return aa=a.gt(half)?a.sub(p):a,bb=b.gt(half)?b.sub(p):b,aa.gt(bb)}}class EDDSAUtil{static sign(PrivateKey,hash){const strKey=lib_esm_bignumber.gH.from(PrivateKey),msg=lib_esm_bignumber.gH.from(hash),copyKey=new FQ(strKey),B=eddsa_SignatureScheme.B(),signed=eddsa_SignatureScheme.sign(msg,copyKey,B);EDDSAUtil.formatted(signed.sig.R.x.n.toHexString().slice(2)),EDDSAUtil.formatted(signed.sig.R.y.n.toHexString().slice(2)),EDDSAUtil.formatted(signed.sig.s.n.toHexString().slice(2));return{Rx:signed.sig.R.x.n.toString(),Ry:signed.sig.R.y.n.toString(),s:signed.sig.s.n.toString()}}static formatted(hexString){const more=64-hexString.length;if(more>0)for(let i=0;i<more;i++)hexString="0"+hexString;else hexString=hexString.slice(0,64);return hexString}static generateKeyPair(seed){let bigInt=lib_esm_bignumber.gH.from(0);for(let i=0;i<seed.length;i++){const item=seed[i],itemBigInt=lib_esm_bignumber.gH.from(item),tmp=lib_esm_bignumber.gH.from("256").pow(lib_esm_bignumber.gH.from(i));bigInt=bigInt.add(itemBigInt.mul(tmp))}const secretKey=bigInt.mod(jubjub.JUBJUB_L),copySecretKey=lib_esm_bignumber.gH.from(secretKey.toString()),publicKey=eddsa_SignatureScheme.B().mul(copySecretKey);return{publicKeyX:publicKey.x.n.toString(),publicKeyY:publicKey.y.n.toString(),secretKey:secretKey.toString()}}static pack(publicKeyX,publicKeyY){const P0=lib_esm_bignumber.gH.from(publicKeyX),P1=lib_esm_bignumber.gH.from(publicKeyY);return babyJub.packPoint(P0,P1)}}var crypto_js=__webpack_require__("./node_modules/crypto-js/index.js");const SNARK_SCALAR_FIELD=new bignumber.A("21888242871839275222246405745257275088548364400416034343698204186575808495617",10);function generateKey(sig){if(sig){const seedBuff=dist_browser.sha256(toBuffer(sig)),bitIntDataItems=function eddsa_bnToBufWithFixedLength(bn,outputLength){let hex=BigInt(bn).toString(16);hex.length%2&&(hex="0"+hex);const len=hex.length/2,u8=new Uint8Array(len);let i=0,j=0;for(;i<len;)u8[i]=parseInt(hex.slice(j,j+2),16),i+=1,j+=2;let bitIntDataItems=Array.from(u8);const more=outputLength-bitIntDataItems.length;if(more>0)for(let i=0;i<more;i++)bitIntDataItems=[0].concat(bitIntDataItems);else bitIntDataItems=bitIntDataItems.slice(0,outputLength);return bitIntDataItems}(lib_esm_bignumber.gH.from("0x"+seedBuff.toString("hex")).toString(),32),keyPair=(seed=>{let bigInt=lib_esm_bignumber.gH.from(0);for(let i=0;i<seed.length;i++){const item=seed[i],itemBigInt=lib_esm_bignumber.gH.from(item),tmp=lib_esm_bignumber.gH.from("256").pow(lib_esm_bignumber.gH.from(i));bigInt=bigInt.add(itemBigInt.mul(tmp))}const secretKey=bigInt.mod(jubjub.JUBJUB_L),copySecretKey=lib_esm_bignumber.gH.from(secretKey.toString()),publicKey=SignatureScheme.B().mul(copySecretKey);return{publicKeyX:publicKey.x.n.toString(),publicKeyY:publicKey.y.n.toString(),secretKey:secretKey.toString()}})(bitIntDataItems);return{keyPair,formatedPx:formatEddsaKey(toHex(toBig(keyPair.publicKeyX))),formatedPy:formatEddsaKey(toHex(toBig(keyPair.publicKeyY))),sk:toHex(toBig(keyPair.secretKey))}}throw Error("No signature")}const genSigWithPadding=(PrivateKey,hash)=>{const signature=EDDSAUtil.sign(PrivateKey,hash);let signatureRx_Hex=clearHexPrefix(toHex(toBN(signature.Rx)));if(signatureRx_Hex.length<64){signatureRx_Hex=new Array(64-signatureRx_Hex.length).fill(0).join("").toString()+signatureRx_Hex}let signatureRy_Hex=clearHexPrefix(toHex(toBN(signature.Ry)));if(signatureRy_Hex.length<64){signatureRy_Hex=new Array(64-signatureRy_Hex.length).fill(0).join("").toString()+signatureRy_Hex}let signatureS_Hex=clearHexPrefix(toHex(toBN(signature.s)));if(signatureS_Hex.length<64){signatureS_Hex=new Array(64-signatureS_Hex.length).fill(0).join("").toString()+signatureS_Hex}return"0x"+signatureRx_Hex+signatureRy_Hex+signatureS_Hex};function get_EddsaSig_Transfer(request,eddsaKey){return((inputs,PrivateKey)=>{const p=field.SNARK_SCALAR_FIELD,poseidonParams=new PoseidonParams(p,inputs.length+1,6,53,"poseidon",lib_esm_bignumber.gH.from(5),null,null,128);let bigIntInputs;bigIntInputs=[];for(let i=0;i<inputs.length;i++){const input=inputs[i];bigIntInputs.push(lib_esm_bignumber.gH.from(input))}const hash=permunation.poseidon(bigIntInputs,poseidonParams);return{hash,result:genSigWithPadding(PrivateKey,hash)}})([new(bn_default())(dist_browser.toBuffer(request.exchange)).toString(),request.payerId,request.payeeId,request.token.tokenId,request.token.volume,request.maxFee.tokenId,request.maxFee.volume,new(bn_default())(dist_browser.toBuffer(request.payeeAddr)).toString(),0,0,request.validUntil,request.storageId],eddsaKey)}const makeRequestParamStr=request=>{const arrObj=Array.from(request);arrObj.sort(function(a,b){return a[0].localeCompare(b[0])});const orderedMap=new Map(arrObj.map(i=>[i[0],i[1]])),paramlist=[],keys=Object.keys(Object.fromEntries(orderedMap));return keys&&keys.forEach(key=>{const value=request.get(key);void 0!==value&&""!==value&&paramlist.push(`${key}=${value}`)}),encodeURIComponent(paramlist.join("&")).replace(/%2C/g,"%252C")},makeObjectStr=request=>{const jsonTxt=JSON.stringify(Object.fromEntries(request));return encodeURIComponent(jsonTxt).replace(/[!'()]/g,escape)};async function getExchangeInfo(){return await(await fetch(`${LoopringAPI.BaseApi}${defs.kF.GET_EXCHANGE_INFO}`)).json()}async function getOffchainFeeAmt(accountId,type){return await(await fetch(`${LoopringAPI.BaseApi}${defs.kF.GET_OFFCHAIN_FEE_AMT}?accountId=${accountId}&requestType=${type}`)).json()}const LoopringAPI={CHAIN:"sandbox"===AppSettings.A.ApiVersion?defs.nU.SEPOLIA:defs.nU.MAINNET,BaseApi:"sandbox"===AppSettings.A.ApiVersion?"https://uat2.loopring.io":"https://api3.loopring.io",userAPI:{getOffchainFeeAmt,unlockAccount:async function unlockAccount(accInfo,config){let keySeed=accInfo.keySeed;if(!keySeed){const exchangeInfo=await getExchangeInfo();keySeed=defs.u6.replace("${exchangeAddress}",exchangeInfo.exchangeAddress).replace("${nonce}","0")}const eddsaKeyData=generateKey(await(0,signMessage.l)(config,{message:keySeed})),{sk}=eddsaKeyData,{accountId}=accInfo,url=`${LoopringAPI.BaseApi}${defs.kF.API_KEY_ACTION}?accountId=${accountId}`,dataToSign=function sortObjDictionary(obj){const dataToSig=new Map;return obj&&Reflect.ownKeys(obj).sort((a,b)=>a.toString().localeCompare(b.toString())).forEach(key=>{dataToSig.set(key.toString(),obj[key.toString()])}),dataToSig}({accountId}),eddsa=function getEdDSASig(method,basePath,api_url,requestInfo,PrivateKey){let params;if("GET"===(method=method.toUpperCase().trim())||"DELETE"===method)params=makeRequestParamStr(requestInfo);else{if("POST"!==method&&"PUT"!==method)throw new Error(`${method} is not supported yet!`);params=makeObjectStr(requestInfo)}const message=`${method}&${encodeURIComponent(`${basePath}${api_url}`)}&${params}`;let hash=new bignumber.A(crypto_js.SHA256(message).toString(),16).mod(SNARK_SCALAR_FIELD).toFormat(0,0,{});return genSigWithPadding(PrivateKey,hash)}("GET",LoopringAPI.BaseApi,defs.kF.API_KEY_ACTION,dataToSign,sk),res=await(await fetch(url,{headers:{"X-Api-Sig":eddsa}})).json();if(res.apiKey)return{eddsaKey:eddsaKeyData,apiKey:res.apiKey};var _res_resultInfo;throw Error(`Could not unlock account, error:${(null===(_res_resultInfo=res.resultInfo)||void 0===_res_resultInfo?void 0:_res_resultInfo.message)||" unknown"}`)},activateAccount:async function activateAccount({token,accInfo},config){var _feeData_fees_find,_activationReq_resultInfo;const exchangeInfo=await getExchangeInfo(),message=defs.u6.replace("${exchangeAddress}",exchangeInfo.exchangeAddress).replace("${nonce}",accInfo.nonce.toString()),eddsaKeyData=generateKey(await(0,signMessage.l)(config,{message})),{formatedPx,formatedPy}=eddsaKeyData,publicKey={x:formatedPx,y:formatedPy},fee=null===(_feeData_fees_find=(await getOffchainFeeAmt(accInfo.accountId,defs.$I.UPDATE_ACCOUNT)).fees.find(f=>f.token.toUpperCase()==token.symbol.toUpperCase()))||void 0===_feeData_fees_find?void 0:_feeData_fees_find.fee;if(!fee)throw new Error(`Could not get fee for ${token.symbol.toUpperCase()}`);const req={exchange:exchangeInfo.exchangeAddress,owner:accInfo.owner,accountId:accInfo.accountId,publicKey,maxFee:{tokenId:token.id,volume:fee},keySeed:message,validUntil:Math.round(Date.now()/1e3)+2592e3,nonce:accInfo.nonce},typedData=function getUpdateAccountEcdsaTypedData(data,chainId){const message={owner:data.owner,accountID:data.accountId,feeTokenID:data.maxFee.tokenId,maxFee:data.maxFee.volume,publicKey:addHexPrefix((pk=data.publicKey,new(bn_default())(EDDSAUtil.pack(pk.x,pk.y),16)).toString(16)),validUntil:data.validUntil,nonce:data.nonce};var pk;return{types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],AccountUpdate:[{name:"owner",type:"address"},{name:"accountID",type:"uint32"},{name:"feeTokenID",type:"uint16"},{name:"maxFee",type:"uint96"},{name:"publicKey",type:"uint256"},{name:"validUntil",type:"uint32"},{name:"nonce",type:"uint32"}]},primaryType:"AccountUpdate",domain:{name:"Loopring Protocol",version:"3.6.0",chainId,verifyingContract:data.exchange},message}}(req,LoopringAPI.CHAIN),ecdsaSignature=(await(0,signTypedData.C)(config,typedData)).slice(0,132),activationReq=await(await fetch(`${LoopringAPI.BaseApi}${defs.kF.ACCOUNT_ACTION}`,{method:"POST",body:JSON.stringify({...req,ecdsaSignature}),headers:{"Content-Type":"application/json","X-Api-Sig":ecdsaSignature}})).json();if(null==activationReq||null===(_activationReq_resultInfo=activationReq.resultInfo)||void 0===_activationReq_resultInfo?void 0:_activationReq_resultInfo.message)throw new Error(activationReq.resultInfo.message);return publicKey},transfer:async function transfer({accInfo,amount,depositAddress,call_data,token,unlockedAccount},config){var _feeData_fees_find;const exchangeInfo=await getExchangeInfo(),{apiKey,eddsaKey}=unlockedAccount,storageId=await async function getNextStorageId(req,apiKey){const{accountId,tokenId}=req,url=`${LoopringAPI.BaseApi}${defs.kF.GET_NEXT_STORAGE_ID}?accountId=${accountId}&sellTokenId=${tokenId}`;return await(await fetch(url,{headers:{"X-Api-Key":apiKey}})).json()}({accountId:accInfo.accountId,tokenId:Number(null==token?void 0:token.contract)},apiKey),fee=null===(_feeData_fees_find=(await getOffchainFeeAmt(accInfo.accountId,defs.$I.TRANSFER)).fees.find(f=>f.token.toUpperCase()==token.symbol.toUpperCase()))||void 0===_feeData_fees_find?void 0:_feeData_fees_find.fee;if(!fee)throw new Error(`Could not get fee for ${token.symbol.toUpperCase()}`);const req={exchange:exchangeInfo.exchangeAddress,payerAddr:accInfo.owner,payerId:accInfo.accountId,payeeAddr:depositAddress,payeeId:0,storageId:storageId.offchainId,token:{tokenId:Number(null==token?void 0:token.contract),volume:(0,parseUnits.X)(amount,Number(null==token?void 0:token.decimals)).toString()},maxFee:{tokenId:Number(null==token?void 0:token.contract),volume:fee},validUntil:Math.round(Date.now()/1e3)+2592e3,...call_data?{memo:call_data}:{}};return await async function submitInternalTransfer(req,apiKey,eddsaKey,config){const typedData=function getTransferTypedData(data,chainId){const message={from:data.payerAddr,to:data.payeeAddr,tokenID:data.token.tokenId,amount:data.token.volume,feeTokenID:data.maxFee.tokenId,maxFee:data.maxFee.volume,validUntil:data.validUntil,storageID:data.storageId};return{types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Transfer:[{name:"from",type:"address"},{name:"to",type:"address"},{name:"tokenID",type:"uint16"},{name:"amount",type:"uint96"},{name:"feeTokenID",type:"uint16"},{name:"maxFee",type:"uint96"},{name:"validUntil",type:"uint32"},{name:"storageID",type:"uint32"}]},primaryType:"Transfer",domain:{name:"Loopring Protocol",version:"3.6.0",chainId,verifyingContract:data.exchange},message}}(req,LoopringAPI.CHAIN),ecdsaSignature=(await(0,signTypedData.C)(config,typedData)).slice(0,132),eddsaSignature=get_EddsaSig_Transfer(req,eddsaKey).result;return await(await fetch(`${LoopringAPI.BaseApi}${defs.kF.POST_INTERNAL_TRANSFER}`,{method:"POST",body:JSON.stringify({...req,eddsaSignature,ecdsaSignature}),headers:{"Content-Type":"application/json","X-Api-Sig":ecdsaSignature,"X-Api-Key":apiKey}})).json()}(req,apiKey,eddsaKey.sk,config)}}}},"./lib/loopring/defs.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var LOOPRING_URLs,ChainId,OffchainFeeReqType;__webpack_require__.d(__webpack_exports__,{$I:()=>OffchainFeeReqType,kF:()=>LOOPRING_URLs,nU:()=>ChainId,u6:()=>KEY_MESSAGE}),function(LOOPRING_URLs){LOOPRING_URLs.GET_AVAILABLE_BROKER="/api/v3/getAvailableBroker",LOOPRING_URLs.GET_RELAYER_CURRENT_TIME="/api/v3/timestamp",LOOPRING_URLs.API_KEY_ACTION="/api/v3/apiKey",LOOPRING_URLs.GET_NEXT_STORAGE_ID="/api/v3/storageId",LOOPRING_URLs.ORDER_ACTION="/api/v3/order",LOOPRING_URLs.ORDER_CANCEL_HASH_LIST="/api/v3/orders/byHash",LOOPRING_URLs.ORDER_CANCEL_CLIENT_ORDER_ID_LIST="/api/v3/orders/byClientOrderId",LOOPRING_URLs.GET_MULTI_ORDERS="/api/v3/orders",LOOPRING_URLs.GET_MARKETS="/api/v3/exchange/markets",LOOPRING_URLs.GET_TOKENS="/api/v3/exchange/tokens",LOOPRING_URLs.GET_EXCHANGE_INFO="/api/v3/exchange/info",LOOPRING_URLs.GET_WITHDRAWAL_AGENTS="/api/v3/exchange/withdrawalAgents",LOOPRING_URLs.GET_EXCHANGE_FEEINFO="/api/v3/exchange/feeInfo",LOOPRING_URLs.GET_IGNORE_WITHDRAW="/api/v3/exchange/notWithdrawContractTokens",LOOPRING_URLs.GET_MIX_MARKETS="/api/v3/mix/markets",LOOPRING_URLs.GET_DEPTH="/api/v3/depth",LOOPRING_URLs.GET_MIX_DEPTH="/api/v3/mix/depth",LOOPRING_URLs.GET_TICKER="/api/v3/ticker",LOOPRING_URLs.GET_MIX_TICKER="/api/v3/mix/ticker",LOOPRING_URLs.GET_CANDLESTICK="/api/v3/candlestick",LOOPRING_URLs.GET_MIX_CANDLESTICK="/api/v3/mix/candlestick",LOOPRING_URLs.GET_FIAT_PRICE="/api/v3/price",LOOPRING_URLs.GET_TRADES="/api/v3/trade",LOOPRING_URLs.POST_INTERNAL_TRANSFER="/api/v3/transfer",LOOPRING_URLs.ACCOUNT_ACTION="/api/v3/account",LOOPRING_URLs.COUNTER_FACTUAL_INFO="/api/v3/counterFactualInfo",LOOPRING_URLs.GET_USER_REG_TXS="/api/v3/user/createInfo",LOOPRING_URLs.GET_PWD_RESET_TXS="/api/v3/user/updateInfo",LOOPRING_URLs.GET_USER_EXCHANGE_BALANCES="/api/v3/user/balances",LOOPRING_URLs.GET_USER_DEPOSITS_HISTORY="/api/v3/user/deposits",LOOPRING_URLs.WITHDRAWALS_ACTION="/api/v3/user/withdrawals",LOOPRING_URLs.POST_FORCE_WITHDRAWALS="/api/v3/user/forceWithdrawals",LOOPRING_URLs.GET_USER_TRANSFERS_LIST="/api/v3/user/transfers",LOOPRING_URLs.GET_USER_TRADE_HISTORY="/api/v3/user/trades",LOOPRING_URLs.GET_USER_TXS="/api/v3/user/transactions",LOOPRING_URLs.GET_USER_FEE_RATE="/api/v3/user/feeRates",LOOPRING_URLs.GET_USER_ORDER_FEE_RATE="/api/v3/user/orderFee",LOOPRING_URLs.GET_MINIMAL_ORDER_AMT="/api/v3/user/orderAmount",LOOPRING_URLs.GET_MINIMUM_TOKEN_AMT="/api/v3/user/orderUserRateAmount",LOOPRING_URLs.GET_OFFCHAIN_FEE_AMT="/api/v3/user/offchainFee",LOOPRING_URLs.GET_USER_BILLS="/api/v3/user/bills",LOOPRING_URLs.GET_ALLOWANCES="/api/v3/eth/allowances",LOOPRING_URLs.GET_ETH_NONCE="/api/v3/eth/nonce",LOOPRING_URLs.GET_ETH_BALANCES="/api/v3/eth/balances",LOOPRING_URLs.GET_TOKEN_BALANCES="/api/v3/eth/tokenBalances",LOOPRING_URLs.GET_AKK_TOKEN_BALANCES="/api/v3/eth/tokenBalances/all",LOOPRING_URLs.GET_GAS_PRICE="/api/v3/eth/recommendedGasPrice",LOOPRING_URLs.GET_GAS_PRICE_RANGE="/api/v3/eth/recommendedGasPriceRange",LOOPRING_URLs.GET_RECOMENDED_MARKETS="/api/v3/exchange/recommended",LOOPRING_URLs.GET_AMM_POOLS_CONF="/api/v3/amm/pools",LOOPRING_URLs.GET_AMM_POOLS_SNAPSHOT="/api/v3/amm/balance",LOOPRING_URLs.GET_AMM_POOLS_BALANCES="/api/v3/amm/balances",LOOPRING_URLs.GET_AMM_POOL_STATS="/api/v3/amm/poolsStats",LOOPRING_URLs.POST_JOIN_AMM_POOL="/api/v3/amm/join",LOOPRING_URLs.POST_EXIT_AMM_POOL="/api/v3/amm/exit",LOOPRING_URLs.GET_AMM_POOL_TXS="/api/v3/amm/transactions",LOOPRING_URLs.GET_USER_AMM_POOL_TXS="/api/v3/amm/user/transactions",LOOPRING_URLs.GET_AMM_POOL_TRADE_TXS="/api/v3/amm/trades",LOOPRING_URLs.GET_AMM_ACTIVITY_RULES="/api/v3/sidecar/activityRules",LOOPRING_URLs.GET_AMMPOOL_USER_REWARDS="/api/v3/amm/user/rewards",LOOPRING_URLs.GET_AMMPOOL_REWARDS="/api/v3/amm/rewards",LOOPRING_URLs.GET_AMMPOOL_GAME_RANK="/api/v3/game/rank",LOOPRING_URLs.GET_AMMPOOL_GAME_USER_RANK="/api/v3/game/user/rank",LOOPRING_URLs.GET_LIQUIDITY_MINING="/api/v3/sidecar/liquidityMining",LOOPRING_URLs.GET_DELEGATE_GET_CODE="/api/v3/delegator/getCode",LOOPRING_URLs.GET_DELEGATE_GET_IPFS="/api/v3/delegator/ipfs",LOOPRING_URLs.GET_LIQUIDITY_MINING_USER_HISTORY="/api/v3/sidecar/liquidityMiningUserHistory",LOOPRING_URLs.GET_PROTOCOL_PORTRAIT="/api/v3/sidecar/ProtocolPortrait",LOOPRING_URLs.GET_PROTOCOL_REWARDS="/api/v3/sidecar/commissionReward",LOOPRING_URLs.GET_AMM_ASSET_HISTORY="/api/v3/amm/assets",LOOPRING_URLs.GET_ASSET_LOCK_RECORDS="api/v3/user/lockRecords",LOOPRING_URLs.GET_DEFI_TOKENS="/api/v3/defi/tokens",LOOPRING_URLs.GET_DEFI_MARKETS="/api/v3/defi/markets",LOOPRING_URLs.POST_DEFI_ORDER="/api/v3/defi/order",LOOPRING_URLs.GET_DEFI_REWARDS="/api/v3/defi/rewards",LOOPRING_URLs.GET_DEFI_TRANSACTIONS="/api/v3/defi/transactions",LOOPRING_URLs.SET_REFERRER="/api/v3/refer",LOOPRING_URLs.GET_WS_KEY="/v3/ws/key",LOOPRING_URLs.GET_LATEST_TOKEN_PRICES="/api/v3/datacenter/getLatestTokenPrices",LOOPRING_URLs.GET_USER_TRADE_AMOUNT="/api/v3/datacenter/getUserTradeAmount",LOOPRING_URLs.GET_USER_ASSETS="/api/wallet/v3/userAssets",LOOPRING_URLs.GET_TOKEN_PRICES="/api/wallet/v3/tokenPrices",LOOPRING_URLs.GET_GUARDIAN_APPROVE_LIST="/api/wallet/v3/getGuardianApproveList",LOOPRING_URLs.GET_PROTECTORS="/api/wallet/v3/getProtects",LOOPRING_URLs.GET_OPERATION_LOGS="/api/wallet/v3/operationLogs",LOOPRING_URLs.GET_HEBAO_CONFIG="/api/wallet/v3/getAppConfigs",LOOPRING_URLs.GET_WALLET_TYPE="/api/wallet/v3/wallet/type",LOOPRING_URLs.GET_WALLET_MODULES="/api/wallet/v3/walletModules",LOOPRING_URLs.GET_WALLET_CONTRACTVERSION="/api/wallet/v3/contractVersion",LOOPRING_URLs.RESOLVE_ENS="/api/wallet/v3/resolveEns",LOOPRING_URLs.RESOLVE_NAME="/api/wallet/v3/resolveName",LOOPRING_URLs.SUBMIT_APPROVE_SIGNATURE="/api/wallet/v3/submitApproveSignature",LOOPRING_URLs.REJECT_APPROVE_SIGNATURE="/api/wallet/v3/rejectApproveSignature",LOOPRING_URLs.SEND_META_TX="/api/wallet/v3/sendMetaTx",LOOPRING_URLs.GET_ACCOUNT_SERVICES="/api/v3/spi/getAccountServices",LOOPRING_URLs.GET_USER_VIP_INFO="/api/v3/user/vipInfo",LOOPRING_URLs.GET_USER_VIP_ASSETS="/api/v3/datacenter/getUserAssets",LOOPRING_URLs.GET_USER_NFT_BALANCES="/api/v3/user/nft/balances",LOOPRING_URLs.GET_USER_NFT_BALANCES_BY_COLLECTION="/api/v3/user/nft/collection/balances",LOOPRING_URLs.GET_NFT_OFFCHAIN_FEE_AMT="/api/v3/user/nft/offchainFee",LOOPRING_URLs.POST_NFT_INTERNAL_TRANSFER="/api/v3/nft/transfer",LOOPRING_URLs.POST_NFT_WITHDRAWALS="/api/v3/nft/withdrawal",LOOPRING_URLs.POST_NFT_MINT="/api/v3/nft/mint",LOOPRING_URLs.POST_NFT_TRADE="/api/v3/nft/trade",LOOPRING_URLs.POST_NFT_VALIDATE_ORDER="/api/v3/nft/validateOrder",LOOPRING_URLs.POST_NFT_EDIT_COLLECTION="/api/v3/nft/collection/edit",LOOPRING_URLs.POST_NFT_CREATE_LEGACY_COLLECTION="/api/v3/nft/collection/legacy/tokenAddress",LOOPRING_URLs.POST_NFT_VALIDATE_REFRESH_NFT="/api/v3/nft/image/refresh",LOOPRING_URLs.POST_DEPLOY_COLLECTION="/api/v3/collection/deployTokenAddress",LOOPRING_URLs.POST_NFT_LEGACY_UPDATE_COLLECTION="/api/v3/nft/collection/legacy/updateNftCollection",LOOPRING_URLs.POST_NFT_UPDATE_NFT_GROUP="/api/v3/user/nft/updateNftPreference",LOOPRING_URLs.GET_NFT_COLLECTION="/api/v3/nft/collection",LOOPRING_URLs.POST_NFT_CREATE_COLLECTION="/api/v3/nft/collection",LOOPRING_URLs.DELETE_NFT_CREATE_COLLECTION="/api/v3/nft/collection",LOOPRING_URLs.GET_COLLECTION_WHOLE_NFTS="/api/v3/nft/public/collection/items",LOOPRING_URLs.GET_NFT_COLLECTION_PUBLISH="/api/v3/nft/public/collection",LOOPRING_URLs.GET_NFT_COLLECTION_HASNFT="/api/v3/user/collection/details",LOOPRING_URLs.GET_NFT_LEGACY_COLLECTION="/api/v3/nft/collection/legacy",LOOPRING_URLs.GET_NFT_LEGACY_TOKENADDRESS="/api/v3/nft/collection/legacy/tokenAddress",LOOPRING_URLs.GET_NFT_LEGACY_BALANCE="/api/v3/nft/collection/legacy/balance",LOOPRING_URLs.GET_NFTs_INFO="/api/v3/nft/info/nfts",LOOPRING_URLs.GET_USER_NFT_TRANSFER_HISTORY="/api/v3/user/nft/transfers",LOOPRING_URLs.GET_USER_NFT_DEPOSIT_HISTORY="/api/v3/user/nft/deposits",LOOPRING_URLs.GET_USER_NFT_WITHDRAW_HISTORY="/api/v3/user/nft/withdrawals",LOOPRING_URLs.GET_USER_NFT_TRANSACTION_HISTORY="/api/v3/user/nft/transactions",LOOPRING_URLs.GET_USER_NFT_TRADE_HISTORY_OLD="/api/v3/user/nft/trades",LOOPRING_URLs.GET_USER_NFT_TRADE_HISTORY="/api/v3/new/user/nft/trades",LOOPRING_URLs.GET_USER_NFT_MINT_HISTORY="/api/v3/user/nft/mints",LOOPRING_URLs.GET_DEPLOY_TOKEN_ADDRESS="/api/v3/nft/deployTokenAddress",LOOPRING_URLs.IPFS_META_URL="https://ipfs.loopring.io/ipfs/",LOOPRING_URLs.GET_DUAL_INDEX="/api/v3/dual/index",LOOPRING_URLs.GET_DUAL_PRICES="/api/v3/dual/prices",LOOPRING_URLs.GET_DUAL_INFOS="/api/v3/dual/infos",LOOPRING_URLs.GET_DUAL_TRANSACTIONS="/api/v3/dual/transactions",LOOPRING_URLs.GET_DUAL_BALANCE="/api/v3/dual/balance",LOOPRING_URLs.GET_DUAL_RULE="/api/v3/dual/rules",LOOPRING_URLs.POST_DUAL_ORDER="/api/v3/dual/order",LOOPRING_URLs.GET_DUAL_USER_LOCKED="/api/v3/dual/lockRecordAmount",LOOPRING_URLs.GET_LUCK_TOKEN_AGENTS="/api/v3/luckyToken/agents",LOOPRING_URLs.GET_LUCK_TOKEN_AUTHORIZEDSIGNERS="/api/v3/luckyToken/authorizedSigners",LOOPRING_URLs.GET_LUCK_TOKEN_CLAIMHISTORY="/api/v3/luckyToken/user/claimHistory",LOOPRING_URLs.GET_LUCK_TOKEN_LUCKYTOKENS="/api/v3/luckyToken/user/luckyTokens",LOOPRING_URLs.GET_LUCK_TOKEN_LUCKYTOKENDETAIL="/api/v3/luckyToken/user/luckyTokenDetail",LOOPRING_URLs.GET_LUCK_TOKEN_BLINDBOXDETAIL="/api/v3/luckyToken/user/blindBoxDetail",LOOPRING_URLs.GET_LUCK_TOKEN_WITHDRAWALS="/api/v3/luckyToken/user/withdraws ",LOOPRING_URLs.GET_LUCK_TOKEN_BALANCES="/api/v3/luckyToken/user/balances",LOOPRING_URLs.GET_LUCK_TOKEN_CLAIMEDLUCKYTOKENS="/api/v3/luckyToken/user/claimedLuckyTokens",LOOPRING_URLs.GET_LUCK_TOKEN_CLAIMEDBLINDBOX="/api/v3/luckyToken/user/claimBlindBoxHistory",LOOPRING_URLs.GET_LUCK_TOKEN_SUMMARY="/api/v3/luckyToken/user/summary",LOOPRING_URLs.POST_LUCK_TOKEN_SENDLUCKYTOKEN="/api/v3/luckyToken/sendLuckyToken",LOOPRING_URLs.POST_LUCK_TOKEN_CLAIMLUCKYTOKEN="/api/v3/luckyToken/claimLuckyToken",LOOPRING_URLs.POST_LUCK_TOKEN_CLAIMBLINDBOX="/api/v3/luckyToken/claimBlindBox",LOOPRING_URLs.POST_LUCK_TOKEN_WITHDRAWALS="/api/v3/luckyToken/user/withdrawals",LOOPRING_URLs.GET_BANXA_API_KEY="/api/v3/hmacAuthentication",LOOPRING_URLs.GET_STAKE_PRODUCTS="/api/v3/stake/products",LOOPRING_URLs.POST_STAKE_CLAIM="/api/v3/stake/claim",LOOPRING_URLs.POST_STAKE="/api/v3/stake/stake",LOOPRING_URLs.POST_STAKE_REDEEM="/api/v3/stake/redeem",LOOPRING_URLs.GET_STAKE_SUMMARY="/api/v3/stake/user/summary",LOOPRING_URLs.GET_STAKE_TRANSACTIONS="/api/v3/stake/user/transactions",LOOPRING_URLs.GET_CONTACTS="/api/v3/user/contact",LOOPRING_URLs.CREATE_CONTACT="/api/v3/user/contact/add",LOOPRING_URLs.UPDATE_CONTACT="/api/v3/user/contact/update",LOOPRING_URLs.DELETE_CONTACT="/api/v3/user/contact",LOOPRING_URLs.GET_CEFI_MARKETS="api/v3/cefi/markets",LOOPRING_URLs.GET_CEFI_DEPTH="api/v3/cefi/depth",LOOPRING_URLs.GET_CEFI_ORDERS="api/v3/cefi/orders",LOOPRING_URLs.POST_CEFI_ORDER="api/v3/cefi/order"}(LOOPRING_URLs||(LOOPRING_URLs={})),function(ChainId){ChainId[ChainId.MAINNET=1]="MAINNET",ChainId[ChainId.SEPOLIA=11155111]="SEPOLIA"}(ChainId||(ChainId={})),function(OffchainFeeReqType){OffchainFeeReqType[OffchainFeeReqType.ORDER=0]="ORDER",OffchainFeeReqType[OffchainFeeReqType.OFFCHAIN_WITHDRAWAL=1]="OFFCHAIN_WITHDRAWAL",OffchainFeeReqType[OffchainFeeReqType.UPDATE_ACCOUNT=2]="UPDATE_ACCOUNT",OffchainFeeReqType[OffchainFeeReqType.TRANSFER=3]="TRANSFER",OffchainFeeReqType[OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL=4]="FAST_OFFCHAIN_WITHDRAWAL",OffchainFeeReqType[OffchainFeeReqType.OPEN_ACCOUNT=5]="OPEN_ACCOUNT",OffchainFeeReqType[OffchainFeeReqType.AMM_EXIT=6]="AMM_EXIT",OffchainFeeReqType[OffchainFeeReqType.DEPOSIT=7]="DEPOSIT",OffchainFeeReqType[OffchainFeeReqType.AMM_JOIN=8]="AMM_JOIN",OffchainFeeReqType[OffchainFeeReqType.TRANSFER_AND_UPDATE_ACCOUNT=15]="TRANSFER_AND_UPDATE_ACCOUNT",OffchainFeeReqType[OffchainFeeReqType.DEFI_JOIN=21]="DEFI_JOIN",OffchainFeeReqType[OffchainFeeReqType.DEFI_EXIT=22]="DEFI_EXIT",OffchainFeeReqType[OffchainFeeReqType.FORCE_WITHDRAWAL=23]="FORCE_WITHDRAWAL"}(OffchainFeeReqType||(OffchainFeeReqType={}));const KEY_MESSAGE="Sign this message to access Loopring Exchange: ${exchangeAddress} with key nonce: ${nonce}";var MarketStatus;!function(MarketStatus){MarketStatus[MarketStatus.AMM=1]="AMM",MarketStatus[MarketStatus.ORDER_BOOK=2]="ORDER_BOOK",MarketStatus[MarketStatus.ALL=3]="ALL"}(MarketStatus||(MarketStatus={}));var DefiMarketStatus;!function(DefiMarketStatus){DefiMarketStatus[DefiMarketStatus.hide=0]="hide",DefiMarketStatus[DefiMarketStatus.show=1]="show",DefiMarketStatus[DefiMarketStatus.depositOnly=3]="depositOnly",DefiMarketStatus[DefiMarketStatus.depositAll=7]="depositAll",DefiMarketStatus[DefiMarketStatus.withdrawOnly=9]="withdrawOnly",DefiMarketStatus[DefiMarketStatus.depositAllAndWithdraw=15]="depositAllAndWithdraw",DefiMarketStatus[DefiMarketStatus.withdrawAll=25]="withdrawAll",DefiMarketStatus[DefiMarketStatus.WithdrawAllAndDeposit=27]="WithdrawAllAndDeposit",DefiMarketStatus[DefiMarketStatus.depositAndWithdraw=11]="depositAndWithdraw",DefiMarketStatus[DefiMarketStatus.all=31]="all"}(DefiMarketStatus||(DefiMarketStatus={}))},"./lib/resolveChain.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>resolveChain});var viem__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/viem/_esm/utils/chain/defineChain.js"),viem__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/viem/_esm/utils/unit/parseGwei.js"),_NetworkSettings__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./lib/NetworkSettings.ts"),_telegram__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./lib/telegram.ts"),process=__webpack_require__("./node_modules/process/browser.js");function resolveChain(network){var _NetworkSettings_KnownSettings_network_name_DefaultPriorityFee,_NetworkSettings_KnownSettings_network_name,_NetworkSettings_KnownSettings_network_name1;const nativeCurrency=network.token,blockExplorersBaseURL=network.transaction_explorer_template?new URL(network.transaction_explorer_template).origin:null,metadata=network.metadata,{evm_multicall_contract}=metadata||{};if(!nativeCurrency)return void(0,_telegram__WEBPACK_IMPORTED_MODULE_3__.W3)("UI Settings error",`env: ${process.env.NEXT_PUBLIC_VERCEL_ENV} %0A url: ${process.env.NEXT_PUBLIC_VERCEL_URL} %0A message: could not find native currency for ${network.name} ${JSON.stringify(network)} %0A`);const res=(0,viem__WEBPACK_IMPORTED_MODULE_0__.x)({id:Number(network.chain_id),name:network.display_name,nativeCurrency:{name:nativeCurrency.symbol,symbol:nativeCurrency.symbol,decimals:nativeCurrency.decimals},rpcUrls:{default:{http:[network.node_url]},public:{http:[network.node_url]}},...blockExplorersBaseURL?{blockExplorers:{default:{name:"name",url:blockExplorersBaseURL}}}:{},contracts:{...evm_multicall_contract?{multicall3:{address:evm_multicall_contract}}:{}}}),defaultPriorityFee=null===(_NetworkSettings_KnownSettings_network_name=_NetworkSettings__WEBPACK_IMPORTED_MODULE_2__.Ay.KnownSettings[network.name])||void 0===_NetworkSettings_KnownSettings_network_name||null===(_NetworkSettings_KnownSettings_network_name_DefaultPriorityFee=_NetworkSettings_KnownSettings_network_name.DefaultPriorityFee)||void 0===_NetworkSettings_KnownSettings_network_name_DefaultPriorityFee?void 0:_NetworkSettings_KnownSettings_network_name_DefaultPriorityFee.toString();var _NetworkSettings_KnownSettings_network_name_BaseFeeMultiplier;const baseFeeMultiplier=null!==(_NetworkSettings_KnownSettings_network_name_BaseFeeMultiplier=null===(_NetworkSettings_KnownSettings_network_name1=_NetworkSettings__WEBPACK_IMPORTED_MODULE_2__.Ay.KnownSettings[network.name])||void 0===_NetworkSettings_KnownSettings_network_name1?void 0:_NetworkSettings_KnownSettings_network_name1.BaseFeeMultiplier)&&void 0!==_NetworkSettings_KnownSettings_network_name_BaseFeeMultiplier?_NetworkSettings_KnownSettings_network_name_BaseFeeMultiplier:1.2;return defaultPriorityFee&&(res.fees={...res.fees,defaultPriorityFee:()=>(0,viem__WEBPACK_IMPORTED_MODULE_1__._)(defaultPriorityFee)}),baseFeeMultiplier&&(res.fees={...res.fees,baseFeeMultiplier:()=>baseFeeMultiplier}),res}},"./lib/retry.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";async function retryWithExponentialBackoff(fn,maxAttempts=3,baseDelayMs=1e3){let attempt=1;const execute=async()=>{try{return await fn()}catch(error){if(attempt>=maxAttempts)throw error;const delayMs=baseDelayMs*2**attempt;return await new Promise(resolve=>setTimeout(resolve,delayMs)),attempt++,await execute()}};return await execute()}async function retry(fn,maxAttempts=3,baseDelayMs=1e3){let attempt=1;const execute=async()=>{try{return await fn()}catch(error){if(attempt>=maxAttempts)throw error;return await new Promise(resolve=>setTimeout(resolve,baseDelayMs)),attempt++,await execute()}};return await execute()}__webpack_require__.d(__webpack_exports__,{A:()=>retryWithExponentialBackoff,L:()=>retry})},"./lib/wallets/ton/client.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _ton_ton__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@ton/ton/dist/index.js"),process=__webpack_require__("./node_modules/process/browser.js");const __WEBPACK_DEFAULT_EXPORT__=new _ton_ton__WEBPACK_IMPORTED_MODULE_0__.TonClient({endpoint:"https://toncenter.com/api/v2/jsonRPC",apiKey:process.env.NEXT_PUBLIC_TON_API_KEY})},"./stores/balanceStore.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{i7:()=>getKey,BW:()=>useBalanceStore});var esm=__webpack_require__("./node_modules/zustand/esm/index.mjs"),middleware=__webpack_require__("./node_modules/zustand/esm/middleware.mjs"),dist_module=__webpack_require__("./node_modules/posthog-js/dist/module.js"),RoundDecimals=__webpack_require__("./components/utils/RoundDecimals.ts"),knownIds=__webpack_require__("./lib/knownIds.ts"),axios=__webpack_require__("./node_modules/axios/index.js"),axios_default=__webpack_require__.n(axios),BalanceProvider=__webpack_require__("./Models/BalanceProvider.ts");class BitcoinBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>knownIds.A.Networks.BitcoinMainnet.includes(network.name)||knownIds.A.Networks.BitcoinTestnet.includes(network.name),this.fetchBalance=async(address,network)=>{let balances=[];const token=network.tokens.find(t=>"BTC"==t.symbol);if(token){try{var _network_token;const utxos=await async function fetchUtxos(address,networkName){const url=`https://mempool.space${networkName.toLowerCase().includes("testnet")?"/testnet":""}/api/address/${address}/utxo`,utxos=(await axios_default().get(url)).data;return utxos}(address,network.name),balanceSats=function sumUtxos(utxos){return utxos.reduce((sum,u)=>sum+u.value,0)}(utxos),formattedBalance=function formatBtc(sats){return Number((sats/1e8).toFixed(8))}(balanceSats);if(!token)throw new Error(`Token not found for network ${network.name}`);const balanceObj={network:network.name,amount:formattedBalance,decimals:token.decimals,isNativeCurrency:(null===(_network_token=network.token)||void 0===_network_token?void 0:_network_token.symbol)===token.symbol,token:token.symbol,request_time:(new Date).toJSON()};balances.push(balanceObj)}catch(e){balances.push(this.resolveTokenBalanceFetchError(e,token,network,!0))}return balances}}}}var Network=__webpack_require__("./Models/Network.ts"),formatAmount=__webpack_require__("./lib/formatAmount.ts"),createConfig=__webpack_require__("./node_modules/@wagmi/core/dist/esm/createConfig.js"),http=__webpack_require__("./node_modules/viem/_esm/clients/transports/http.js"),abis=__webpack_require__("./node_modules/viem/_esm/constants/abis.js"),multicall=__webpack_require__("./node_modules/@wagmi/core/dist/esm/actions/multicall.js"),getBalance=__webpack_require__("./node_modules/@wagmi/core/dist/esm/actions/getBalance.js"),resolveChain=__webpack_require__("./lib/resolveChain.ts");const BALANCEGETTERABI_namespaceObject=JSON.parse('[{"inputs":[{"internalType":"address[]","name":"users","type":"address[]"},{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"batchGetBalances","outputs":[{"internalType":"bool[][]","name":"allSuccesses","type":"bool[][]"},{"internalType":"uint256[][]","name":"allBalances","type":"uint256[][]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"getBalances","outputs":[{"internalType":"bool[]","name":"_successes","type":"bool[]"},{"internalType":"uint256[]","name":"_balances","type":"uint256[]"}],"stateMutability":"view","type":"function"}]');var console=__webpack_require__("./node_modules/console-browserify/index.js");class EVMBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>network.type===Network.z1.EVM&&!!network.token,this.fetchBalance=async(address,network)=>{if(!network)return;const chain=(0,resolveChain.default)(network);if(!chain)throw new Error("Could not resolve chain");try{return await this.contractGetBalances(address,chain,network)}catch(e){console.log(e)}return await this.getBalances(address,chain,network)},this.getBalances=async(address,chain,network)=>{try{var _network_metadata;const{createPublicClient,http}=await Promise.all([__webpack_require__.e(8996),__webpack_require__.e(8440),__webpack_require__.e(5115)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/viem/_esm/index.js")),publicClient=createPublicClient({chain,transport:http(network.node_url,{retryCount:1,timeout:5e3})});let erc20Balances=[];const erc20Promise=getErc20Balances({address,assets:network.tokens,network,publicClient,hasMulticall:!!(null===(_network_metadata=network.metadata)||void 0===_network_metadata?void 0:_network_metadata.evm_multicall_contract)}),nativeToken=network.token,nativePromise=getTokenBalance(address,network),[erc20BalancesContractRes,nativeBalanceData]=await Promise.all([erc20Promise,nativePromise]);erc20Balances=erc20BalancesContractRes&&this.resolveERC20Balances(erc20BalancesContractRes,network)||[];const nativeBalance=nativeToken&&nativeBalanceData&&this.resolveBalance(network,nativeToken,nativeBalanceData);return[].concat(erc20Balances,nativeBalance?[nativeBalance]:[])}catch(e){return network.tokens.map(t=>this.resolveTokenBalanceFetchError(e,t,network))}},this.contractGetBalances=async(address,chain,network)=>{var _network_tokens,_network_tokens_filter,_balances_,_balances_1,_network_token,_network_token1,_network_token2,_network_token3;if(!network)throw new Error("Network is required for contract get balances");const{createPublicClient,http}=await Promise.all([__webpack_require__.e(8996),__webpack_require__.e(8440),__webpack_require__.e(5115)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/viem/_esm/index.js")),publicClient=createPublicClient({chain,transport:http(network.node_url,{retryCount:1,timeout:5e3})}),contract=contracts.find(c=>c.networks.includes(network.name));if(!contract)throw new Error(`No contract found for network ${network.name}`);const tokenContracts=null===(_network_tokens=network.tokens)||void 0===_network_tokens?void 0:_network_tokens.filter(a=>a.contract).map(a=>a.contract),balances=await publicClient.readContract({address:null==contract?void 0:contract.address,abi:BALANCEGETTERABI_namespaceObject,functionName:"getBalances",args:[address,tokenContracts]}),resolvedERC20Balances=null===(_network_tokens_filter=network.tokens.filter(t=>t.contract))||void 0===_network_tokens_filter?void 0:_network_tokens_filter.map((token,index)=>{const amount=balances[1][index];return amount>=0?{network:network.name,token:token.symbol,amount:(0,formatAmount.A)(amount,token.decimals),request_time:(new Date).toJSON(),decimals:token.decimals,isNativeCurrency:!1}:{network:network.name,token:token.symbol,amount:void 0,request_time:(new Date).toJSON(),decimals:token.decimals,isNativeCurrency:!1,error:`Could not fetch ${token.symbol} balance`}}),nativeTokenBalance=Number(null==balances||null===(_balances_1=balances[1])||void 0===_balances_1?void 0:_balances_1[(null==balances||null===(_balances_=balances[1])||void 0===_balances_?void 0:_balances_.length)-1]);return[...resolvedERC20Balances,(null===(_network_token=network.token)||void 0===_network_token?void 0:_network_token.decimals)?{network:network.name,token:null===(_network_token1=network.token)||void 0===_network_token1?void 0:_network_token1.symbol,amount:nativeTokenBalance>=0?(0,formatAmount.A)(nativeTokenBalance,null===(_network_token2=network.token)||void 0===_network_token2?void 0:_network_token2.decimals):void 0,request_time:(new Date).toJSON(),decimals:null===(_network_token3=network.token)||void 0===_network_token3?void 0:_network_token3.decimals,isNativeCurrency:!0,error:void 0===nativeTokenBalance?"Could not fetch native token balance":void 0}:void 0].filter(b=>void 0!==b)},this.resolveERC20Balances=(multicallRes,network)=>{var _network_tokens;const assets=null==network||null===(_network_tokens=network.tokens)||void 0===_network_tokens?void 0:_network_tokens.filter(a=>a.contract);if(!assets)return null;return null==multicallRes?void 0:multicallRes.map((d,index)=>{const currency=assets[index];return d.error?this.resolveTokenBalanceFetchError(d.error,currency,network):{network:network.name,token:currency.symbol,amount:(0,formatAmount.A)(d.result,currency.decimals),request_time:(new Date).toJSON(),decimals:currency.decimals,isNativeCurrency:!1}})},this.resolveBalance=(network,token,balanceData)=>{if(null!==balanceData.error)return this.resolveTokenBalanceFetchError({message:balanceData.error},token,network);return{network:network.name,token:token.symbol,amount:(0,formatAmount.A)(null==balanceData?void 0:balanceData.value,token.decimals),request_time:(new Date).toJSON(),decimals:token.decimals,isNativeCurrency:!0}}}}const getErc20Balances=async({address,network,assets,publicClient,hasMulticall=!1})=>{const contracts=null==assets?void 0:assets.filter(a=>a.contract).map(a=>({address:null==a?void 0:a.contract,abi:abis.xw,functionName:"balanceOf",args:[address]}));try{if(hasMulticall){const chain=(0,resolveChain.default)(network);if(!chain)throw new Error("Could not resolve chain");const config=(0,createConfig.Z)({chains:[chain],transports:{[chain.id]:(0,http.L)(network.node_url,{retryCount:1,timeout:5e3})}});return await(0,multicall.C)(config,{chainId:chain.id,contracts})}{const balances=[];for(let i=0;i<contracts.length;i++)try{const contract=contracts[i],balance=await publicClient.readContract({address:null==contract?void 0:contract.address,abi:abis.xw,functionName:"balanceOf",args:[address]});balances.push({status:"success",result:balance,error:void 0})}catch(e){balances.push({status:"failure",result:null,error:null==e?void 0:e.message})}return balances}}catch(e){return null}},getTokenBalance=async(address,network,contract)=>{try{const chain=(0,resolveChain.default)(network);if(!chain)throw new Error("Could not resolve chain");const config=(0,createConfig.Z)({chains:[chain],transports:{[chain.id]:(0,http.L)(network.node_url,{retryCount:1,timeout:5e3})}});return{error:null,...await(0,getBalance.r)(config,{address,chainId:chain.id,...contract?{token:contract}:{}})}}catch(e){return{error:e}}},contracts=[{address:"0xb65a146b7C2D5BEec6EE8a5F38C467b5A88b26Dc",networks:[knownIds.A.Networks.EthereumMainnet,knownIds.A.Networks.BaseMainnet,knownIds.A.Networks.RariMainnet,knownIds.A.Networks.ScrollMainnet,knownIds.A.Networks.LineaMainnet,knownIds.A.Networks.LightlinkMainnet,knownIds.A.Networks.NahmiiMainnet,knownIds.A.Networks.ZetachainMainnet,knownIds.A.Networks.AvaxMainnet,knownIds.A.Networks.ZksyncEraMainnet,knownIds.A.Networks.XaiMainnet,knownIds.A.Networks.RedStoneMainnet,knownIds.A.Networks.UnichainMainnet,knownIds.A.Networks.SoneiumMainnet,knownIds.A.Networks.ArbitrumNova,knownIds.A.Networks.MantleMainnet,knownIds.A.Networks.PolygonZkMainnet,knownIds.A.Networks.ZoraMainnet,knownIds.A.Networks.FraxtalMainnet,knownIds.A.Networks.ModMainnet,knownIds.A.Networks.WorldchainMainnet,knownIds.A.Networks.MantaMainnet,knownIds.A.Networks.AbstractMainnet,knownIds.A.Networks.BlastMainnet,knownIds.A.Networks.CeloMainnet,knownIds.A.Networks.KromaMainnet,knownIds.A.Networks.ShapeMainnet,knownIds.A.Networks.GnosisMainnet,knownIds.A.Networks.TaikoMainnet,knownIds.A.Networks.OKCMainnet,knownIds.A.Networks.BNBChainMainnet,knownIds.A.Networks.PolygonMainnet,knownIds.A.Networks.RoninMainnet,knownIds.A.Networks.InkMainnet,knownIds.A.Networks.MintMainnet,knownIds.A.Networks.Ancient8Mainnet,knownIds.A.Networks.BobMainnet,knownIds.A.Networks.FuseMainnet,knownIds.A.Networks.SonicMainnet,knownIds.A.Networks.ImmutableZkEVM,knownIds.A.Networks.OptimismMainnet,knownIds.A.Networks.RolluxMainnet,knownIds.A.Networks.ZeroMainnet,knownIds.A.Networks.ZircuitMainnet,knownIds.A.Networks.OpBNBMainnet,knownIds.A.Networks.SuperseedMainnet,knownIds.A.Networks.LiskMainnet,knownIds.A.Networks.MorphMainnet,knownIds.A.Networks.SeiMainnet,knownIds.A.Networks.GravityMainnet]},{address:"0xf3C74887D68Cd6d6c64Fb9ab24ca6812182eED44",networks:[knownIds.A.Networks.ArbitrumMainnet]},{address:"0x1930cC92B9dCBBE2E8FA0E05c858A88EE39C41E6",networks:[knownIds.A.Networks.SophonMainnet]}];var retry=__webpack_require__("./lib/retry.ts");class FuelBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>knownIds.A.Networks.FuelMainnet.includes(network.name)||knownIds.A.Networks.FuelTestnet.includes(network.name),this.fetchBalance=async(address,network)=>{let balances=[];if(!(null==network?void 0:network.tokens))return;const BALANCES_ARGS={filter:{owner:address}};try{const response=await(0,retry.A)(async()=>await fetch(network.node_url,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({query:"query Balances($filter: BalanceFilterInput) {\n            balances(filter: $filter, first: 5) {\n              nodes {\n                amount\n                assetId\n              }\n            }\n          }",variables:BALANCES_ARGS})})),json=await response.json();for(let i=0;i<network.tokens.length;i++){var _network_token;const token=network.tokens[i],balance=json.data.balances.nodes.find(b=>(null==b?void 0:b.assetId)===token.contract)||null,balanceObj={network:network.name,amount:(null==balance?void 0:balance.amount)?(0,formatAmount.A)(Number(null==balance?void 0:balance.amount),token.decimals):void 0,decimals:token.decimals,isNativeCurrency:(null===(_network_token=network.token)||void 0===_network_token?void 0:_network_token.symbol)===token.symbol,token:token.symbol,request_time:(new Date).toJSON(),error:void 0===(null==balance?void 0:balance.amount)?`Could not fetch balance for ${token.symbol}`:void 0};balances.push(balanceObj)}}catch(e){return network.tokens.map(currency=>this.resolveTokenBalanceFetchError(e,currency,network))}return balances}}}var helpers=__webpack_require__("./lib/balances/helpers.ts");class ImmutableXBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>knownIds.A.Networks.ImmutableXMainnet.includes(network.name)||knownIds.A.Networks.ImmutableXGoerli.includes(network.name),this.fetchBalance=async(address,network)=>{const axios=(await Promise.resolve().then(__webpack_require__.t.bind(__webpack_require__,"./node_modules/axios/index.js",23))).default;if((null==network?void 0:network.tokens)||network.token)try{const res=await axios.get(`${null==network?void 0:network.node_url}/v2/balances/${address}`).then(r=>r.data),tokens=(0,helpers.S)(network.tokens||[],network.token);return null==tokens?void 0:tokens.map(asset=>{const balance=res.result.find(r=>r.symbol===asset.symbol);return{network:network.name,amount:(null==balance?void 0:balance.balance)?(0,formatAmount.A)(null==balance?void 0:balance.balance,asset.decimals):0,decimals:asset.decimals,isNativeCurrency:!1,token:asset.symbol,request_time:(new Date).toJSON()}})}catch(e){return network.tokens.map(currency=>this.resolveTokenBalanceFetchError(e,currency,network))}}}}var defs=__webpack_require__("./lib/loopring/defs.ts"),LoopringAPI=__webpack_require__("./lib/loopring/LoopringAPI.ts");class LoopringBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>knownIds.A.Networks.LoopringMainnet.includes(network.name)||knownIds.A.Networks.LoopringGoerli.includes(network.name),this.fetchBalance=async(address,network)=>{let balances=[];if(null==network?void 0:network.tokens){try{const accInfo=(await axios_default().get(`${LoopringAPI.x.BaseApi}${defs.kF.ACCOUNT_ACTION}?owner=${address}`)).data,tokens=(0,helpers.S)(network.tokens||[],network.token),tokensString=null==tokens?void 0:tokens.map(obj=>obj.contract).join(","),result=await axios_default().get(`${LoopringAPI.x.BaseApi}${defs.kF.GET_USER_EXCHANGE_BALANCES}?accountId=${accInfo.accountId}&tokens=${tokensString}`);balances=[...null==tokens?void 0:tokens.map(asset=>{var _result_data_find;const amount=null===(_result_data_find=result.data.find(d=>d.tokenId==Number(asset.contract)))||void 0===_result_data_find?void 0:_result_data_find.total;return{network:network.name,token:null==asset?void 0:asset.symbol,amount:amount?(0,formatAmount.A)(amount,Number(null==asset?void 0:asset.decimals)):result.data?0:void 0,request_time:(new Date).toJSON(),decimals:Number(null==asset?void 0:asset.decimals),isNativeCurrency:!1,error:void 0!==amount||result.data?void 0:`Could not fetch balance for ${asset.symbol}`}})]}catch(e){balances=network.tokens.map(currency=>this.resolveTokenBalanceFetchError(e,currency,network))}return balances}}}}var lib=__webpack_require__("./lib/wallets/paradex/lib/index.ts");class ParadexBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>knownIds.A.Networks.ParadexMainnet.includes(network.name)||knownIds.A.Networks.ParadexTestnet.includes(network.name),this.fetchBalance=async(address,network)=>{const config=await lib.TS.fetchConfig("testnet"),tokens=(0,helpers.S)(network.tokens||[],network.token),paraclearProvider=new lib.jx.DefaultProvider(config),balances=[];for(const token of tokens)try{const getBalanceResult=await lib.cF.getTokenBalance({provider:paraclearProvider,config,account:{address},token:token.symbol}),balance={network:network.name,token:token.symbol,amount:Number(getBalanceResult.size),request_time:(new Date).toJSON(),decimals:Number(null==token?void 0:token.decimals),isNativeCurrency:!1};balances.push(balance)}catch(e){balances.push(this.resolveTokenBalanceFetchError(e,token,network))}return balances}}}class QueryBalanceProvider extends BalanceProvider.w{getQueryParams(){if("undefined"==typeof location)return{from:null,to:null,balances:null,fromAsset:null};const urlParams=new URLSearchParams(location.search);return{from:urlParams.get("from"),to:urlParams.get("to"),balances:urlParams.get("balances"),fromAsset:urlParams.get("fromAsset")}}constructor(){super(),this.supportsNetwork=network=>{var _network_name,_this_query_from,_network_name1,_this_query_to;return!!this.query.balances&&((null==network||null===(_network_name=network.name)||void 0===_network_name?void 0:_network_name.toLocaleLowerCase())===(null===(_this_query_from=this.query.from)||void 0===_this_query_from?void 0:_this_query_from.toLowerCase())||(null==network||null===(_network_name1=network.name)||void 0===_network_name1?void 0:_network_name1.toLocaleLowerCase())===(null===(_this_query_to=this.query.to)||void 0===_this_query_to?void 0:_this_query_to.toLowerCase()))},this.fetchBalance=async(address,network)=>{var _network_token;if(!network)return null;const tokens=(0,helpers.S)(network.tokens||[],network.token),asset=null==tokens?void 0:tokens.find(a=>a.symbol===this.query.fromAsset),balancesFromQueries=this.query.balances?JSON.parse(this.query.balances):null;return balancesFromQueries&&asset?[{network:network.name,amount:(0,formatAmount.A)(balancesFromQueries[asset.symbol],asset.decimals),decimals:asset.decimals,isNativeCurrency:(null===(_network_token=network.token)||void 0===_network_token?void 0:_network_token.symbol)===asset.symbol,token:asset.symbol,request_time:(new Date).toJSON()}]:null},this.query=this.getQueryParams()}}class SolanaBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>network.type===Network.z1.Solana,this.fetchBalance=async(address,network)=>{if(!address)return;const tokens=(0,helpers.S)(network.tokens||[],network.token),SolanaWeb3=await Promise.resolve().then(__webpack_require__.bind(__webpack_require__,"./node_modules/@solana/web3.js/lib/index.browser.esm.js")),{PublicKey,Connection}=SolanaWeb3;const{getAssociatedTokenAddress}=await __webpack_require__.e(9845).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@solana/spl-token/lib/esm/index.js")),walletPublicKey=new PublicKey(address);let balances=[];if(!(null==network?void 0:network.tokens)||!walletPublicKey)return;const connection=new class SolanaConnection extends Connection{}(`${network.node_url}`,"confirmed");async function getTokenBalanceWeb3(connection,tokenAccount){try{var _info_value;const info=await connection.getTokenAccountBalance(tokenAccount);return null==info||null===(_info_value=info.value)||void 0===_info_value?void 0:_info_value.uiAmount}catch(error){if(error.message&&error.message.includes("could not find account"))return 0;throw error}}for(const token of tokens)try{let result=null;if(token.contract){const sourceToken=new PublicKey(null==token?void 0:token.contract),associatedTokenFrom=await getAssociatedTokenAddress(sourceToken,walletPublicKey);if(!associatedTokenFrom)return;result=await getTokenBalanceWeb3(connection,associatedTokenFrom)}else{const res=await connection.getBalance(walletPublicKey);res&&(result=(0,formatAmount.A)(Number(res),token.decimals))}if(null!=result&&!isNaN(result)){const balance={network:network.name,token:token.symbol,amount:result,request_time:(new Date).toJSON(),decimals:Number(null==token?void 0:token.decimals),isNativeCurrency:!1};balances.push(balance)}}catch(e){balances.push(this.resolveTokenBalanceFetchError(e,token,network))}return balances}}}const ERC20_namespaceObject=JSON.parse('[{"members":[{"name":"low","offset":0,"type":"felt"},{"name":"high","offset":1,"type":"felt"}],"name":"Uint256","size":2,"type":"struct"},{"inputs":[{"name":"name","type":"felt"},{"name":"symbol","type":"felt"},{"name":"recipient","type":"felt"}],"name":"constructor","outputs":[],"type":"constructor"},{"inputs":[],"name":"name","outputs":[{"name":"name","type":"felt"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"name":"symbol","type":"felt"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"name":"totalSupply","type":"Uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"name":"decimals","type":"felt"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"account","type":"felt"}],"name":"balanceOf","outputs":[{"name":"balance","type":"Uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"owner","type":"felt"},{"name":"spender","type":"felt"}],"name":"allowance","outputs":[{"name":"remaining","type":"Uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"recipient","type":"felt"},{"name":"amount","type":"Uint256"}],"name":"transfer","outputs":[{"name":"success","type":"felt"}],"type":"function"},{"inputs":[{"name":"sender","type":"felt"},{"name":"recipient","type":"felt"},{"name":"amount","type":"Uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"felt"}],"type":"function"},{"inputs":[{"name":"spender","type":"felt"},{"name":"amount","type":"Uint256"}],"name":"approve","outputs":[{"name":"success","type":"felt"}],"type":"function"},{"inputs":[{"name":"spender","type":"felt"},{"name":"added_value","type":"Uint256"}],"name":"increaseAllowance","outputs":[{"name":"success","type":"felt"}],"type":"function"},{"inputs":[{"name":"spender","type":"felt"},{"name":"subtracted_value","type":"Uint256"}],"name":"decreaseAllowance","outputs":[{"name":"success","type":"felt"}],"type":"function"},{"inputs":[{"name":"recipient","type":"felt"},{"name":"amount","type":"Uint256"}],"name":"mint","outputs":[],"type":"function"},{"inputs":[{"name":"user","type":"felt"},{"name":"amount","type":"Uint256"}],"name":"burn","outputs":[],"type":"function"}]');class StarknetBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>knownIds.A.Networks.StarkNetMainnet.includes(network.name)||knownIds.A.Networks.StarkNetGoerli.includes(network.name)||knownIds.A.Networks.StarkNetSepolia.includes(network.name),this.fetchBalance=async(address,network)=>{const{Contract,RpcProvider,uint256}=await Promise.resolve().then(__webpack_require__.bind(__webpack_require__,"./node_modules/starknet/dist/index.mjs")),{BigNumber}=await Promise.all([__webpack_require__.e(6415),__webpack_require__.e(9966)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/ethers/lib.esm/index.js"));let balances=[];if(!(null==network?void 0:network.tokens))return;const provider=new RpcProvider({nodeUrl:network.node_url}),tokens=(0,helpers.S)(network.tokens||[],network.token);for(const token of tokens)try{const erc20=new Contract(ERC20_namespaceObject,token.contract,provider),balanceResult=await erc20.balanceOf(address),balanceInWei=BigNumber.from(uint256.uint256ToBN(balanceResult.balance).toString()).toString(),balance={network:network.name,token:token.symbol,amount:(0,formatAmount.A)(balanceInWei,token.decimals),request_time:(new Date).toJSON(),decimals:token.decimals,isNativeCurrency:!1};balances.push(balance)}catch(e){balances.push(this.resolveTokenBalanceFetchError(e,token,network))}return balances}}}var client=__webpack_require__("./lib/wallets/ton/client.ts");class TonBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>knownIds.A.Networks.TONMainnet.includes(network.name),this.fetchBalance=async(address,network)=>{let balances=[];const tokens=(0,helpers.S)(network.tokens||[],network.token);for(const token of tokens)try{const balance=await resolveBalance({network,address,token});balances.push(balance)}catch(e){balances.push(this.resolveTokenBalanceFetchError(e,token,network))}return balances}}}const resolveBalance=async({address,network,token})=>{if(token.contract){return await getJettonBalance({network,token,address})}return await getNativeAssetBalance({network,token,address})},getNativeAssetBalance=async({network,token,address})=>{const{Address}=await Promise.resolve().then(__webpack_require__.t.bind(__webpack_require__,"./node_modules/@ton/ton/dist/index.js",23)),tonBalance=await(0,retry.A)(async()=>await client.A.getBalance(Address.parse(address)));return{network:network.name,token:token.symbol,amount:(0,formatAmount.A)(tonBalance.toString(),Number(null==token?void 0:token.decimals)),request_time:(new Date).toJSON(),decimals:Number(null==token?void 0:token.decimals),isNativeCurrency:!0}},getJettonBalance=async({network,token,address})=>{const{JettonMaster,JettonWallet,Address}=await Promise.resolve().then(__webpack_require__.t.bind(__webpack_require__,"./node_modules/@ton/ton/dist/index.js",23)),jettonMasterAddress=Address.parse(token.contract),userAddress=Address.parse(address),jettonMaster=client.A.open(JettonMaster.create(jettonMasterAddress)),jettonAddress=await(0,retry.A)(async()=>await jettonMaster.getWalletAddress(userAddress));await new Promise(resolve=>setTimeout(resolve,1e3));const jettonWallet=JettonWallet.create(jettonAddress),jettonBalance=await(0,retry.A)(async()=>await jettonWallet.getBalance(client.A.provider(jettonAddress)));return{network:network.name,token:token.symbol,amount:(0,formatAmount.A)(Number(BigInt(jettonBalance)),token.decimals),request_time:(new Date).toJSON(),decimals:token.decimals,isNativeCurrency:!1}};var lib_esm=__webpack_require__("./node_modules/tronweb/lib/esm/index.js");class TronBalanceProvider extends BalanceProvider.w{constructor(...args){super(...args),this.supportsNetwork=network=>knownIds.A.Networks.TronMainnet.includes(network.name),this.fetchBalance=async(address,network)=>{let balances=[];const provider=new lib_esm.TronWeb({fullNode:network.node_url,solidityNode:network.node_url,privateKey:"01"}),tokens=(0,helpers.S)(network.tokens,network.token);for(const token of tokens)try{const balance=await tronBalanceProvider_resolveBalance({network,address,token,provider});balances.push(balance)}catch(e){balances.push(this.resolveTokenBalanceFetchError(e,token,network))}return balances}}}const tronBalanceProvider_resolveBalance=async({address,network,token,provider})=>{if(token.contract){return await getTRC20Balance({network,token,address,provider})}return await tronBalanceProvider_getNativeAssetBalance({network,token,address,provider})},tronBalanceProvider_getNativeAssetBalance=async({network,token,address,provider})=>{const balance=await provider.trx.getBalance(address);return{network:network.name,token:token.symbol,amount:(0,formatAmount.A)(balance.toString(),Number(null==token?void 0:token.decimals)),request_time:(new Date).toJSON(),decimals:Number(null==token?void 0:token.decimals),isNativeCurrency:!0}},getTRC20Balance=async({network,token,address,provider})=>{if(!token.contract)throw new Error("Token contract address is missing");const tokenContractAddress=token.contract,contract=await provider.contract().at(tokenContractAddress),balanceResponse=await contract.methods.balanceOf(address).call();return{network:network.name,token:token.symbol,amount:(0,formatAmount.A)(BigInt(balanceResponse),token.decimals),request_time:(new Date).toJSON(),decimals:token.decimals,isNativeCurrency:!1}};var zkSyncBalanceProvider=__webpack_require__("./lib/balances/providers/zkSyncBalanceProvider.ts");class HyperliquidClient{async getClearinghouseState(user,nodeUrl){const response=await fetch(`${nodeUrl}/info`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"clearinghouseState",user})});if(!response.ok)throw new Error(`HTTP error! status: ${response.status}`);return response.json()}}class HyperliquidBalanceProvider extends BalanceProvider.w{constructor(){super(),this.supportsNetwork=network=>network.name===knownIds.A.Networks.HyperliquidMainnet||network.name===knownIds.A.Networks.HyperliquidTestnet,this.fetchBalance=async(address,network)=>{if((null==network?void 0:network.tokens)||network.token)try{var nodeUrl=network.node_url;null==nodeUrl&&(nodeUrl=network.name==knownIds.A.Networks.HyperliquidMainnet?"https://api.hyperliquid.xyz":"https://api.hyperliquid-testnet.xyz");const clearinghouseState=await this.client.getClearinghouseState(address,nodeUrl),balances=[],usdcToken=network.tokens.find(token=>"USDC"===token.symbol);if(usdcToken){const withdrawableAmount=parseFloat(clearinghouseState.withdrawable);withdrawableAmount>0&&balances.push({network:network.name,amount:withdrawableAmount,decimals:usdcToken.decimals,isNativeCurrency:!1,token:usdcToken.symbol,request_time:(new Date).toJSON()})}return balances}catch(error){return network.tokens.map(t=>this.resolveTokenBalanceFetchError(error,t,network))}},this.client=new HyperliquidClient}}function getKey(address,networkOrName){return`${address}:${"string"==typeof networkOrName?networkOrName:networkOrName.name}`}const balanceFetcher=new class BalanceResolver{async getBalance(network,address){try{if(!address)throw new Error(`No address provided for network ${network.name}`);const provider=this.providers.find(p=>p.supportsNetwork(network));if(!provider)throw new Error(`No balance provider found for network ${network.name}`);const balances=await provider.fetchBalance(address,network),totalInUSD=null==balances?void 0:balances.reduce((acc,b)=>{const token=network.tokens.find(t=>(null==t?void 0:t.symbol)===(null==b?void 0:b.token)),tokenPriceInUsd=(null==token?void 0:token.price_in_usd)||0,tokenPrecision=(null==token?void 0:token.precision)||0;return acc+(b.amount?Number((0,RoundDecimals.xz)(null==b?void 0:b.amount,tokenPrecision)):0)*tokenPriceInUsd},0);return{balances,totalInUSD}}catch(e){const error=new Error(e);return error.name="BalanceError",error.cause=e,dist_module.Ay.capture("$exception",{name:error.name,message:error.message,stack:error.stack,cause:error.cause,where:"BalanceProviderError",severity:"error"}),{balances:[],totalInUSD:0}}}constructor(){this.providers=[new QueryBalanceProvider,new StarknetBalanceProvider,new EVMBalanceProvider,new FuelBalanceProvider,new ImmutableXBalanceProvider,new LoopringBalanceProvider,new SolanaBalanceProvider,new TonBalanceProvider,new zkSyncBalanceProvider.i,new TronBalanceProvider,new ParadexBalanceProvider,new BitcoinBalanceProvider,new HyperliquidBalanceProvider]}};let activeCount=0;const queue=[];function processQueue(){for(;activeCount<500&&queue.length>0;){const job=queue.shift();activeCount++,job()}}const useBalanceStore=(0,esm.vt)()((0,middleware.eh)((set,get,api)=>({balances:{},lastFetchMap:{},initiatedBalances:null,isLoading:!1,fetchBalance:(address,network,options)=>{const key=getKey(address,network),entry=get().balances[key];var _options_dedupeInterval;const dedupeInterval=null!==(_options_dedupeInterval=null==options?void 0:options.dedupeInterval)&&void 0!==_options_dedupeInterval?_options_dedupeInterval:12e4,now=Date.now();var _get_lastFetchMap_key;const last=null!==(_get_lastFetchMap_key=get().lastFetchMap[key])&&void 0!==_get_lastFetchMap_key?_get_lastFetchMap_key:0;if(null==entry?void 0:entry.promise)return entry.promise;if(!(null==options?void 0:options.ignoreCache)&&entry&&now-last<dedupeInterval)return Promise.resolve(entry.data);const queuedPromise=new Promise((resolve,reject)=>{queue.push(()=>{balanceFetcher.getBalance(network,address).then(data=>{set(state=>({balances:{...state.balances,[key]:{data,status:"success"}},lastFetchMap:{...state.lastFetchMap,[key]:Date.now()}})),resolve(data)}).catch(error=>{set(state=>({balances:{...state.balances,[key]:{...state.balances[key],error,status:"error"}},lastFetchMap:{...state.lastFetchMap,[key]:Date.now()}})),reject(error)}).finally(()=>{activeCount--,processQueue()})}),processQueue()});return set(state=>({balances:{...state.balances,[key]:{...state.balances[key],status:"loading",promise:queuedPromise}}})),queuedPromise},initAllBalances:pairs=>{pairs.length>0&&set({isLoading:!0}),set({initiatedBalances:null}),pairs.forEach(({address,network})=>{get().fetchBalance(address,network,{dedupeInterval:12e4,ignoreCache:!0})});const unsub=api.subscribe(state=>state.balances,balances=>{if(pairs.every(({address,network})=>{var _balances_getKey;return"loading"!==(null===(_balances_getKey=balances[getKey(address,network)])||void 0===_balances_getKey?void 0:_balances_getKey.status)})){const finalMap=pairs.reduce((acc,{address,network})=>{const key=getKey(address,network);return balances[key]&&(acc[network.name]=key),acc},{});set({initiatedBalances:finalMap}),set({isLoading:!1}),unsub()}})},getResolvedInitiatedBalances:()=>{const keys=get().initiatedBalances;if(!keys)return null;const balances=get().balances;return Object.entries(keys).reduce((acc,[networkName,key])=>{const entry=balances[key];return(null==entry?void 0:entry.data)&&(acc[networkName]=entry.data),acc},{})}})))},"?9157":()=>{}}]);