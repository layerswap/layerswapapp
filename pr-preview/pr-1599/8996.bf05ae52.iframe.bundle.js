/*! For license information please see 8996.bf05ae52.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunklayerswap=self.webpackChunklayerswap||[]).push([[8996],{"./node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{secp256k1:()=>secp256k1});var sha2=__webpack_require__("./node_modules/@noble/hashes/esm/sha2.js"),hmac=__webpack_require__("./node_modules/@noble/hashes/esm/hmac.js"),utils=__webpack_require__("./node_modules/@noble/hashes/esm/utils.js");const _0n=BigInt(0),_1n=BigInt(1);function isBytes(a){return a instanceof Uint8Array||ArrayBuffer.isView(a)&&"Uint8Array"===a.constructor.name}function abytes(item){if(!isBytes(item))throw new Error("Uint8Array expected")}function abool(title,value){if("boolean"!=typeof value)throw new Error(title+" boolean expected, got "+value)}function numberToHexUnpadded(num){const hex=num.toString(16);return 1&hex.length?"0"+hex:hex}function hexToNumber(hex){if("string"!=typeof hex)throw new Error("hex string expected, got "+typeof hex);return""===hex?_0n:BigInt("0x"+hex)}const hasHexBuiltin="function"==typeof Uint8Array.from([]).toHex&&"function"==typeof Uint8Array.fromHex,hexes=Array.from({length:256},(_,i)=>i.toString(16).padStart(2,"0"));function bytesToHex(bytes){if(abytes(bytes),hasHexBuiltin)return bytes.toHex();let hex="";for(let i=0;i<bytes.length;i++)hex+=hexes[bytes[i]];return hex}const asciis__0=48,asciis__9=57,asciis_A=65,asciis_F=70,asciis_a=97,asciis_f=102;function asciiToBase16(ch){return ch>=asciis__0&&ch<=asciis__9?ch-asciis__0:ch>=asciis_A&&ch<=asciis_F?ch-(asciis_A-10):ch>=asciis_a&&ch<=asciis_f?ch-(asciis_a-10):void 0}function hexToBytes(hex){if("string"!=typeof hex)throw new Error("hex string expected, got "+typeof hex);if(hasHexBuiltin)return Uint8Array.fromHex(hex);const hl=hex.length,al=hl/2;if(hl%2)throw new Error("hex string expected, got unpadded hex of length "+hl);const array=new Uint8Array(al);for(let ai=0,hi=0;ai<al;ai++,hi+=2){const n1=asciiToBase16(hex.charCodeAt(hi)),n2=asciiToBase16(hex.charCodeAt(hi+1));if(void 0===n1||void 0===n2){const char=hex[hi]+hex[hi+1];throw new Error('hex string expected, got non-hex character "'+char+'" at index '+hi)}array[ai]=16*n1+n2}return array}function utils_bytesToNumberBE(bytes){return hexToNumber(bytesToHex(bytes))}function utils_bytesToNumberLE(bytes){return abytes(bytes),hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()))}function utils_numberToBytesBE(n,len){return hexToBytes(n.toString(16).padStart(2*len,"0"))}function numberToBytesLE(n,len){return utils_numberToBytesBE(n,len).reverse()}function utils_ensureBytes(title,hex,expectedLength){let res;if("string"==typeof hex)try{res=hexToBytes(hex)}catch(e){throw new Error(title+" must be hex string or Uint8Array, cause: "+e)}else{if(!isBytes(hex))throw new Error(title+" must be hex string or Uint8Array");res=Uint8Array.from(hex)}const len=res.length;if("number"==typeof expectedLength&&len!==expectedLength)throw new Error(title+" of length "+expectedLength+" expected, got "+len);return res}function utils_concatBytes(...arrays){let sum=0;for(let i=0;i<arrays.length;i++){const a=arrays[i];abytes(a),sum+=a.length}const res=new Uint8Array(sum);for(let i=0,pad=0;i<arrays.length;i++){const a=arrays[i];res.set(a,pad),pad+=a.length}return res}const isPosBig=n=>"bigint"==typeof n&&_0n<=n;function utils_inRange(n,min,max){return isPosBig(n)&&isPosBig(min)&&isPosBig(max)&&min<=n&&n<max}function utils_aInRange(title,n,min,max){if(!utils_inRange(n,min,max))throw new Error("expected valid "+title+": "+min+" <= n < "+max+", got "+n)}const utils_bitMask=n=>(_1n<<BigInt(n))-_1n,u8n=len=>new Uint8Array(len),u8fr=arr=>Uint8Array.from(arr);const validatorFns={bigint:val=>"bigint"==typeof val,function:val=>"function"==typeof val,boolean:val=>"boolean"==typeof val,string:val=>"string"==typeof val,stringOrUint8Array:val=>"string"==typeof val||isBytes(val),isSafeInteger:val=>Number.isSafeInteger(val),array:val=>Array.isArray(val),field:(val,object)=>object.Fp.isValid(val),hash:val=>"function"==typeof val&&Number.isSafeInteger(val.outputLen)};function validateObject(object,validators,optValidators={}){const checkField=(fieldName,type,isOptional)=>{const checkVal=validatorFns[type];if("function"!=typeof checkVal)throw new Error("invalid validator function");const val=object[fieldName];if(!(isOptional&&void 0===val||checkVal(val,object)))throw new Error("param "+String(fieldName)+" is invalid. Expected "+type+", got "+val)};for(const[fieldName,type]of Object.entries(validators))checkField(fieldName,type,!1);for(const[fieldName,type]of Object.entries(optValidators))checkField(fieldName,type,!0);return object}function memoized(fn){const map=new WeakMap;return(arg,...args)=>{const val=map.get(arg);if(void 0!==val)return val;const computed=fn(arg,...args);return map.set(arg,computed),computed}}const modular_0n=BigInt(0),modular_1n=BigInt(1),_2n=BigInt(2),_3n=BigInt(3),_4n=BigInt(4),_5n=BigInt(5),_8n=BigInt(8);function modular_mod(a,b){const result=a%b;return result>=modular_0n?result:b+result}function pow2(x,power,modulo){let res=x;for(;power-- >modular_0n;)res*=res,res%=modulo;return res}function invert(number,modulo){if(number===modular_0n)throw new Error("invert: expected non-zero number");if(modulo<=modular_0n)throw new Error("invert: expected positive modulus, got "+modulo);let a=modular_mod(number,modulo),b=modulo,x=modular_0n,y=modular_1n,u=modular_1n,v=modular_0n;for(;a!==modular_0n;){const q=b/a,r=b%a,m=x-u*q,n=y-v*q;b=a,a=r,x=u,y=v,u=m,v=n}if(b!==modular_1n)throw new Error("invert: does not exist");return modular_mod(x,modulo)}function sqrt3mod4(Fp,n){const p1div4=(Fp.ORDER+modular_1n)/_4n,root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}function sqrt5mod8(Fp,n){const p5div8=(Fp.ORDER-_5n)/_8n,n2=Fp.mul(n,_2n),v=Fp.pow(n2,p5div8),nv=Fp.mul(n,v),i=Fp.mul(Fp.mul(nv,_2n),v),root=Fp.mul(nv,Fp.sub(i,Fp.ONE));if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}function FpSqrt(P){return P%_4n===_3n?sqrt3mod4:P%_8n===_5n?sqrt5mod8:function tonelliShanks(P){if(P<BigInt(3))throw new Error("sqrt is not defined for small field");let Q=P-modular_1n,S=0;for(;Q%_2n===modular_0n;)Q/=_2n,S++;let Z=_2n;const _Fp=Field(P);for(;1===FpLegendre(_Fp,Z);)if(Z++>1e3)throw new Error("Cannot find square root: probably non-prime P");if(1===S)return sqrt3mod4;let cc=_Fp.pow(Z,Q);const Q1div2=(Q+modular_1n)/_2n;return function tonelliSlow(Fp,n){if(Fp.is0(n))return n;if(1!==FpLegendre(Fp,n))throw new Error("Cannot find square root");let M=S,c=Fp.mul(Fp.ONE,cc),t=Fp.pow(n,Q),R=Fp.pow(n,Q1div2);for(;!Fp.eql(t,Fp.ONE);){if(Fp.is0(t))return Fp.ZERO;let i=1,t_tmp=Fp.sqr(t);for(;!Fp.eql(t_tmp,Fp.ONE);)if(i++,t_tmp=Fp.sqr(t_tmp),i===M)throw new Error("Cannot find square root");const exponent=modular_1n<<BigInt(M-i-1),b=Fp.pow(c,exponent);M=i,c=Fp.sqr(b),t=Fp.mul(t,c),R=Fp.mul(R,b)}return R}}(P)}const FIELD_FIELDS=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function FpPow(Fp,num,power){if(power<modular_0n)throw new Error("invalid exponent, negatives unsupported");if(power===modular_0n)return Fp.ONE;if(power===modular_1n)return num;let p=Fp.ONE,d=num;for(;power>modular_0n;)power&modular_1n&&(p=Fp.mul(p,d)),d=Fp.sqr(d),power>>=modular_1n;return p}function modular_FpInvertBatch(Fp,nums,passZero=!1){const inverted=new Array(nums.length).fill(passZero?Fp.ZERO:void 0),multipliedAcc=nums.reduce((acc,num,i)=>Fp.is0(num)?acc:(inverted[i]=acc,Fp.mul(acc,num)),Fp.ONE),invertedAcc=Fp.inv(multipliedAcc);return nums.reduceRight((acc,num,i)=>Fp.is0(num)?acc:(inverted[i]=Fp.mul(acc,inverted[i]),Fp.mul(acc,num)),invertedAcc),inverted}function FpLegendre(Fp,n){const p1mod2=(Fp.ORDER-modular_1n)/_2n,powered=Fp.pow(n,p1mod2),yes=Fp.eql(powered,Fp.ONE),zero=Fp.eql(powered,Fp.ZERO),no=Fp.eql(powered,Fp.neg(Fp.ONE));if(!yes&&!zero&&!no)throw new Error("invalid Legendre symbol result");return yes?1:zero?0:-1}function nLength(n,nBitLength){void 0!==nBitLength&&(0,utils.Fe)(nBitLength);const _nBitLength=void 0!==nBitLength?nBitLength:n.toString(2).length;return{nBitLength:_nBitLength,nByteLength:Math.ceil(_nBitLength/8)}}function Field(ORDER,bitLen,isLE=!1,redef={}){if(ORDER<=modular_0n)throw new Error("invalid field: expected ORDER > 0, got "+ORDER);const{nBitLength:BITS,nByteLength:BYTES}=nLength(ORDER,bitLen);if(BYTES>2048)throw new Error("invalid field: expected ORDER of <= 2048 bytes");let sqrtP;const f=Object.freeze({ORDER,isLE,BITS,BYTES,MASK:utils_bitMask(BITS),ZERO:modular_0n,ONE:modular_1n,create:num=>modular_mod(num,ORDER),isValid:num=>{if("bigint"!=typeof num)throw new Error("invalid field element: expected bigint, got "+typeof num);return modular_0n<=num&&num<ORDER},is0:num=>num===modular_0n,isOdd:num=>(num&modular_1n)===modular_1n,neg:num=>modular_mod(-num,ORDER),eql:(lhs,rhs)=>lhs===rhs,sqr:num=>modular_mod(num*num,ORDER),add:(lhs,rhs)=>modular_mod(lhs+rhs,ORDER),sub:(lhs,rhs)=>modular_mod(lhs-rhs,ORDER),mul:(lhs,rhs)=>modular_mod(lhs*rhs,ORDER),pow:(num,power)=>FpPow(f,num,power),div:(lhs,rhs)=>modular_mod(lhs*invert(rhs,ORDER),ORDER),sqrN:num=>num*num,addN:(lhs,rhs)=>lhs+rhs,subN:(lhs,rhs)=>lhs-rhs,mulN:(lhs,rhs)=>lhs*rhs,inv:num=>invert(num,ORDER),sqrt:redef.sqrt||(n=>(sqrtP||(sqrtP=FpSqrt(ORDER)),sqrtP(f,n))),toBytes:num=>isLE?numberToBytesLE(num,BYTES):utils_numberToBytesBE(num,BYTES),fromBytes:bytes=>{if(bytes.length!==BYTES)throw new Error("Field.fromBytes: expected "+BYTES+" bytes, got "+bytes.length);return isLE?utils_bytesToNumberLE(bytes):utils_bytesToNumberBE(bytes)},invertBatch:lst=>modular_FpInvertBatch(f,lst),cmov:(a,b,c)=>c?b:a});return Object.freeze(f)}function getFieldBytesLength(fieldOrder){if("bigint"!=typeof fieldOrder)throw new Error("field order must be bigint");const bitLength=fieldOrder.toString(2).length;return Math.ceil(bitLength/8)}function getMinHashLength(fieldOrder){const length=getFieldBytesLength(fieldOrder);return length+Math.ceil(length/2)}const curve_0n=BigInt(0),curve_1n=BigInt(1);function constTimeNegate(condition,item){const neg=item.negate();return condition?neg:item}function validateW(W,bits){if(!Number.isSafeInteger(W)||W<=0||W>bits)throw new Error("invalid window size, expected [1.."+bits+"], got W="+W)}function calcWOpts(W,scalarBits){validateW(W,scalarBits);const maxNumber=2**W;return{windows:Math.ceil(scalarBits/W)+1,windowSize:2**(W-1),mask:utils_bitMask(W),maxNumber,shiftBy:BigInt(W)}}function calcOffsets(n,window,wOpts){const{windowSize,mask,maxNumber,shiftBy}=wOpts;let wbits=Number(n&mask),nextN=n>>shiftBy;wbits>windowSize&&(wbits-=maxNumber,nextN+=curve_1n);const offsetStart=window*windowSize;return{nextN,offset:offsetStart+Math.abs(wbits)-1,isZero:0===wbits,isNeg:wbits<0,isNegF:window%2!=0,offsetF:offsetStart}}function validateMSMPoints(points,c){if(!Array.isArray(points))throw new Error("array expected");points.forEach((p,i)=>{if(!(p instanceof c))throw new Error("invalid point at index "+i)})}function validateMSMScalars(scalars,field){if(!Array.isArray(scalars))throw new Error("array of scalars expected");scalars.forEach((s,i)=>{if(!field.isValid(s))throw new Error("invalid scalar at index "+i)})}const pointPrecomputes=new WeakMap,pointWindowSizes=new WeakMap;function getW(P){return pointWindowSizes.get(P)||1}function pippenger(c,fieldN,points,scalars){validateMSMPoints(points,c),validateMSMScalars(scalars,fieldN);const plength=points.length,slength=scalars.length;if(plength!==slength)throw new Error("arrays of points and scalars must have equal length");const zero=c.ZERO,wbits=function bitLen(n){let len;for(len=0;n>_0n;n>>=_1n,len+=1);return len}(BigInt(plength));let windowSize=1;wbits>12?windowSize=wbits-3:wbits>4?windowSize=wbits-2:wbits>0&&(windowSize=2);const MASK=utils_bitMask(windowSize),buckets=new Array(Number(MASK)+1).fill(zero);let sum=zero;for(let i=Math.floor((fieldN.BITS-1)/windowSize)*windowSize;i>=0;i-=windowSize){buckets.fill(zero);for(let j=0;j<slength;j++){const scalar=scalars[j],wbits=Number(scalar>>BigInt(i)&MASK);buckets[wbits]=buckets[wbits].add(points[j])}let resI=zero;for(let j=buckets.length-1,sumI=zero;j>0;j--)sumI=sumI.add(buckets[j]),resI=resI.add(sumI);if(sum=sum.add(resI),0!==i)for(let j=0;j<windowSize;j++)sum=sum.double()}return sum}function validateBasic(curve){return function modular_validateField(field){return validateObject(field,FIELD_FIELDS.reduce((map,val)=>(map[val]="function",map),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"}))}(curve.Fp),validateObject(curve,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...nLength(curve.n,curve.nBitLength),...curve,p:curve.Fp.ORDER})}function validateSigVerOpts(opts){void 0!==opts.lowS&&abool("lowS",opts.lowS),void 0!==opts.prehash&&abool("prehash",opts.prehash)}class DERErr extends Error{constructor(m=""){super(m)}}const DER={Err:DERErr,_tlv:{encode:(tag,data)=>{const{Err:E}=DER;if(tag<0||tag>256)throw new E("tlv.encode: wrong tag");if(1&data.length)throw new E("tlv.encode: unpadded data");const dataLen=data.length/2,len=numberToHexUnpadded(dataLen);if(len.length/2&128)throw new E("tlv.encode: long form length too big");const lenLen=dataLen>127?numberToHexUnpadded(len.length/2|128):"";return numberToHexUnpadded(tag)+lenLen+len+data},decode(tag,data){const{Err:E}=DER;let pos=0;if(tag<0||tag>256)throw new E("tlv.encode: wrong tag");if(data.length<2||data[pos++]!==tag)throw new E("tlv.decode: wrong tlv");const first=data[pos++];let length=0;if(!!(128&first)){const lenLen=127&first;if(!lenLen)throw new E("tlv.decode(long): indefinite length not supported");if(lenLen>4)throw new E("tlv.decode(long): byte length is too big");const lengthBytes=data.subarray(pos,pos+lenLen);if(lengthBytes.length!==lenLen)throw new E("tlv.decode: length bytes not complete");if(0===lengthBytes[0])throw new E("tlv.decode(long): zero leftmost byte");for(const b of lengthBytes)length=length<<8|b;if(pos+=lenLen,length<128)throw new E("tlv.decode(long): not minimal encoding")}else length=first;const v=data.subarray(pos,pos+length);if(v.length!==length)throw new E("tlv.decode: wrong value length");return{v,l:data.subarray(pos+length)}}},_int:{encode(num){const{Err:E}=DER;if(num<weierstrass_0n)throw new E("integer: negative integers are not allowed");let hex=numberToHexUnpadded(num);if(8&Number.parseInt(hex[0],16)&&(hex="00"+hex),1&hex.length)throw new E("unexpected DER parsing assertion: unpadded hex");return hex},decode(data){const{Err:E}=DER;if(128&data[0])throw new E("invalid signature integer: negative");if(0===data[0]&&!(128&data[1]))throw new E("invalid signature integer: unnecessary leading zero");return utils_bytesToNumberBE(data)}},toSig(hex){const{Err:E,_int:int,_tlv:tlv}=DER,data=utils_ensureBytes("signature",hex),{v:seqBytes,l:seqLeftBytes}=tlv.decode(48,data);if(seqLeftBytes.length)throw new E("invalid signature: left bytes after parsing");const{v:rBytes,l:rLeftBytes}=tlv.decode(2,seqBytes),{v:sBytes,l:sLeftBytes}=tlv.decode(2,rLeftBytes);if(sLeftBytes.length)throw new E("invalid signature: left bytes after parsing");return{r:int.decode(rBytes),s:int.decode(sBytes)}},hexFromSig(sig){const{_tlv:tlv,_int:int}=DER,seq=tlv.encode(2,int.encode(sig.r))+tlv.encode(2,int.encode(sig.s));return tlv.encode(48,seq)}};function numToSizedHex(num,size){return bytesToHex(utils_numberToBytesBE(num,size))}const weierstrass_0n=BigInt(0),weierstrass_1n=BigInt(1),weierstrass_3n=(BigInt(2),BigInt(3)),weierstrass_4n=BigInt(4);function weierstrassPoints(opts){const CURVE=function validatePointOpts(curve){const opts=validateBasic(curve);validateObject(opts,{a:"field",b:"field"},{allowInfinityPoint:"boolean",allowedPrivateKeyLengths:"array",clearCofactor:"function",fromBytes:"function",isTorsionFree:"function",toBytes:"function",wrapPrivateKey:"boolean"});const{endo,Fp,a}=opts;if(endo){if(!Fp.eql(a,Fp.ZERO))throw new Error("invalid endo: CURVE.a must be 0");if("object"!=typeof endo||"bigint"!=typeof endo.beta||"function"!=typeof endo.splitScalar)throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function')}return Object.freeze({...opts})}(opts),{Fp}=CURVE,Fn=Field(CURVE.n,CURVE.nBitLength),toBytes=CURVE.toBytes||((_c,point,_isCompressed)=>{const a=point.toAffine();return utils_concatBytes(Uint8Array.from([4]),Fp.toBytes(a.x),Fp.toBytes(a.y))}),fromBytes=CURVE.fromBytes||(bytes=>{const tail=bytes.subarray(1);return{x:Fp.fromBytes(tail.subarray(0,Fp.BYTES)),y:Fp.fromBytes(tail.subarray(Fp.BYTES,2*Fp.BYTES))}});function weierstrassEquation(x){const{a,b}=CURVE,x2=Fp.sqr(x),x3=Fp.mul(x2,x);return Fp.add(Fp.add(x3,Fp.mul(x,a)),b)}function isValidXY(x,y){const left=Fp.sqr(y),right=weierstrassEquation(x);return Fp.eql(left,right)}if(!isValidXY(CURVE.Gx,CURVE.Gy))throw new Error("bad curve params: generator point");const _4a3=Fp.mul(Fp.pow(CURVE.a,weierstrass_3n),weierstrass_4n),_27b2=Fp.mul(Fp.sqr(CURVE.b),BigInt(27));if(Fp.is0(Fp.add(_4a3,_27b2)))throw new Error("bad curve params: a or b");function normPrivateKeyToScalar(key){const{allowedPrivateKeyLengths:lengths,nByteLength,wrapPrivateKey,n:N}=CURVE;if(lengths&&"bigint"!=typeof key){if(isBytes(key)&&(key=bytesToHex(key)),"string"!=typeof key||!lengths.includes(key.length))throw new Error("invalid private key");key=key.padStart(2*nByteLength,"0")}let num;try{num="bigint"==typeof key?key:utils_bytesToNumberBE(utils_ensureBytes("private key",key,nByteLength))}catch(error){throw new Error("invalid private key, expected hex or "+nByteLength+" bytes, got "+typeof key)}return wrapPrivateKey&&(num=modular_mod(num,N)),utils_aInRange("private key",num,weierstrass_1n,N),num}function aprjpoint(other){if(!(other instanceof Point))throw new Error("ProjectivePoint expected")}const toAffineMemo=memoized((p,iz)=>{const{px:x,py:y,pz:z}=p;if(Fp.eql(z,Fp.ONE))return{x,y};const is0=p.is0();null==iz&&(iz=is0?Fp.ONE:Fp.inv(z));const ax=Fp.mul(x,iz),ay=Fp.mul(y,iz),zz=Fp.mul(z,iz);if(is0)return{x:Fp.ZERO,y:Fp.ZERO};if(!Fp.eql(zz,Fp.ONE))throw new Error("invZ was invalid");return{x:ax,y:ay}}),assertValidMemo=memoized(p=>{if(p.is0()){if(CURVE.allowInfinityPoint&&!Fp.is0(p.py))return;throw new Error("bad point: ZERO")}const{x,y}=p.toAffine();if(!Fp.isValid(x)||!Fp.isValid(y))throw new Error("bad point: x or y not FE");if(!isValidXY(x,y))throw new Error("bad point: equation left != right");if(!p.isTorsionFree())throw new Error("bad point: not in prime-order subgroup");return!0});class Point{constructor(px,py,pz){if(null==px||!Fp.isValid(px))throw new Error("x required");if(null==py||!Fp.isValid(py)||Fp.is0(py))throw new Error("y required");if(null==pz||!Fp.isValid(pz))throw new Error("z required");this.px=px,this.py=py,this.pz=pz,Object.freeze(this)}static fromAffine(p){const{x,y}=p||{};if(!p||!Fp.isValid(x)||!Fp.isValid(y))throw new Error("invalid affine point");if(p instanceof Point)throw new Error("projective point not allowed");const is0=i=>Fp.eql(i,Fp.ZERO);return is0(x)&&is0(y)?Point.ZERO:new Point(x,y,Fp.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(points){const toInv=modular_FpInvertBatch(Fp,points.map(p=>p.pz));return points.map((p,i)=>p.toAffine(toInv[i])).map(Point.fromAffine)}static fromHex(hex){const P=Point.fromAffine(fromBytes(utils_ensureBytes("pointHex",hex)));return P.assertValidity(),P}static fromPrivateKey(privateKey){return Point.BASE.multiply(normPrivateKeyToScalar(privateKey))}static msm(points,scalars){return pippenger(Point,Fn,points,scalars)}_setWindowSize(windowSize){wnaf.setWindowSize(this,windowSize)}assertValidity(){assertValidMemo(this)}hasEvenY(){const{y}=this.toAffine();if(Fp.isOdd)return!Fp.isOdd(y);throw new Error("Field doesn't support isOdd")}equals(other){aprjpoint(other);const{px:X1,py:Y1,pz:Z1}=this,{px:X2,py:Y2,pz:Z2}=other,U1=Fp.eql(Fp.mul(X1,Z2),Fp.mul(X2,Z1)),U2=Fp.eql(Fp.mul(Y1,Z2),Fp.mul(Y2,Z1));return U1&&U2}negate(){return new Point(this.px,Fp.neg(this.py),this.pz)}double(){const{a,b}=CURVE,b3=Fp.mul(b,weierstrass_3n),{px:X1,py:Y1,pz:Z1}=this;let X3=Fp.ZERO,Y3=Fp.ZERO,Z3=Fp.ZERO,t0=Fp.mul(X1,X1),t1=Fp.mul(Y1,Y1),t2=Fp.mul(Z1,Z1),t3=Fp.mul(X1,Y1);return t3=Fp.add(t3,t3),Z3=Fp.mul(X1,Z1),Z3=Fp.add(Z3,Z3),X3=Fp.mul(a,Z3),Y3=Fp.mul(b3,t2),Y3=Fp.add(X3,Y3),X3=Fp.sub(t1,Y3),Y3=Fp.add(t1,Y3),Y3=Fp.mul(X3,Y3),X3=Fp.mul(t3,X3),Z3=Fp.mul(b3,Z3),t2=Fp.mul(a,t2),t3=Fp.sub(t0,t2),t3=Fp.mul(a,t3),t3=Fp.add(t3,Z3),Z3=Fp.add(t0,t0),t0=Fp.add(Z3,t0),t0=Fp.add(t0,t2),t0=Fp.mul(t0,t3),Y3=Fp.add(Y3,t0),t2=Fp.mul(Y1,Z1),t2=Fp.add(t2,t2),t0=Fp.mul(t2,t3),X3=Fp.sub(X3,t0),Z3=Fp.mul(t2,t1),Z3=Fp.add(Z3,Z3),Z3=Fp.add(Z3,Z3),new Point(X3,Y3,Z3)}add(other){aprjpoint(other);const{px:X1,py:Y1,pz:Z1}=this,{px:X2,py:Y2,pz:Z2}=other;let X3=Fp.ZERO,Y3=Fp.ZERO,Z3=Fp.ZERO;const a=CURVE.a,b3=Fp.mul(CURVE.b,weierstrass_3n);let t0=Fp.mul(X1,X2),t1=Fp.mul(Y1,Y2),t2=Fp.mul(Z1,Z2),t3=Fp.add(X1,Y1),t4=Fp.add(X2,Y2);t3=Fp.mul(t3,t4),t4=Fp.add(t0,t1),t3=Fp.sub(t3,t4),t4=Fp.add(X1,Z1);let t5=Fp.add(X2,Z2);return t4=Fp.mul(t4,t5),t5=Fp.add(t0,t2),t4=Fp.sub(t4,t5),t5=Fp.add(Y1,Z1),X3=Fp.add(Y2,Z2),t5=Fp.mul(t5,X3),X3=Fp.add(t1,t2),t5=Fp.sub(t5,X3),Z3=Fp.mul(a,t4),X3=Fp.mul(b3,t2),Z3=Fp.add(X3,Z3),X3=Fp.sub(t1,Z3),Z3=Fp.add(t1,Z3),Y3=Fp.mul(X3,Z3),t1=Fp.add(t0,t0),t1=Fp.add(t1,t0),t2=Fp.mul(a,t2),t4=Fp.mul(b3,t4),t1=Fp.add(t1,t2),t2=Fp.sub(t0,t2),t2=Fp.mul(a,t2),t4=Fp.add(t4,t2),t0=Fp.mul(t1,t4),Y3=Fp.add(Y3,t0),t0=Fp.mul(t5,t4),X3=Fp.mul(t3,X3),X3=Fp.sub(X3,t0),t0=Fp.mul(t3,t1),Z3=Fp.mul(t5,Z3),Z3=Fp.add(Z3,t0),new Point(X3,Y3,Z3)}subtract(other){return this.add(other.negate())}is0(){return this.equals(Point.ZERO)}wNAF(n){return wnaf.wNAFCached(this,n,Point.normalizeZ)}multiplyUnsafe(sc){const{endo,n:N}=CURVE;utils_aInRange("scalar",sc,weierstrass_0n,N);const I=Point.ZERO;if(sc===weierstrass_0n)return I;if(this.is0()||sc===weierstrass_1n)return this;if(!endo||wnaf.hasPrecomputes(this))return wnaf.wNAFCachedUnsafe(this,sc,Point.normalizeZ);let{k1neg,k1,k2neg,k2}=endo.splitScalar(sc),k1p=I,k2p=I,d=this;for(;k1>weierstrass_0n||k2>weierstrass_0n;)k1&weierstrass_1n&&(k1p=k1p.add(d)),k2&weierstrass_1n&&(k2p=k2p.add(d)),d=d.double(),k1>>=weierstrass_1n,k2>>=weierstrass_1n;return k1neg&&(k1p=k1p.negate()),k2neg&&(k2p=k2p.negate()),k2p=new Point(Fp.mul(k2p.px,endo.beta),k2p.py,k2p.pz),k1p.add(k2p)}multiply(scalar){const{endo,n:N}=CURVE;let point,fake;if(utils_aInRange("scalar",scalar,weierstrass_1n,N),endo){const{k1neg,k1,k2neg,k2}=endo.splitScalar(scalar);let{p:k1p,f:f1p}=this.wNAF(k1),{p:k2p,f:f2p}=this.wNAF(k2);k1p=wnaf.constTimeNegate(k1neg,k1p),k2p=wnaf.constTimeNegate(k2neg,k2p),k2p=new Point(Fp.mul(k2p.px,endo.beta),k2p.py,k2p.pz),point=k1p.add(k2p),fake=f1p.add(f2p)}else{const{p,f}=this.wNAF(scalar);point=p,fake=f}return Point.normalizeZ([point,fake])[0]}multiplyAndAddUnsafe(Q,a,b){const G=Point.BASE,mul=(P,a)=>a!==weierstrass_0n&&a!==weierstrass_1n&&P.equals(G)?P.multiply(a):P.multiplyUnsafe(a),sum=mul(this,a).add(mul(Q,b));return sum.is0()?void 0:sum}toAffine(iz){return toAffineMemo(this,iz)}isTorsionFree(){const{h:cofactor,isTorsionFree}=CURVE;if(cofactor===weierstrass_1n)return!0;if(isTorsionFree)return isTorsionFree(Point,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:cofactor,clearCofactor}=CURVE;return cofactor===weierstrass_1n?this:clearCofactor?clearCofactor(Point,this):this.multiplyUnsafe(CURVE.h)}toRawBytes(isCompressed=!0){return abool("isCompressed",isCompressed),this.assertValidity(),toBytes(Point,this,isCompressed)}toHex(isCompressed=!0){return abool("isCompressed",isCompressed),bytesToHex(this.toRawBytes(isCompressed))}}Point.BASE=new Point(CURVE.Gx,CURVE.Gy,Fp.ONE),Point.ZERO=new Point(Fp.ZERO,Fp.ONE,Fp.ZERO);const{endo,nBitLength}=CURVE,wnaf=function wNAF(c,bits){return{constTimeNegate,hasPrecomputes:elm=>1!==getW(elm),unsafeLadder(elm,n,p=c.ZERO){let d=elm;for(;n>curve_0n;)n&curve_1n&&(p=p.add(d)),d=d.double(),n>>=curve_1n;return p},precomputeWindow(elm,W){const{windows,windowSize}=calcWOpts(W,bits),points=[];let p=elm,base=p;for(let window=0;window<windows;window++){base=p,points.push(base);for(let i=1;i<windowSize;i++)base=base.add(p),points.push(base);p=base.double()}return points},wNAF(W,precomputes,n){let p=c.ZERO,f=c.BASE;const wo=calcWOpts(W,bits);for(let window=0;window<wo.windows;window++){const{nextN,offset,isZero,isNeg,isNegF,offsetF}=calcOffsets(n,window,wo);n=nextN,isZero?f=f.add(constTimeNegate(isNegF,precomputes[offsetF])):p=p.add(constTimeNegate(isNeg,precomputes[offset]))}return{p,f}},wNAFUnsafe(W,precomputes,n,acc=c.ZERO){const wo=calcWOpts(W,bits);for(let window=0;window<wo.windows&&n!==curve_0n;window++){const{nextN,offset,isZero,isNeg}=calcOffsets(n,window,wo);if(n=nextN,!isZero){const item=precomputes[offset];acc=acc.add(isNeg?item.negate():item)}}return acc},getPrecomputes(W,P,transform){let comp=pointPrecomputes.get(P);return comp||(comp=this.precomputeWindow(P,W),1!==W&&pointPrecomputes.set(P,transform(comp))),comp},wNAFCached(P,n,transform){const W=getW(P);return this.wNAF(W,this.getPrecomputes(W,P,transform),n)},wNAFCachedUnsafe(P,n,transform,prev){const W=getW(P);return 1===W?this.unsafeLadder(P,n,prev):this.wNAFUnsafe(W,this.getPrecomputes(W,P,transform),n,prev)},setWindowSize(P,W){validateW(W,bits),pointWindowSizes.set(P,W),pointPrecomputes.delete(P)}}}(Point,endo?Math.ceil(nBitLength/2):nBitLength);return{CURVE,ProjectivePoint:Point,normPrivateKeyToScalar,weierstrassEquation,isWithinCurveOrder:function isWithinCurveOrder(num){return utils_inRange(num,weierstrass_1n,CURVE.n)}}}function weierstrass(curveDef){const CURVE=function validateOpts(curve){const opts=validateBasic(curve);return validateObject(opts,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...opts})}(curveDef),{Fp,n:CURVE_ORDER,nByteLength,nBitLength}=CURVE,compressedLen=Fp.BYTES+1,uncompressedLen=2*Fp.BYTES+1;function modN(a){return modular_mod(a,CURVE_ORDER)}function invN(a){return invert(a,CURVE_ORDER)}const{ProjectivePoint:Point,normPrivateKeyToScalar,weierstrassEquation,isWithinCurveOrder}=weierstrassPoints({...CURVE,toBytes(_c,point,isCompressed){const a=point.toAffine(),x=Fp.toBytes(a.x),cat=utils_concatBytes;return abool("isCompressed",isCompressed),isCompressed?cat(Uint8Array.from([point.hasEvenY()?2:3]),x):cat(Uint8Array.from([4]),x,Fp.toBytes(a.y))},fromBytes(bytes){const len=bytes.length,head=bytes[0],tail=bytes.subarray(1);if(len!==compressedLen||2!==head&&3!==head){if(len===uncompressedLen&&4===head){return{x:Fp.fromBytes(tail.subarray(0,Fp.BYTES)),y:Fp.fromBytes(tail.subarray(Fp.BYTES,2*Fp.BYTES))}}throw new Error("invalid Point, expected length of "+compressedLen+", or uncompressed "+uncompressedLen+", got "+len)}{const x=utils_bytesToNumberBE(tail);if(!utils_inRange(x,weierstrass_1n,Fp.ORDER))throw new Error("Point is not on curve");const y2=weierstrassEquation(x);let y;try{y=Fp.sqrt(y2)}catch(sqrtError){const suffix=sqrtError instanceof Error?": "+sqrtError.message:"";throw new Error("Point is not on curve"+suffix)}return!(1&~head)!==((y&weierstrass_1n)===weierstrass_1n)&&(y=Fp.neg(y)),{x,y}}}});function isBiggerThanHalfOrder(number){return number>CURVE_ORDER>>weierstrass_1n}const slcNum=(b,from,to)=>utils_bytesToNumberBE(b.slice(from,to));class Signature{constructor(r,s,recovery){utils_aInRange("r",r,weierstrass_1n,CURVE_ORDER),utils_aInRange("s",s,weierstrass_1n,CURVE_ORDER),this.r=r,this.s=s,null!=recovery&&(this.recovery=recovery),Object.freeze(this)}static fromCompact(hex){const l=nByteLength;return hex=utils_ensureBytes("compactSignature",hex,2*l),new Signature(slcNum(hex,0,l),slcNum(hex,l,2*l))}static fromDER(hex){const{r,s}=DER.toSig(utils_ensureBytes("DER",hex));return new Signature(r,s)}assertValidity(){}addRecoveryBit(recovery){return new Signature(this.r,this.s,recovery)}recoverPublicKey(msgHash){const{r,s,recovery:rec}=this,h=bits2int_modN(utils_ensureBytes("msgHash",msgHash));if(null==rec||![0,1,2,3].includes(rec))throw new Error("recovery id invalid");const radj=2===rec||3===rec?r+CURVE.n:r;if(radj>=Fp.ORDER)throw new Error("recovery id 2 or 3 invalid");const prefix=1&rec?"03":"02",R=Point.fromHex(prefix+numToSizedHex(radj,Fp.BYTES)),ir=invN(radj),u1=modN(-h*ir),u2=modN(s*ir),Q=Point.BASE.multiplyAndAddUnsafe(R,u1,u2);if(!Q)throw new Error("point at infinify");return Q.assertValidity(),Q}hasHighS(){return isBiggerThanHalfOrder(this.s)}normalizeS(){return this.hasHighS()?new Signature(this.r,modN(-this.s),this.recovery):this}toDERRawBytes(){return hexToBytes(this.toDERHex())}toDERHex(){return DER.hexFromSig(this)}toCompactRawBytes(){return hexToBytes(this.toCompactHex())}toCompactHex(){const l=nByteLength;return numToSizedHex(this.r,l)+numToSizedHex(this.s,l)}}const utils={isValidPrivateKey(privateKey){try{return normPrivateKeyToScalar(privateKey),!0}catch(error){return!1}},normPrivateKeyToScalar,randomPrivateKey:()=>{const length=getMinHashLength(CURVE.n);return function mapHashToField(key,fieldOrder,isLE=!1){const len=key.length,fieldLen=getFieldBytesLength(fieldOrder),minLen=getMinHashLength(fieldOrder);if(len<16||len<minLen||len>1024)throw new Error("expected "+minLen+"-1024 bytes of input, got "+len);const reduced=modular_mod(isLE?utils_bytesToNumberLE(key):utils_bytesToNumberBE(key),fieldOrder-modular_1n)+modular_1n;return isLE?numberToBytesLE(reduced,fieldLen):utils_numberToBytesBE(reduced,fieldLen)}(CURVE.randomBytes(length),CURVE.n)},precompute:(windowSize=8,point=Point.BASE)=>(point._setWindowSize(windowSize),point.multiply(BigInt(3)),point)};function isProbPub(item){if("bigint"==typeof item)return!1;if(item instanceof Point)return!0;const len=utils_ensureBytes("key",item).length,fpl=Fp.BYTES,compLen=fpl+1,uncompLen=2*fpl+1;return CURVE.allowedPrivateKeyLengths||nByteLength===compLen?void 0:len===compLen||len===uncompLen}const bits2int=CURVE.bits2int||function(bytes){if(bytes.length>8192)throw new Error("input is too large");const num=utils_bytesToNumberBE(bytes),delta=8*bytes.length-nBitLength;return delta>0?num>>BigInt(delta):num},bits2int_modN=CURVE.bits2int_modN||function(bytes){return modN(bits2int(bytes))},ORDER_MASK=utils_bitMask(nBitLength);function int2octets(num){return utils_aInRange("num < 2^"+nBitLength,num,weierstrass_0n,ORDER_MASK),utils_numberToBytesBE(num,nByteLength)}function prepSig(msgHash,privateKey,opts=defaultSigOpts){if(["recovered","canonical"].some(k=>k in opts))throw new Error("sign() legacy options not supported");const{hash,randomBytes}=CURVE;let{lowS,prehash,extraEntropy:ent}=opts;null==lowS&&(lowS=!0),msgHash=utils_ensureBytes("msgHash",msgHash),validateSigVerOpts(opts),prehash&&(msgHash=utils_ensureBytes("prehashed msgHash",hash(msgHash)));const h1int=bits2int_modN(msgHash),d=normPrivateKeyToScalar(privateKey),seedArgs=[int2octets(d),int2octets(h1int)];if(null!=ent&&!1!==ent){const e=!0===ent?randomBytes(Fp.BYTES):ent;seedArgs.push(utils_ensureBytes("extraEntropy",e))}const seed=utils_concatBytes(...seedArgs),m=h1int;return{seed,k2sig:function k2sig(kBytes){const k=bits2int(kBytes);if(!isWithinCurveOrder(k))return;const ik=invN(k),q=Point.BASE.multiply(k).toAffine(),r=modN(q.x);if(r===weierstrass_0n)return;const s=modN(ik*modN(m+r*d));if(s===weierstrass_0n)return;let recovery=(q.x===r?0:2)|Number(q.y&weierstrass_1n),normS=s;return lowS&&isBiggerThanHalfOrder(s)&&(normS=function normalizeS(s){return isBiggerThanHalfOrder(s)?modN(-s):s}(s),recovery^=1),new Signature(r,normS,recovery)}}}const defaultSigOpts={lowS:CURVE.lowS,prehash:!1},defaultVerOpts={lowS:CURVE.lowS,prehash:!1};return Point.BASE._setWindowSize(8),{CURVE,getPublicKey:function getPublicKey(privateKey,isCompressed=!0){return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed)},getSharedSecret:function getSharedSecret(privateA,publicB,isCompressed=!0){if(!0===isProbPub(privateA))throw new Error("first arg must be private key");if(!1===isProbPub(publicB))throw new Error("second arg must be public key");return Point.fromHex(publicB).multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed)},sign:function sign(msgHash,privKey,opts=defaultSigOpts){const{seed,k2sig}=prepSig(msgHash,privKey,opts),C=CURVE;return function createHmacDrbg(hashLen,qByteLen,hmacFn){if("number"!=typeof hashLen||hashLen<2)throw new Error("hashLen must be a number");if("number"!=typeof qByteLen||qByteLen<2)throw new Error("qByteLen must be a number");if("function"!=typeof hmacFn)throw new Error("hmacFn must be a function");let v=u8n(hashLen),k=u8n(hashLen),i=0;const reset=()=>{v.fill(1),k.fill(0),i=0},h=(...b)=>hmacFn(k,v,...b),reseed=(seed=u8n(0))=>{k=h(u8fr([0]),seed),v=h(),0!==seed.length&&(k=h(u8fr([1]),seed),v=h())},gen=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let len=0;const out=[];for(;len<qByteLen;){v=h();const sl=v.slice();out.push(sl),len+=v.length}return utils_concatBytes(...out)};return(seed,pred)=>{let res;for(reset(),reseed(seed);!(res=pred(gen()));)reseed();return reset(),res}}(C.hash.outputLen,C.nByteLength,C.hmac)(seed,k2sig)},verify:function verify(signature,msgHash,publicKey,opts=defaultVerOpts){const sg=signature;msgHash=utils_ensureBytes("msgHash",msgHash),publicKey=utils_ensureBytes("publicKey",publicKey);const{lowS,prehash,format}=opts;if(validateSigVerOpts(opts),"strict"in opts)throw new Error("options.strict was renamed to lowS");if(void 0!==format&&"compact"!==format&&"der"!==format)throw new Error("format must be compact or der");const isHex="string"==typeof sg||isBytes(sg),isObj=!isHex&&!format&&"object"==typeof sg&&null!==sg&&"bigint"==typeof sg.r&&"bigint"==typeof sg.s;if(!isHex&&!isObj)throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");let _sig,P;try{if(isObj&&(_sig=new Signature(sg.r,sg.s)),isHex){try{"compact"!==format&&(_sig=Signature.fromDER(sg))}catch(derError){if(!(derError instanceof DER.Err))throw derError}_sig||"der"===format||(_sig=Signature.fromCompact(sg))}P=Point.fromHex(publicKey)}catch(error){return!1}if(!_sig)return!1;if(lowS&&_sig.hasHighS())return!1;prehash&&(msgHash=CURVE.hash(msgHash));const{r,s}=_sig,h=bits2int_modN(msgHash),is=invN(s),u1=modN(h*is),u2=modN(r*is),R=Point.BASE.multiplyAndAddUnsafe(P,u1,u2)?.toAffine();return!!R&&modN(R.x)===r},ProjectivePoint:Point,Signature,utils}}function getHash(hash){return{hash,hmac:(key,...msgs)=>(0,hmac.w)(hash,key,(0,utils.Id)(...msgs)),randomBytes:utils.po}}const secp256k1P=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),secp256k1N=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),secp256k1_0n=BigInt(0),secp256k1_1n=BigInt(1),secp256k1_2n=BigInt(2),divNearest=(a,b)=>(a+b/secp256k1_2n)/b;function sqrtMod(y){const P=secp256k1P,_3n=BigInt(3),_6n=BigInt(6),_11n=BigInt(11),_22n=BigInt(22),_23n=BigInt(23),_44n=BigInt(44),_88n=BigInt(88),b2=y*y*y%P,b3=b2*b2*y%P,b6=pow2(b3,_3n,P)*b3%P,b9=pow2(b6,_3n,P)*b3%P,b11=pow2(b9,secp256k1_2n,P)*b2%P,b22=pow2(b11,_11n,P)*b11%P,b44=pow2(b22,_22n,P)*b22%P,b88=pow2(b44,_44n,P)*b44%P,b176=pow2(b88,_88n,P)*b88%P,b220=pow2(b176,_44n,P)*b44%P,b223=pow2(b220,_3n,P)*b3%P,t1=pow2(b223,_23n,P)*b22%P,t2=pow2(t1,_6n,P)*b2%P,root=pow2(t2,secp256k1_2n,P);if(!Fpk1.eql(Fpk1.sqr(root),y))throw new Error("Cannot find square root");return root}const Fpk1=Field(secp256k1P,void 0,void 0,{sqrt:sqrtMod}),secp256k1=function createCurve(curveDef,defHash){const create=hash=>weierstrass({...curveDef,...getHash(hash)});return{...create(defHash),create}}({a:secp256k1_0n,b:BigInt(7),Fp:Fpk1,n:secp256k1N,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:k=>{const n=secp256k1N,a1=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),b1=-secp256k1_1n*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),a2=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),b2=a1,POW_2_128=BigInt("0x100000000000000000000000000000000"),c1=divNearest(b2*k,n),c2=divNearest(-b1*k,n);let k1=modular_mod(k-c1*a1-c2*a2,n),k2=modular_mod(-c1*b1-c2*b2,n);const k1neg=k1>POW_2_128,k2neg=k2>POW_2_128;if(k1neg&&(k1=n-k1),k2neg&&(k2=n-k2),k1>POW_2_128||k2>POW_2_128)throw new Error("splitScalar: Endomorphism failed, k="+k);return{k1neg,k1,k2neg,k2}}}},sha2.sc)}}]);