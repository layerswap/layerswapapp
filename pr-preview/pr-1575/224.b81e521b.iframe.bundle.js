"use strict";(self.webpackChunklayerswap=self.webpackChunklayerswap||[]).push([[224],{"./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>ConstantsUtil});var process=__webpack_require__("./node_modules/process/browser.js");const ConstantsUtil={WC_NAME_SUFFIX:".reown.id",WC_NAME_SUFFIX_LEGACY:".wcn.id",BLOCKCHAIN_API_RPC_URL:"https://rpc.walletconnect.org",PULSE_API_URL:"https://pulse.walletconnect.org",W3M_API_URL:"https://api.web3modal.org",CONNECTOR_ID:{WALLET_CONNECT:"walletConnect",INJECTED:"injected",WALLET_STANDARD:"announced",COINBASE:"coinbaseWallet",COINBASE_SDK:"coinbaseWalletSDK",SAFE:"safe",LEDGER:"ledger",OKX:"okx",EIP6963:"eip6963",AUTH:"ID_AUTH"},CONNECTOR_NAMES:{AUTH:"Auth"},AUTH_CONNECTOR_SUPPORTED_CHAINS:["eip155","solana"],LIMITS:{PENDING_TRANSACTIONS:99},CHAIN:{EVM:"eip155",SOLANA:"solana",POLKADOT:"polkadot",BITCOIN:"bip122"},CHAIN_NAME_MAP:{eip155:"EVM Networks",solana:"Solana",polkadot:"Polkadot",bip122:"Bitcoin",cosmos:"Cosmos"},ADAPTER_TYPES:{BITCOIN:"bitcoin",SOLANA:"solana",WAGMI:"wagmi",ETHERS:"ethers",ETHERS5:"ethers5"},USDT_CONTRACT_ADDRESSES:["0xdac17f958d2ee523a2206206994597c13d831ec7","0xc2132d05d31c914a87c6611c10748aeb04b58e8f","0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7","0x919C1c267BC06a7039e03fcc2eF738525769109c","0x48065fbBE25f71C9282ddf5e1cD6D6A887483D5e","0x55d398326f99059fF775485246999027B3197955","0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9"],HTTP_STATUS_CODES:{SERVICE_UNAVAILABLE:503,FORBIDDEN:403},UNSUPPORTED_NETWORK_NAME:"Unknown Network",SECURE_SITE_SDK_ORIGIN:(void 0!==process&&void 0!==process.env?process.env.NEXT_PUBLIC_SECURE_SITE_ORIGIN:void 0)||"https://secure.walletconnect.org"}},"./node_modules/@reown/appkit-common/dist/esm/src/utils/NetworkUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{L:()=>NetworkUtil});var _ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js");const NetworkUtil={caipNetworkIdToNumber:caipnetworkId=>caipnetworkId?Number(caipnetworkId.split(":")[1]):void 0,parseEvmChainId(chainId){return"string"==typeof chainId?this.caipNetworkIdToNumber(chainId):chainId},getNetworksByNamespace:(networks,namespace)=>networks?.filter(network=>network.chainNamespace===namespace)||[],getFirstNetworkByNamespace(networks,namespace){return this.getNetworksByNamespace(networks,namespace)[0]},getNetworkNameByCaipNetworkId(caipNetworks,caipNetworkId){if(!caipNetworkId)return;const caipNetwork=caipNetworks.find(network=>network.caipNetworkId===caipNetworkId);if(caipNetwork)return caipNetwork.name;const[namespace]=caipNetworkId.split(":");return _ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_0__.o.CHAIN_NAME_MAP?.[namespace]||void 0}}},"./node_modules/@reown/appkit-common/dist/esm/src/utils/SafeLocalStorage.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{IP:()=>isSafe,T8:()=>getSafeConnectorIdKey,Ud:()=>SafeLocalStorage,Ws:()=>SafeLocalStorageKeys});const SafeLocalStorageKeys={WALLET_ID:"@appkit/wallet_id",WALLET_NAME:"@appkit/wallet_name",SOLANA_WALLET:"@appkit/solana_wallet",SOLANA_CAIP_CHAIN:"@appkit/solana_caip_chain",ACTIVE_CAIP_NETWORK_ID:"@appkit/active_caip_network_id",CONNECTED_SOCIAL:"@appkit/connected_social",CONNECTED_SOCIAL_USERNAME:"@appkit-wallet/SOCIAL_USERNAME",RECENT_WALLETS:"@appkit/recent_wallets",DEEPLINK_CHOICE:"WALLETCONNECT_DEEPLINK_CHOICE",ACTIVE_NAMESPACE:"@appkit/active_namespace",CONNECTED_NAMESPACES:"@appkit/connected_namespaces",CONNECTION_STATUS:"@appkit/connection_status",SIWX_AUTH_TOKEN:"@appkit/siwx-auth-token",SIWX_NONCE_TOKEN:"@appkit/siwx-nonce-token",TELEGRAM_SOCIAL_PROVIDER:"@appkit/social_provider",NATIVE_BALANCE_CACHE:"@appkit/native_balance_cache",PORTFOLIO_CACHE:"@appkit/portfolio_cache",ENS_CACHE:"@appkit/ens_cache",IDENTITY_CACHE:"@appkit/identity_cache",PREFERRED_ACCOUNT_TYPES:"@appkit/preferred_account_types",CONNECTIONS:"@appkit/connections"};function getSafeConnectorIdKey(namespace){if(!namespace)throw new Error("Namespace is required for CONNECTED_CONNECTOR_ID");return`@appkit/${namespace}:connected_connector_id`}const SafeLocalStorage={setItem(key,value){isSafe()&&void 0!==value&&localStorage.setItem(key,value)},getItem(key){if(isSafe())return localStorage.getItem(key)||void 0},removeItem(key){isSafe()&&localStorage.removeItem(key)},clear(){isSafe()&&localStorage.clear()}};function isSafe(){return"undefined"!=typeof window&&"undefined"!=typeof localStorage}},"./node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function getW3mThemeVariables(themeVariables,themeType){return"light"===themeType?{"--w3m-accent":themeVariables?.["--w3m-accent"]||"hsla(231, 100%, 70%, 1)","--w3m-background":"#fff"}:{"--w3m-accent":themeVariables?.["--w3m-accent"]||"hsla(230, 100%, 67%, 1)","--w3m-background":"#121313"}}__webpack_require__.d(__webpack_exports__,{o:()=>getW3mThemeVariables})},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{U:()=>AccountController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js"),_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),_BlockchainApiController_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js"),_ChainController_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),_SnackController_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js");const state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({currentTab:0,tokenBalance:[],smartAccountDeployed:!1,addressLabels:new Map,allAccounts:[]}),controller={state,replaceState(newState){newState&&Object.assign(state,(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.KR)(newState))},subscribe:callback=>_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.subscribeChainProp("accountState",accountState=>{if(accountState)return callback(accountState)}),subscribeKey(property,callback,chain){let prev;return _ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.subscribeChainProp("accountState",accountState=>{if(accountState){const nextValue=accountState[property];prev!==nextValue&&(prev=nextValue,callback(nextValue))}},chain)},setStatus(status,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("status",status,chain)},getCaipAddress:chain=>_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.getAccountProp("caipAddress",chain),setCaipAddress(caipAddress,chain){const newAddress=caipAddress?_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__.w.getPlainAddress(caipAddress):void 0;chain===_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.state.activeChain&&(_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.state.activeCaipAddress=caipAddress),_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("caipAddress",caipAddress,chain),_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("address",newAddress,chain)},setBalance(balance,balanceSymbol,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("balance",balance,chain),_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("balanceSymbol",balanceSymbol,chain)},setProfileName(profileName,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("profileName",profileName,chain)},setProfileImage(profileImage,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("profileImage",profileImage,chain)},setUser(user,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("user",user,chain)},setAddressExplorerUrl(explorerUrl,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("addressExplorerUrl",explorerUrl,chain)},setSmartAccountDeployed(isDeployed,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("smartAccountDeployed",isDeployed,chain)},setCurrentTab(currentTab){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("currentTab",currentTab,_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.state.activeChain)},setTokenBalance(tokenBalance,chain){tokenBalance&&_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("tokenBalance",tokenBalance,chain)},setShouldUpdateToAddress(address,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("shouldUpdateToAddress",address,chain)},setAllAccounts(accounts,namespace){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("allAccounts",accounts,namespace)},addAddressLabel(address,label,chain){const map=_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.getAccountProp("addressLabels",chain)||new Map;map.set(address,label),_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("addressLabels",map,chain)},removeAddressLabel(address,chain){const map=_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.getAccountProp("addressLabels",chain)||new Map;map.delete(address),_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("addressLabels",map,chain)},setConnectedWalletInfo(connectedWalletInfo,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("connectedWalletInfo",connectedWalletInfo,chain,!1)},setPreferredAccountType(preferredAccountType,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("preferredAccountTypes",{...state.preferredAccountTypes,[chain]:preferredAccountType},chain)},setPreferredAccountTypes(preferredAccountTypes){state.preferredAccountTypes=preferredAccountTypes},setSocialProvider(socialProvider,chain){socialProvider&&_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("socialProvider",socialProvider,chain)},setSocialWindow(socialWindow,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("socialWindow",socialWindow?(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.KR)(socialWindow):void 0,chain)},setFarcasterUrl(farcasterUrl,chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.setAccountProp("farcasterUrl",farcasterUrl,chain)},async fetchTokenBalance(onError){state.balanceLoading=!0;const chainId=_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.state.activeCaipNetwork?.caipNetworkId,chain=_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.state.activeCaipNetwork?.chainNamespace,caipAddress=_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.state.activeCaipAddress,address=caipAddress?_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__.w.getPlainAddress(caipAddress):void 0;if(state.lastRetry&&!_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__.w.isAllowedRetry(state.lastRetry,30*_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__.oU.ONE_SEC_MS))return state.balanceLoading=!1,[];try{if(address&&chainId&&chain){const filteredBalances=(await _BlockchainApiController_js__WEBPACK_IMPORTED_MODULE_4__.T.getBalance(address,chainId)).balances.filter(balance=>"0"!==balance.quantity.decimals);return AccountController.setTokenBalance(filteredBalances,chain),state.lastRetry=void 0,state.balanceLoading=!1,filteredBalances}}catch(error){state.lastRetry=Date.now(),onError?.(error),_SnackController_js__WEBPACK_IMPORTED_MODULE_6__.P.showError("Token Balance Unavailable")}finally{state.balanceLoading=!1}return[]},resetAccount(chain){_ChainController_js__WEBPACK_IMPORTED_MODULE_5__.W.resetAccount(chain)}},AccountController=(0,_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_3__.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>AlertController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),_OptionsController_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({message:"",variant:"info",open:!1}),controller={state,subscribeKey:(key,callback)=>(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.u$)(state,key,callback),open(message,variant){const{debug}=_OptionsController_js__WEBPACK_IMPORTED_MODULE_3__.H.state,{shortMessage,longMessage}=message;debug&&(state.message=shortMessage,state.variant=variant,state.open=!0),longMessage&&console.error("function"==typeof longMessage?longMessage():longMessage)},close(){state.open=!1,state.message="",state.variant="info"}},AlertController=(0,_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_2__.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ApiController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),_utils_AssetUtil_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/AssetUtil.js"),_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),_utils_FetchUtil_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js"),_utils_MobileWallet_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/MobileWallet.js"),_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js"),_AssetController_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AssetController.js"),_ChainController_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),_ConnectorController_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),_EventsController_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js"),_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js");const baseUrl=_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_3__.w.getApiUrl(),api=new _utils_FetchUtil_js__WEBPACK_IMPORTED_MODULE_4__.Z({baseUrl,clientId:null}),state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({promises:{},page:1,count:0,featured:[],allFeatured:[],recommended:[],allRecommended:[],wallets:[],filteredWallets:[],search:[],isAnalyticsEnabled:!1,excludedWallets:[],isFetchingRecommendedWallets:!1}),ApiController={state,subscribeKey:(key,callback)=>(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.u$)(state,key,callback),_getSdkProperties(){const{projectId,sdkType,sdkVersion}=_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.state;return{projectId,st:sdkType||"appkit",sv:sdkVersion||"html-wagmi-4.2.2"}},_filterOutExtensions:wallets=>_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.state.isUniversalProvider?wallets.filter(w=>Boolean(w.mobile_link||w.desktop_link||w.webapp_link)):wallets,async _fetchWalletImage(imageId){const imageUrl=`${api.baseUrl}/getWalletImage/${imageId}`,blob=await api.getBlob({path:imageUrl,params:ApiController._getSdkProperties()});_AssetController_js__WEBPACK_IMPORTED_MODULE_7__.j.setWalletImage(imageId,URL.createObjectURL(blob))},async _fetchNetworkImage(imageId){const imageUrl=`${api.baseUrl}/public/getAssetImage/${imageId}`,blob=await api.getBlob({path:imageUrl,params:ApiController._getSdkProperties()});_AssetController_js__WEBPACK_IMPORTED_MODULE_7__.j.setNetworkImage(imageId,URL.createObjectURL(blob))},async _fetchConnectorImage(imageId){const imageUrl=`${api.baseUrl}/public/getAssetImage/${imageId}`,blob=await api.getBlob({path:imageUrl,params:ApiController._getSdkProperties()});_AssetController_js__WEBPACK_IMPORTED_MODULE_7__.j.setConnectorImage(imageId,URL.createObjectURL(blob))},async _fetchCurrencyImage(countryCode){const imageUrl=`${api.baseUrl}/public/getCurrencyImage/${countryCode}`,blob=await api.getBlob({path:imageUrl,params:ApiController._getSdkProperties()});_AssetController_js__WEBPACK_IMPORTED_MODULE_7__.j.setCurrencyImage(countryCode,URL.createObjectURL(blob))},async _fetchTokenImage(symbol){const imageUrl=`${api.baseUrl}/public/getTokenImage/${symbol}`,blob=await api.getBlob({path:imageUrl,params:ApiController._getSdkProperties()});_AssetController_js__WEBPACK_IMPORTED_MODULE_7__.j.setTokenImage(symbol,URL.createObjectURL(blob))},_filterWalletsByPlatform:wallets=>_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_3__.w.isMobile()?wallets?.filter(w=>{if(w.mobile_link)return!0;if(w.id===_utils_MobileWallet_js__WEBPACK_IMPORTED_MODULE_5__.O.COINBASE.id)return!0;return"solana"===_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.state.activeChain&&(w.id===_utils_MobileWallet_js__WEBPACK_IMPORTED_MODULE_5__.O.SOLFLARE.id||w.id===_utils_MobileWallet_js__WEBPACK_IMPORTED_MODULE_5__.O.PHANTOM.id)}):wallets,fetchProjectConfig:async()=>(await api.get({path:"/appkit/v1/config",params:ApiController._getSdkProperties()})).features,async fetchAllowedOrigins(){try{const{allowedOrigins}=await api.get({path:"/projects/v1/origins",params:ApiController._getSdkProperties()});return allowedOrigins}catch(error){return[]}},async fetchNetworkImages(){const requestedCaipNetworks=_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.getAllRequestedCaipNetworks(),ids=requestedCaipNetworks?.map(({assets})=>assets?.imageId).filter(Boolean).filter(imageId=>!_utils_AssetUtil_js__WEBPACK_IMPORTED_MODULE_2__.$.getNetworkImageById(imageId));ids&&await Promise.allSettled(ids.map(id=>ApiController._fetchNetworkImage(id)))},async fetchConnectorImages(){const{connectors}=_ConnectorController_js__WEBPACK_IMPORTED_MODULE_9__.a.state,ids=connectors.map(({imageId})=>imageId).filter(Boolean);await Promise.allSettled(ids.map(id=>ApiController._fetchConnectorImage(id)))},async fetchCurrencyImages(currencies=[]){await Promise.allSettled(currencies.map(currency=>ApiController._fetchCurrencyImage(currency)))},async fetchTokenImages(tokens=[]){await Promise.allSettled(tokens.map(token=>ApiController._fetchTokenImage(token)))},async fetchWallets(params){const exclude=params.exclude??[];ApiController._getSdkProperties().sv.startsWith("html-core-")&&exclude.push(...Object.values(_utils_MobileWallet_js__WEBPACK_IMPORTED_MODULE_5__.O).map(w=>w.id));const wallets=await api.get({path:"/getWallets",params:{...ApiController._getSdkProperties(),...params,page:String(params.page),entries:String(params.entries),include:params.include?.join(","),exclude:exclude.join(",")}});return{data:ApiController._filterWalletsByPlatform(wallets?.data)||[],count:wallets?.count}},async fetchFeaturedWallets(){const{featuredWalletIds}=_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.state;if(featuredWalletIds?.length){const params={...ApiController._getSdkProperties(),page:1,entries:featuredWalletIds?.length??4,include:featuredWalletIds},{data}=await ApiController.fetchWallets(params),sortedData=[...data].sort((a,b)=>featuredWalletIds.indexOf(a.id)-featuredWalletIds.indexOf(b.id)),images=sortedData.map(d=>d.image_id).filter(Boolean);await Promise.allSettled(images.map(id=>ApiController._fetchWalletImage(id))),state.featured=sortedData,state.allFeatured=sortedData}},async fetchRecommendedWallets(){try{state.isFetchingRecommendedWallets=!0;const{includeWalletIds,excludeWalletIds,featuredWalletIds}=_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.state,exclude=[...excludeWalletIds??[],...featuredWalletIds??[]].filter(Boolean),params={page:1,entries:4,include:includeWalletIds,exclude,chains:_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.getRequestedCaipNetworkIds().join(",")},{data,count}=await ApiController.fetchWallets(params),recent=_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_6__.i.getRecentWallets(),recommendedImages=data.map(d=>d.image_id).filter(Boolean),recentImages=recent.map(r=>r.image_id).filter(Boolean);await Promise.allSettled([...recommendedImages,...recentImages].map(id=>ApiController._fetchWalletImage(id))),state.recommended=data,state.allRecommended=data,state.count=count??0}catch{}finally{state.isFetchingRecommendedWallets=!1}},async fetchWalletsByPage({page}){const{includeWalletIds,excludeWalletIds,featuredWalletIds}=_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.state,chains=_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.getRequestedCaipNetworkIds().join(","),params={page,entries:40,include:includeWalletIds,exclude:[...state.recommended.map(({id})=>id),...excludeWalletIds??[],...featuredWalletIds??[]].filter(Boolean),chains},{data,count}=await ApiController.fetchWallets(params),images=data.slice(0,20).map(w=>w.image_id).filter(Boolean);await Promise.allSettled(images.map(id=>ApiController._fetchWalletImage(id))),state.wallets=_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_3__.w.uniqueBy([...state.wallets,...ApiController._filterOutExtensions(data)],"id").filter(w=>w.chains?.some(chain=>chains.includes(chain))),state.count=count>state.count?count:state.count,state.page=page},async initializeExcludedWallets({ids}){const params={page:1,entries:ids.length,include:ids},{data}=await ApiController.fetchWallets(params);data&&data.forEach(wallet=>{state.excludedWallets.push({rdns:wallet.rdns,name:wallet.name})})},async searchWallet({search,badge}){const{includeWalletIds,excludeWalletIds}=_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.state,chains=_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.getRequestedCaipNetworkIds().join(",");state.search=[];const params={page:1,entries:100,search:search?.trim(),badge_type:badge,include:includeWalletIds,exclude:excludeWalletIds,chains},{data}=await ApiController.fetchWallets(params);_EventsController_js__WEBPACK_IMPORTED_MODULE_10__.E.sendEvent({type:"track",event:"SEARCH_WALLET",properties:{badge:badge??"",search:search??""}});const images=data.map(w=>w.image_id).filter(Boolean);await Promise.allSettled([...images.map(id=>ApiController._fetchWalletImage(id)),_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_3__.w.wait(300)]),state.search=ApiController._filterOutExtensions(data)},initPromise(key,fetchFn){const existingPromise=state.promises[key];return existingPromise||(state.promises[key]=fetchFn())},prefetch({fetchConnectorImages=!0,fetchFeaturedWallets=!0,fetchRecommendedWallets=!0,fetchNetworkImages=!0}={}){const promises=[fetchConnectorImages&&ApiController.initPromise("connectorImages",ApiController.fetchConnectorImages),fetchFeaturedWallets&&ApiController.initPromise("featuredWallets",ApiController.fetchFeaturedWallets),fetchRecommendedWallets&&ApiController.initPromise("recommendedWallets",ApiController.fetchRecommendedWallets),fetchNetworkImages&&ApiController.initPromise("networkImages",ApiController.fetchNetworkImages)].filter(Boolean);return Promise.allSettled(promises)},prefetchAnalyticsConfig(){_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.state.features?.analytics&&ApiController.fetchAnalyticsConfig()},async fetchAnalyticsConfig(){try{const{isAnalyticsEnabled}=await api.get({path:"/getAnalyticsConfig",params:ApiController._getSdkProperties()});_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.setFeatures({analytics:isAnalyticsEnabled})}catch(error){_OptionsController_js__WEBPACK_IMPORTED_MODULE_11__.H.setFeatures({analytics:!1})}},filterByNamespaces(namespaces){if(!namespaces?.length)return state.featured=state.allFeatured,void(state.recommended=state.allRecommended);const caipNetworkIds=_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.getRequestedCaipNetworkIds().join(",");state.featured=state.allFeatured.filter(wallet=>wallet.chains?.some(chain=>caipNetworkIds.includes(chain))),state.recommended=state.allRecommended.filter(wallet=>wallet.chains?.some(chain=>caipNetworkIds.includes(chain))),state.filteredWallets=state.wallets.filter(wallet=>wallet.chains?.some(chain=>caipNetworkIds.includes(chain)))},clearFilterByNamespaces(){state.filteredWallets=[]},setFilterByNamespace(namespace){if(!namespace)return state.featured=state.allFeatured,void(state.recommended=state.allRecommended);const caipNetworkIds=_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.getRequestedCaipNetworkIds().join(",");state.featured=state.allFeatured.filter(wallet=>wallet.chains?.some(chain=>caipNetworkIds.includes(chain))),state.recommended=state.allRecommended.filter(wallet=>wallet.chains?.some(chain=>caipNetworkIds.includes(chain))),state.filteredWallets=state.wallets.filter(wallet=>wallet.chains?.some(chain=>caipNetworkIds.includes(chain)))}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AssetController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{j:()=>AssetController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js");const state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({walletImages:{},networkImages:{},chainImages:{},connectorImages:{},tokenImages:{},currencyImages:{}}),controller={state,subscribeNetworkImages:callback=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.B1)(state.networkImages,()=>callback(state.networkImages)),subscribeKey:(key,callback)=>(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.u$)(state,key,callback),subscribe:callback=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.B1)(state,()=>callback(state)),setWalletImage(key,value){state.walletImages[key]=value},setNetworkImage(key,value){state.networkImages[key]=value},setChainImage(key,value){state.chainImages[key]=value},setConnectorImage(key,value){state.connectorImages={...state.connectorImages,[key]:value}},setTokenImage(key,value){state.tokenImages[key]=value},setCurrencyImage(key,value){state.currencyImages[key]=value}},AssetController=(0,_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_2__.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>BlockchainApiController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js"),_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),_utils_FetchUtil_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js"),_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js"),_AccountController_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),_ChainController_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),_SnackController_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js");const DEFAULT_OPTIONS={purchaseCurrencies:[{id:"2b92315d-eab7-5bef-84fa-089a131333f5",name:"USD Coin",symbol:"USDC",networks:[{name:"ethereum-mainnet",display_name:"Ethereum",chain_id:"1",contract_address:"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"},{name:"polygon-mainnet",display_name:"Polygon",chain_id:"137",contract_address:"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"}]},{id:"2b92315d-eab7-5bef-84fa-089a131333f5",name:"Ether",symbol:"ETH",networks:[{name:"ethereum-mainnet",display_name:"Ethereum",chain_id:"1",contract_address:"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"},{name:"polygon-mainnet",display_name:"Polygon",chain_id:"137",contract_address:"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"}]}],paymentCurrencies:[{id:"USD",payment_method_limits:[{id:"card",min:"10.00",max:"7500.00"},{id:"ach_bank_account",min:"10.00",max:"25000.00"}]},{id:"EUR",payment_method_limits:[{id:"card",min:"10.00",max:"7500.00"},{id:"ach_bank_account",min:"10.00",max:"25000.00"}]}]},baseUrl=_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__.w.getBlockchainApiUrl(),state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({clientId:null,api:new _utils_FetchUtil_js__WEBPACK_IMPORTED_MODULE_3__.Z({baseUrl,clientId:null}),supportedChains:{http:[],ws:[]}}),BlockchainApiController={state,async get(request){const{st,sv}=BlockchainApiController.getSdkProperties(),projectId=_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state.projectId,params={...request.params||{},st,sv,projectId};return state.api.get({...request,params})},getSdkProperties(){const{sdkType,sdkVersion}=_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state;return{st:sdkType||"unknown",sv:sdkVersion||"unknown"}},async isNetworkSupported(networkId){if(!networkId)return!1;try{state.supportedChains.http.length||await BlockchainApiController.getSupportedNetworks()}catch(e){return!1}return state.supportedChains.http.includes(networkId)},async getSupportedNetworks(){try{const supportedChains=await BlockchainApiController.get({path:"v1/supported-chains"});return state.supportedChains=supportedChains,supportedChains}catch{return state.supportedChains}},async fetchIdentity({address,caipNetworkId}){if(!await BlockchainApiController.isNetworkSupported(caipNetworkId))return{avatar:"",name:""};const identityCache=_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_4__.i.getIdentityFromCacheForAddress(address);if(identityCache)return identityCache;const result=await BlockchainApiController.get({path:`/v1/identity/${address}`,params:{sender:_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipAddress?_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__.w.getPlainAddress(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipAddress):void 0}});return _utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_4__.i.updateIdentityCache({address,identity:result,timestamp:Date.now()}),result},fetchTransactions:async({account,cursor,onramp,signal,cache,chainId})=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?BlockchainApiController.get({path:`/v1/account/${account}/history`,params:{cursor,onramp,chainId},signal,cache}):{data:[],next:void 0},fetchSwapQuote:async({amount,userAddress,from,to,gasPrice})=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?BlockchainApiController.get({path:"/v1/convert/quotes",headers:{"Content-Type":"application/json"},params:{amount,userAddress,from,to,gasPrice}}):{quotes:[]},fetchSwapTokens:async({chainId})=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?BlockchainApiController.get({path:"/v1/convert/tokens",params:{chainId}}):{tokens:[]},fetchTokenPrice:async({addresses})=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?state.api.post({path:"/v1/fungible/price",body:{currency:"usd",addresses,projectId:_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state.projectId},headers:{"Content-Type":"application/json"}}):{fungibles:[]},fetchSwapAllowance:async({tokenAddress,userAddress})=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?BlockchainApiController.get({path:"/v1/convert/allowance",params:{tokenAddress,userAddress},headers:{"Content-Type":"application/json"}}):{allowance:"0"},async fetchGasPrice({chainId}){const{st,sv}=BlockchainApiController.getSdkProperties();if(!await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId))throw new Error("Network not supported for Gas Price");return BlockchainApiController.get({path:"/v1/convert/gas-price",headers:{"Content-Type":"application/json"},params:{chainId,st,sv}})},async generateSwapCalldata({amount,from,to,userAddress,disableEstimate}){if(!await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId))throw new Error("Network not supported for Swaps");return state.api.post({path:"/v1/convert/build-transaction",headers:{"Content-Type":"application/json"},body:{amount,eip155:{slippage:_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__.oU.CONVERT_SLIPPAGE_TOLERANCE},projectId:_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state.projectId,from,to,userAddress,disableEstimate}})},async generateApproveCalldata({from,to,userAddress}){const{st,sv}=BlockchainApiController.getSdkProperties();if(!await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId))throw new Error("Network not supported for Swaps");return BlockchainApiController.get({path:"/v1/convert/build-approve",headers:{"Content-Type":"application/json"},params:{userAddress,from,to,st,sv}})},async getBalance(address,chainId,forceUpdate){const{st,sv}=BlockchainApiController.getSdkProperties();if(!await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId))return _SnackController_js__WEBPACK_IMPORTED_MODULE_8__.P.showError("Token Balance Unavailable"),{balances:[]};const caipAddress=`${chainId}:${address}`,cachedBalance=_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_4__.i.getBalanceCacheForCaipAddress(caipAddress);if(cachedBalance)return cachedBalance;const balance=await BlockchainApiController.get({path:`/v1/account/${address}/balance`,params:{currency:"usd",chainId,forceUpdate,st,sv}});return _utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_4__.i.updateBalanceCache({caipAddress,balance,timestamp:Date.now()}),balance},lookupEnsName:async name=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?BlockchainApiController.get({path:`/v1/profile/account/${name}`,params:{apiVersion:"2"}}):{addresses:{},attributes:[]},reverseLookupEnsName:async({address})=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?BlockchainApiController.get({path:`/v1/profile/reverse/${address}`,params:{sender:_AccountController_js__WEBPACK_IMPORTED_MODULE_5__.U.state.address,apiVersion:"2"}}):[],getEnsNameSuggestions:async name=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?BlockchainApiController.get({path:`/v1/profile/suggestions/${name}`,params:{zone:"reown.id"}}):{suggestions:[]},registerEnsName:async({coinType,address,message,signature})=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?state.api.post({path:"/v1/profile/account",body:{coin_type:coinType,address,message,signature},headers:{"Content-Type":"application/json"}}):{success:!1},async generateOnRampURL({destinationWallets,partnerUserId,defaultNetwork,purchaseAmount,paymentAmount}){if(!await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId))return"";return(await state.api.post({path:"/v1/generators/onrampurl",params:{projectId:_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state.projectId},body:{destinationWallets,defaultNetwork,partnerUserId,defaultExperience:"buy",presetCryptoAmount:purchaseAmount,presetFiatAmount:paymentAmount}})).url},async getOnrampOptions(){if(!await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId))return{paymentCurrencies:[],purchaseCurrencies:[]};try{return await BlockchainApiController.get({path:"/v1/onramp/options"})}catch(e){return DEFAULT_OPTIONS}},async getOnrampQuote({purchaseCurrency,paymentCurrency,amount,network}){try{if(!await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId))return null;return await state.api.post({path:"/v1/onramp/quote",params:{projectId:_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state.projectId},body:{purchaseCurrency,paymentCurrency,amount,network}})}catch(e){return{coinbaseFee:{amount,currency:paymentCurrency.id},networkFee:{amount,currency:paymentCurrency.id},paymentSubtotal:{amount,currency:paymentCurrency.id},paymentTotal:{amount,currency:paymentCurrency.id},purchaseAmount:{amount,currency:paymentCurrency.id},quoteId:"mocked-quote-id"}}},getSmartSessions:async caipAddress=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?BlockchainApiController.get({path:`/v1/sessions/${caipAddress}`}):[],revokeSmartSession:async(address,pci,signature)=>await BlockchainApiController.isNetworkSupported(_ChainController_js__WEBPACK_IMPORTED_MODULE_6__.W.state.activeCaipNetwork?.caipNetworkId)?state.api.post({path:`/v1/sessions/${address}/revoke`,params:{projectId:_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state.projectId},body:{pci,signature}}):{success:!1},setClientId(clientId){state.clientId=clientId,state.api=new _utils_FetchUtil_js__WEBPACK_IMPORTED_MODULE_3__.Z({baseUrl,clientId})}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>ChainController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/NetworkUtil.js"),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js"),_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js"),_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js"),_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),_AccountController_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),_ConnectionController_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js"),_ConnectorController_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),_EventsController_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js"),_ModalController_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js"),_OptionsController_js__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),_PublicStateController_js__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js"),_RouterController_js__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js"),_SendController_js__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SendController.js");const accountState={currentTab:0,tokenBalance:[],smartAccountDeployed:!1,addressLabels:new Map,allAccounts:[],user:void 0},networkState={caipNetwork:void 0,supportsAllNetworks:!0,smartAccountEnabledNetworks:[]},state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({chains:(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.zC)(),activeCaipAddress:void 0,activeChain:void 0,activeCaipNetwork:void 0,noAdapters:!1,universalAdapter:{networkControllerClient:void 0,connectionControllerClient:void 0},isSwitchingNamespace:!1}),controller={state,subscribe:callback=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.B1)(state,()=>{callback(state)}),subscribeKey:(key,callback)=>(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.u$)(state,key,callback),subscribeChainProp(property,callback,chain){let prev;return(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.B1)(state.chains,()=>{const activeChain=chain||state.activeChain;if(activeChain){const nextValue=state.chains.get(activeChain)?.[property];prev!==nextValue&&(prev=nextValue,callback(nextValue))}})},initialize(adapters,caipNetworks,clients){const{chainId:activeChainId,namespace:activeNamespace}=_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_6__.i.getActiveNetworkProps(),activeCaipNetwork=caipNetworks?.find(network=>network.id.toString()===activeChainId?.toString()),adapterToActivate=adapters.find(adapter=>adapter?.namespace===activeNamespace)||adapters?.[0],namespacesFromAdapters=adapters.map(a=>a.namespace).filter(n=>void 0!==n),namespaces=_OptionsController_js__WEBPACK_IMPORTED_MODULE_13__.H.state.enableEmbedded?new Set([...namespacesFromAdapters]):new Set([...caipNetworks?.map(network=>network.chainNamespace)??[]]);0!==adapters?.length&&adapterToActivate||(state.noAdapters=!0),state.noAdapters||(state.activeChain=adapterToActivate?.namespace,state.activeCaipNetwork=activeCaipNetwork,ChainController.setChainNetworkData(adapterToActivate?.namespace,{caipNetwork:activeCaipNetwork}),state.activeChain&&_PublicStateController_js__WEBPACK_IMPORTED_MODULE_14__.z.set({activeChain:adapterToActivate?.namespace})),namespaces.forEach(namespace=>{const namespaceNetworks=caipNetworks?.filter(network=>network.chainNamespace===namespace);ChainController.state.chains.set(namespace,{namespace,networkState:(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({...networkState,caipNetwork:namespaceNetworks?.[0]}),accountState:(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)(accountState),caipNetworks:namespaceNetworks??[],...clients}),ChainController.setRequestedCaipNetworks(namespaceNetworks??[],namespace)})},removeAdapter(namespace){if(state.activeChain===namespace){const nextAdapter=Array.from(state.chains.entries()).find(([chainNamespace])=>chainNamespace!==namespace);if(nextAdapter){const caipNetwork=nextAdapter[1]?.caipNetworks?.[0];caipNetwork&&ChainController.setActiveCaipNetwork(caipNetwork)}}state.chains.delete(namespace)},addAdapter(adapter,{networkControllerClient,connectionControllerClient},caipNetworks){state.chains.set(adapter.namespace,{namespace:adapter.namespace,networkState:{...networkState,caipNetwork:caipNetworks[0]},accountState,caipNetworks,connectionControllerClient,networkControllerClient}),ChainController.setRequestedCaipNetworks(caipNetworks?.filter(caipNetwork=>caipNetwork.chainNamespace===adapter.namespace)??[],adapter.namespace)},addNetwork(network){const chainAdapter=state.chains.get(network.chainNamespace);if(chainAdapter){const newNetworks=[...chainAdapter.caipNetworks||[]];chainAdapter.caipNetworks?.find(caipNetwork=>caipNetwork.id===network.id)||newNetworks.push(network),state.chains.set(network.chainNamespace,{...chainAdapter,caipNetworks:newNetworks}),ChainController.setRequestedCaipNetworks(newNetworks,network.chainNamespace),_ConnectorController_js__WEBPACK_IMPORTED_MODULE_10__.a.filterByNamespace(network.chainNamespace,!0)}},removeNetwork(namespace,networkId){const chainAdapter=state.chains.get(namespace);if(chainAdapter){const isActiveNetwork=state.activeCaipNetwork?.id===networkId,newCaipNetworksOfAdapter=[...chainAdapter.caipNetworks?.filter(network=>network.id!==networkId)||[]];isActiveNetwork&&chainAdapter?.caipNetworks?.[0]&&ChainController.setActiveCaipNetwork(chainAdapter.caipNetworks[0]),state.chains.set(namespace,{...chainAdapter,caipNetworks:newCaipNetworksOfAdapter}),ChainController.setRequestedCaipNetworks(newCaipNetworksOfAdapter||[],namespace),0===newCaipNetworksOfAdapter.length&&_ConnectorController_js__WEBPACK_IMPORTED_MODULE_10__.a.filterByNamespace(namespace,!1)}},setAdapterNetworkState(chain,props){const chainAdapter=state.chains.get(chain);chainAdapter&&(chainAdapter.networkState={...chainAdapter.networkState||networkState,...props},state.chains.set(chain,chainAdapter))},setChainAccountData(chain,accountProps,_unknown=!0){if(!chain)throw new Error("Chain is required to update chain account data");const chainAdapter=state.chains.get(chain);if(chainAdapter){const newAccountState={...chainAdapter.accountState||accountState,...accountProps};state.chains.set(chain,{...chainAdapter,accountState:newAccountState}),1!==state.chains.size&&state.activeChain!==chain||(accountProps.caipAddress&&(state.activeCaipAddress=accountProps.caipAddress),_AccountController_js__WEBPACK_IMPORTED_MODULE_8__.U.replaceState(newAccountState))}},setChainNetworkData(chain,networkProps){if(!chain)return;const chainAdapter=state.chains.get(chain);if(chainAdapter){const newNetworkState={...chainAdapter.networkState||networkState,...networkProps};state.chains.set(chain,{...chainAdapter,networkState:newNetworkState})}},setAccountProp(prop,value,chain,replaceState=!0){ChainController.setChainAccountData(chain,{[prop]:value},replaceState),"status"===prop&&"disconnected"===value&&chain&&_ConnectorController_js__WEBPACK_IMPORTED_MODULE_10__.a.removeConnectorId(chain)},setActiveNamespace(chain){state.activeChain=chain;const newAdapter=chain?state.chains.get(chain):void 0,caipNetwork=newAdapter?.networkState?.caipNetwork;caipNetwork?.id&&chain&&(state.activeCaipAddress=newAdapter?.accountState?.caipAddress,state.activeCaipNetwork=caipNetwork,ChainController.setChainNetworkData(chain,{caipNetwork}),_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_6__.i.setActiveCaipNetworkId(caipNetwork?.caipNetworkId),_PublicStateController_js__WEBPACK_IMPORTED_MODULE_14__.z.set({activeChain:chain,selectedNetworkId:caipNetwork?.caipNetworkId}))},setActiveCaipNetwork(caipNetwork){if(!caipNetwork)return;state.activeChain!==caipNetwork.chainNamespace&&ChainController.setIsSwitchingNamespace(!0);const newAdapter=state.chains.get(caipNetwork.chainNamespace);state.activeChain=caipNetwork.chainNamespace,state.activeCaipNetwork=caipNetwork,ChainController.setChainNetworkData(caipNetwork.chainNamespace,{caipNetwork}),state.activeCaipAddress=newAdapter?.accountState?.address?`${caipNetwork.chainNamespace}:${caipNetwork.id}:${newAdapter?.accountState?.address}`:void 0,ChainController.setAccountProp("caipAddress",state.activeCaipAddress,caipNetwork.chainNamespace),newAdapter&&_AccountController_js__WEBPACK_IMPORTED_MODULE_8__.U.replaceState(newAdapter.accountState),_SendController_js__WEBPACK_IMPORTED_MODULE_16__.R.resetSend(),_PublicStateController_js__WEBPACK_IMPORTED_MODULE_14__.z.set({activeChain:state.activeChain,selectedNetworkId:state.activeCaipNetwork?.caipNetworkId}),_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_6__.i.setActiveCaipNetworkId(caipNetwork.caipNetworkId);ChainController.checkIfSupportedNetwork(caipNetwork.chainNamespace)||!_OptionsController_js__WEBPACK_IMPORTED_MODULE_13__.H.state.enableNetworkSwitch||_OptionsController_js__WEBPACK_IMPORTED_MODULE_13__.H.state.allowUnsupportedChain||_ConnectionController_js__WEBPACK_IMPORTED_MODULE_9__.x.state.wcBasic||ChainController.showUnsupportedChainUI()},addCaipNetwork(caipNetwork){if(!caipNetwork)return;const chain=state.chains.get(caipNetwork.chainNamespace);chain&&chain?.caipNetworks?.push(caipNetwork)},async switchActiveNamespace(namespace){if(!namespace)return;const isDifferentChain=namespace!==ChainController.state.activeChain,caipNetworkOfNamespace=ChainController.getNetworkData(namespace)?.caipNetwork,firstNetworkWithChain=ChainController.getCaipNetworkByNamespace(namespace,caipNetworkOfNamespace?.id);isDifferentChain&&firstNetworkWithChain&&await ChainController.switchActiveNetwork(firstNetworkWithChain)},async switchActiveNetwork(network){const activeAdapter=ChainController.state.chains.get(ChainController.state.activeChain),unsupportedNetwork=!activeAdapter?.caipNetworks?.some(caipNetwork=>caipNetwork.id===state.activeCaipNetwork?.id),networkControllerClient=ChainController.getNetworkControllerClient(network.chainNamespace);if(networkControllerClient){try{await networkControllerClient.switchCaipNetwork(network),unsupportedNetwork&&_ModalController_js__WEBPACK_IMPORTED_MODULE_12__.W.close()}catch(error){_RouterController_js__WEBPACK_IMPORTED_MODULE_15__.I.goBack()}_EventsController_js__WEBPACK_IMPORTED_MODULE_11__.E.sendEvent({type:"track",event:"SWITCH_NETWORK",properties:{network:network.caipNetworkId}})}},getNetworkControllerClient(chainNamespace){const chain=chainNamespace||state.activeChain,chainAdapter=state.chains.get(chain);if(!chainAdapter)throw new Error("Chain adapter not found");if(!chainAdapter.networkControllerClient)throw new Error("NetworkController client not set");return chainAdapter.networkControllerClient},getConnectionControllerClient(_chain){const chain=_chain||state.activeChain;if(!chain)throw new Error("Chain is required to get connection controller client");const chainAdapter=state.chains.get(chain);if(!chainAdapter?.connectionControllerClient)throw new Error("ConnectionController client not set");return chainAdapter.connectionControllerClient},getAccountProp(key,_chain){let chain=state.activeChain;if(_chain&&(chain=_chain),!chain)return;const chainAccountState=state.chains.get(chain)?.accountState;return chainAccountState?chainAccountState[key]:void 0},getNetworkProp(key,namespace){const chainNetworkState=state.chains.get(namespace)?.networkState;if(chainNetworkState)return chainNetworkState[key]},getRequestedCaipNetworks(chainToFilter){const adapter=state.chains.get(chainToFilter),{approvedCaipNetworkIds=[],requestedCaipNetworks=[]}=adapter?.networkState||{};return _utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_5__.w.sortRequestedNetworks(approvedCaipNetworkIds,requestedCaipNetworks)},getAllRequestedCaipNetworks(){const requestedCaipNetworks=[];return state.chains.forEach(chainAdapter=>{const caipNetworks=ChainController.getRequestedCaipNetworks(chainAdapter.namespace);requestedCaipNetworks.push(...caipNetworks)}),requestedCaipNetworks},setRequestedCaipNetworks(caipNetworks,chain){ChainController.setAdapterNetworkState(chain,{requestedCaipNetworks:caipNetworks});const namespaces=ChainController.getAllRequestedCaipNetworks().map(network=>network.chainNamespace),uniqueNamespaces=Array.from(new Set(namespaces));_ConnectorController_js__WEBPACK_IMPORTED_MODULE_10__.a.filterByNamespaces(uniqueNamespaces)},getAllApprovedCaipNetworkIds(){const approvedCaipNetworkIds=[];return state.chains.forEach(chainAdapter=>{const approvedIds=ChainController.getApprovedCaipNetworkIds(chainAdapter.namespace);approvedCaipNetworkIds.push(...approvedIds)}),approvedCaipNetworkIds},getActiveCaipNetwork:()=>state.activeCaipNetwork,getActiveCaipAddress:()=>state.activeCaipAddress,getApprovedCaipNetworkIds(namespace){const adapter=state.chains.get(namespace);return adapter?.networkState?.approvedCaipNetworkIds||[]},async setApprovedCaipNetworksData(namespace){const networkControllerClient=ChainController.getNetworkControllerClient(),data=await(networkControllerClient?.getApprovedCaipNetworksData());ChainController.setAdapterNetworkState(namespace,{approvedCaipNetworkIds:data?.approvedCaipNetworkIds,supportsAllNetworks:data?.supportsAllNetworks})},checkIfSupportedNetwork(namespace,caipNetwork){const activeCaipNetwork=caipNetwork||state.activeCaipNetwork,requestedCaipNetworks=ChainController.getRequestedCaipNetworks(namespace);return!requestedCaipNetworks.length||requestedCaipNetworks?.some(network=>network.id===activeCaipNetwork?.id)},checkIfSupportedChainId(chainId){if(!state.activeChain)return!0;const requestedCaipNetworks=ChainController.getRequestedCaipNetworks(state.activeChain);return requestedCaipNetworks?.some(network=>network.id===chainId)},setSmartAccountEnabledNetworks(smartAccountEnabledNetworks,chain){ChainController.setAdapterNetworkState(chain,{smartAccountEnabledNetworks})},checkIfSmartAccountEnabled(){const networkId=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_2__.L.caipNetworkIdToNumber(state.activeCaipNetwork?.caipNetworkId),activeChain=state.activeChain;if(!activeChain||!networkId)return!1;const smartAccountEnabledNetworks=ChainController.getNetworkProp("smartAccountEnabledNetworks",activeChain);return Boolean(smartAccountEnabledNetworks?.includes(Number(networkId)))},getActiveNetworkTokenAddress(){const namespace=state.activeCaipNetwork?.chainNamespace||"eip155";return`${namespace}:${state.activeCaipNetwork?.id||1}:${_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_4__.oU.NATIVE_TOKEN_ADDRESS[namespace]}`},showUnsupportedChainUI(){_ModalController_js__WEBPACK_IMPORTED_MODULE_12__.W.open({view:"UnsupportedChain"})},checkIfNamesSupported(){const activeCaipNetwork=state.activeCaipNetwork;return Boolean(activeCaipNetwork?.chainNamespace&&_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_4__.oU.NAMES_SUPPORTED_CHAIN_NAMESPACES.includes(activeCaipNetwork.chainNamespace))},resetNetwork(namespace){ChainController.setAdapterNetworkState(namespace,{approvedCaipNetworkIds:void 0,supportsAllNetworks:!0,smartAccountEnabledNetworks:[]})},resetAccount(chain){const chainToWrite=chain;if(!chainToWrite)throw new Error("Chain is required to set account prop");state.activeCaipAddress=void 0,ChainController.setChainAccountData(chainToWrite,{smartAccountDeployed:!1,currentTab:0,caipAddress:void 0,address:void 0,balance:void 0,balanceSymbol:void 0,profileName:void 0,profileImage:void 0,addressExplorerUrl:void 0,tokenBalance:[],connectedWalletInfo:void 0,preferredAccountTypes:void 0,socialProvider:void 0,socialWindow:void 0,farcasterUrl:void 0,allAccounts:[],user:void 0,status:"disconnected"}),_ConnectorController_js__WEBPACK_IMPORTED_MODULE_10__.a.removeConnectorId(chainToWrite)},setIsSwitchingNamespace(isSwitchingNamespace){state.isSwitchingNamespace=isSwitchingNamespace},getFirstCaipNetworkSupportsAuthConnector(){const availableChains=[];let firstCaipNetwork;if(state.chains.forEach(chain=>{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_3__.o.AUTH_CONNECTOR_SUPPORTED_CHAINS.find(ns=>ns===chain.namespace)&&chain.namespace&&availableChains.push(chain.namespace)}),availableChains.length>0){const firstAvailableChain=availableChains[0];return firstCaipNetwork=firstAvailableChain?state.chains.get(firstAvailableChain)?.caipNetworks?.[0]:void 0,firstCaipNetwork}},getAccountData:chainNamespace=>chainNamespace?ChainController.state.chains.get(chainNamespace)?.accountState:_AccountController_js__WEBPACK_IMPORTED_MODULE_8__.U.state,getNetworkData(chainNamespace){const namespace=chainNamespace||state.activeChain;if(namespace)return ChainController.state.chains.get(namespace)?.networkState},getCaipNetworkByNamespace(chainNamespace,chainId){if(!chainNamespace)return;const chain=ChainController.state.chains.get(chainNamespace),byChainId=chain?.caipNetworks?.find(network=>network.id===chainId);return byChainId||(chain?.networkState?.caipNetwork||chain?.caipNetworks?.[0])},getRequestedCaipNetworkIds(){const namespace=_ConnectorController_js__WEBPACK_IMPORTED_MODULE_10__.a.state.filterByNamespace;return(namespace?[state.chains.get(namespace)]:Array.from(state.chains.values())).flatMap(chain=>chain?.caipNetworks||[]).map(caipNetwork=>caipNetwork.caipNetworkId)},getCaipNetworks:namespace=>namespace?ChainController.getRequestedCaipNetworks(namespace):ChainController.getAllRequestedCaipNetworks()},ChainController=(0,_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_7__.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{x:()=>ConnectionController});var vanilla=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),utils=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),CoreHelperUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),StorageUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js"),withErrorBoundary=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),AccountController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),ChainController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),ConnectorController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),EventsController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js"),ModalController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js"),RouterController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js"),W3mFrameConstants=__webpack_require__("./node_modules/@reown/appkit-controllers/node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js"),BlockchainApiController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js"),OptionsController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),SnackController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js");const state=(0,vanilla.BX)({transactions:[],coinbaseTransactions:{},transactionsByYear:{},lastNetworkInView:void 0,loading:!1,empty:!1,next:void 0}),controller={state,subscribe:callback=>(0,vanilla.B1)(state,()=>callback(state)),setLastNetworkInView(lastNetworkInView){state.lastNetworkInView=lastNetworkInView},async fetchTransactions(accountAddress,onramp){if(!accountAddress)throw new Error("Transactions can't be fetched without an accountAddress");state.loading=!0;try{const response=await BlockchainApiController.T.fetchTransactions({account:accountAddress,cursor:state.next,onramp,cache:"coinbase"===onramp?"no-cache":void 0,chainId:ChainController.W.state.activeCaipNetwork?.caipNetworkId}),nonSpamTransactions=TransactionsController.filterSpamTransactions(response.data),sameChainTransactions=TransactionsController.filterByConnectedChain(nonSpamTransactions),filteredTransactions=[...state.transactions,...sameChainTransactions];state.loading=!1,"coinbase"===onramp?state.coinbaseTransactions=TransactionsController.groupTransactionsByYearAndMonth(state.coinbaseTransactions,response.data):(state.transactions=filteredTransactions,state.transactionsByYear=TransactionsController.groupTransactionsByYearAndMonth(state.transactionsByYear,sameChainTransactions)),state.empty=0===filteredTransactions.length,state.next=response.next?response.next:void 0}catch(error){const activeChainNamespace=ChainController.W.state.activeChain;EventsController.E.sendEvent({type:"track",event:"ERROR_FETCH_TRANSACTIONS",properties:{address:accountAddress,projectId:OptionsController.H.state.projectId,cursor:state.next,isSmartAccount:AccountController.U.state.preferredAccountTypes?.[activeChainNamespace]===W3mFrameConstants.Vl.ACCOUNT_TYPES.SMART_ACCOUNT}}),SnackController.P.showError("Failed to fetch transactions"),state.loading=!1,state.empty=!0,state.next=void 0}},groupTransactionsByYearAndMonth(transactionsMap={},transactions=[]){const grouped=transactionsMap;return transactions.forEach(transaction=>{const year=new Date(transaction.metadata.minedAt).getFullYear(),month=new Date(transaction.metadata.minedAt).getMonth(),yearTransactions=grouped[year]??{},newMonthTransactions=(yearTransactions[month]??[]).filter(tx=>tx.id!==transaction.id);grouped[year]={...yearTransactions,[month]:[...newMonthTransactions,transaction].sort((a,b)=>new Date(b.metadata.minedAt).getTime()-new Date(a.metadata.minedAt).getTime())}}),grouped},filterSpamTransactions:transactions=>transactions.filter(transaction=>!transaction.transfers.every(transfer=>!0===transfer.nft_info?.flags.is_spam)),filterByConnectedChain(transactions){const chainId=ChainController.W.state.activeCaipNetwork?.caipNetworkId;return transactions.filter(transaction=>transaction.metadata.chain===chainId)},clearCursor(){state.next=void 0},resetTransactions(){state.transactions=[],state.transactionsByYear={},state.lastNetworkInView=void 0,state.loading=!1,state.empty=!1,state.next=void 0}},TransactionsController=(0,withErrorBoundary.X)(controller,"API_ERROR");var console=__webpack_require__("./node_modules/console-browserify/index.js");const ConnectionController_state=(0,vanilla.BX)({connections:new Map,wcError:!1,buffering:!1,status:"disconnected"});let wcConnectionPromise;const ConnectionController_controller={state:ConnectionController_state,subscribeKey:(key,callback)=>(0,utils.u$)(ConnectionController_state,key,callback),_getClient:()=>ConnectionController_state._client,setClient(client){ConnectionController_state._client=(0,vanilla.KR)(client)},async connectWalletConnect(){if(CoreHelperUtil.w.isTelegram()||CoreHelperUtil.w.isSafari()&&CoreHelperUtil.w.isIos()){if(wcConnectionPromise)return await wcConnectionPromise,void(wcConnectionPromise=void 0);if(!CoreHelperUtil.w.isPairingExpired(ConnectionController_state?.wcPairingExpiry)){const link=ConnectionController_state.wcUri;return void(ConnectionController_state.wcUri=link)}wcConnectionPromise=ConnectionController._getClient()?.connectWalletConnect?.().catch(()=>{}),ConnectionController.state.status="connecting",await wcConnectionPromise,wcConnectionPromise=void 0,ConnectionController_state.wcPairingExpiry=void 0,ConnectionController.state.status="connected"}else await(ConnectionController._getClient()?.connectWalletConnect?.())},async connectExternal(options,chain,setChain=!0){await(ConnectionController._getClient()?.connectExternal?.(options)),setChain&&ChainController.W.setActiveNamespace(chain)},async reconnectExternal(options){await(ConnectionController._getClient()?.reconnectExternal?.(options));const namespace=options.chain||ChainController.W.state.activeChain;namespace&&ConnectorController.a.setConnectorId(options.id,namespace)},async setPreferredAccountType(accountType,namespace){ModalController.W.setLoading(!0,ChainController.W.state.activeChain);const authConnector=ConnectorController.a.getAuthConnector();authConnector&&(AccountController.U.setPreferredAccountType(accountType,namespace),await authConnector.provider.setPreferredAccount(accountType),StorageUtil.i.setPreferredAccountTypes(AccountController.U.state.preferredAccountTypes??{[namespace]:accountType}),await ConnectionController.reconnectExternal(authConnector),ModalController.W.setLoading(!1,ChainController.W.state.activeChain),EventsController.E.sendEvent({type:"track",event:"SET_PREFERRED_ACCOUNT_TYPE",properties:{accountType,network:ChainController.W.state.activeCaipNetwork?.caipNetworkId||""}}))},signMessage:async message=>ConnectionController._getClient()?.signMessage(message),parseUnits:(value,decimals)=>ConnectionController._getClient()?.parseUnits(value,decimals),formatUnits:(value,decimals)=>ConnectionController._getClient()?.formatUnits(value,decimals),sendTransaction:async args=>ConnectionController._getClient()?.sendTransaction(args),getCapabilities:async params=>ConnectionController._getClient()?.getCapabilities(params),grantPermissions:async params=>ConnectionController._getClient()?.grantPermissions(params),walletGetAssets:async params=>ConnectionController._getClient()?.walletGetAssets(params)??{},estimateGas:async args=>ConnectionController._getClient()?.estimateGas(args),writeContract:async args=>ConnectionController._getClient()?.writeContract(args),getEnsAddress:async value=>ConnectionController._getClient()?.getEnsAddress(value),getEnsAvatar:async value=>ConnectionController._getClient()?.getEnsAvatar(value),checkInstalled:ids=>ConnectionController._getClient()?.checkInstalled?.(ids)||!1,resetWcConnection(){ConnectionController_state.wcUri=void 0,ConnectionController_state.wcPairingExpiry=void 0,ConnectionController_state.wcLinking=void 0,ConnectionController_state.recentWallet=void 0,ConnectionController_state.status="disconnected",TransactionsController.resetTransactions(),StorageUtil.i.deleteWalletConnectDeepLink()},resetUri(){ConnectionController_state.wcUri=void 0,ConnectionController_state.wcPairingExpiry=void 0,wcConnectionPromise=void 0},finalizeWcConnection(){const{wcLinking,recentWallet}=ConnectionController.state;wcLinking&&StorageUtil.i.setWalletConnectDeepLink(wcLinking),recentWallet&&StorageUtil.i.setAppKitRecent(recentWallet),EventsController.E.sendEvent({type:"track",event:"CONNECT_SUCCESS",properties:{method:wcLinking?"mobile":"qrcode",name:RouterController.I.state.data?.wallet?.name||"Unknown"}})},setWcBasic(wcBasic){ConnectionController_state.wcBasic=wcBasic},setUri(uri){ConnectionController_state.wcUri=uri,ConnectionController_state.wcPairingExpiry=CoreHelperUtil.w.getPairingExpiry()},setWcLinking(wcLinking){ConnectionController_state.wcLinking=wcLinking},setWcError(wcError){ConnectionController_state.wcError=wcError,ConnectionController_state.buffering=!1},setRecentWallet(wallet){ConnectionController_state.recentWallet=wallet},setBuffering(buffering){ConnectionController_state.buffering=buffering},setStatus(status){ConnectionController_state.status=status},async disconnect(namespace){try{await(ConnectionController._getClient()?.disconnect(namespace))}catch(error){throw new withErrorBoundary.A("Failed to disconnect","INTERNAL_SDK_ERROR",error)}},setConnections(connections,chainNamespace){ConnectionController_state.connections.set(chainNamespace,connections)},switchAccount({connection,address,namespace}){if(ConnectorController.a.state.activeConnectorIds[namespace]===connection.connectorId){const currentNetwork=ChainController.W.state.activeCaipNetwork;if(currentNetwork){const caipAddress=`${namespace}:${currentNetwork.id}:${address}`;AccountController.U.setCaipAddress(caipAddress,namespace)}else console.warn(`No current network found for namespace "${namespace}"`)}else{const connector=ConnectorController.a.getConnector(connection.connectorId);connector?ConnectionController.connectExternal(connector,namespace):console.warn(`No connector found for namespace "${namespace}"`)}}},ConnectionController=(0,withErrorBoundary.X)(ConnectionController_controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>ConnectorController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js"),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js"),_utils_MobileWallet_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/MobileWallet.js"),_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js"),_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),_ApiController_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js"),_ChainController_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),_OptionsController_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),_RouterController_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js"),_ThemeController_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ThemeController.js");const defaultActiveConnectors={eip155:void 0,solana:void 0,polkadot:void 0,bip122:void 0,cosmos:void 0},state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({allConnectors:[],connectors:[],activeConnector:void 0,filterByNamespace:void 0,activeConnectorIds:{...defaultActiveConnectors},filterByNamespaceMap:{eip155:!0,solana:!0,polkadot:!0,bip122:!0,cosmos:!0}}),controller={state,subscribe:callback=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.B1)(state,()=>{callback(state)}),subscribeKey:(key,callback)=>(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.u$)(state,key,callback),initialize(namespaces){namespaces.forEach(namespace=>{const connectorId=_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_5__.i.getConnectedConnectorId(namespace);connectorId&&ConnectorController.setConnectorId(connectorId,namespace)})},setActiveConnector(connector){connector&&(state.activeConnector=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.KR)(connector))},setConnectors(connectors){connectors.filter(newConnector=>!state.allConnectors.some(existingConnector=>existingConnector.id===newConnector.id&&ConnectorController.getConnectorName(existingConnector.name)===ConnectorController.getConnectorName(newConnector.name)&&existingConnector.chain===newConnector.chain)).forEach(connector=>{"MULTI_CHAIN"!==connector.type&&state.allConnectors.push((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.KR)(connector))});const enabledNamespaces=ConnectorController.getEnabledNamespaces(),connectorsFilteredByNamespaces=ConnectorController.getEnabledConnectors(enabledNamespaces);state.connectors=ConnectorController.mergeMultiChainConnectors(connectorsFilteredByNamespaces)},filterByNamespaces(enabledNamespaces){Object.keys(state.filterByNamespaceMap).forEach(namespace=>{state.filterByNamespaceMap[namespace]=!1}),enabledNamespaces.forEach(namespace=>{state.filterByNamespaceMap[namespace]=!0}),ConnectorController.updateConnectorsForEnabledNamespaces()},filterByNamespace(namespace,enabled){state.filterByNamespaceMap[namespace]=enabled,ConnectorController.updateConnectorsForEnabledNamespaces()},updateConnectorsForEnabledNamespaces(){const enabledNamespaces=ConnectorController.getEnabledNamespaces(),enabledConnectors=ConnectorController.getEnabledConnectors(enabledNamespaces),areAllNamespacesEnabled=ConnectorController.areAllNamespacesEnabled();state.connectors=ConnectorController.mergeMultiChainConnectors(enabledConnectors),areAllNamespacesEnabled?_ApiController_js__WEBPACK_IMPORTED_MODULE_7__.N.clearFilterByNamespaces():_ApiController_js__WEBPACK_IMPORTED_MODULE_7__.N.filterByNamespaces(enabledNamespaces)},getEnabledNamespaces:()=>Object.entries(state.filterByNamespaceMap).filter(([_,enabled])=>enabled).map(([namespace])=>namespace),getEnabledConnectors:enabledNamespaces=>state.allConnectors.filter(connector=>enabledNamespaces.includes(connector.chain)),areAllNamespacesEnabled:()=>Object.values(state.filterByNamespaceMap).every(enabled=>enabled),mergeMultiChainConnectors(connectors){const connectorsByNameMap=ConnectorController.generateConnectorMapByName(connectors),mergedConnectors=[];return connectorsByNameMap.forEach(keyConnectors=>{const firstItem=keyConnectors[0],isAuthConnector=firstItem?.id===_reown_appkit_common__WEBPACK_IMPORTED_MODULE_2__.o.CONNECTOR_ID.AUTH;keyConnectors.length>1&&firstItem?mergedConnectors.push({name:firstItem.name,imageUrl:firstItem.imageUrl,imageId:firstItem.imageId,connectors:[...keyConnectors],type:isAuthConnector?"AUTH":"MULTI_CHAIN",chain:"eip155",id:firstItem?.id||""}):firstItem&&mergedConnectors.push(firstItem)}),mergedConnectors},generateConnectorMapByName(connectors){const connectorsByNameMap=new Map;return connectors.forEach(connector=>{const{name}=connector,connectorName=ConnectorController.getConnectorName(name);if(!connectorName)return;const connectorsByName=connectorsByNameMap.get(connectorName)||[];connectorsByName.find(c=>c.chain===connector.chain)||connectorsByName.push(connector),connectorsByNameMap.set(connectorName,connectorsByName)}),connectorsByNameMap},getConnectorName(name){if(!name)return name;return{"Trust Wallet":"Trust"}[name]||name},getUniqueConnectorsByName(connectors){const uniqueConnectors=[];return connectors.forEach(c=>{uniqueConnectors.find(uc=>uc.chain===c.chain)||uniqueConnectors.push(c)}),uniqueConnectors},addConnector(connector){if(connector.id===_reown_appkit_common__WEBPACK_IMPORTED_MODULE_2__.o.CONNECTOR_ID.AUTH){const authConnector=connector,optionsState=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.P9)(_OptionsController_js__WEBPACK_IMPORTED_MODULE_9__.H.state),themeMode=_ThemeController_js__WEBPACK_IMPORTED_MODULE_11__.W.getSnapshot().themeMode,themeVariables=_ThemeController_js__WEBPACK_IMPORTED_MODULE_11__.W.getSnapshot().themeVariables;authConnector?.provider?.syncDappData?.({metadata:optionsState.metadata,sdkVersion:optionsState.sdkVersion,projectId:optionsState.projectId,sdkType:optionsState.sdkType}),authConnector?.provider?.syncTheme({themeMode,themeVariables,w3mThemeVariables:(0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_3__.o)(themeVariables,themeMode)}),ConnectorController.setConnectors([connector])}else ConnectorController.setConnectors([connector])},getAuthConnector(chainNamespace){const activeNamespace=chainNamespace||_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.state.activeChain,authConnector=state.connectors.find(c=>c.id===_reown_appkit_common__WEBPACK_IMPORTED_MODULE_2__.o.CONNECTOR_ID.AUTH);if(authConnector){if(authConnector?.connectors?.length){return authConnector.connectors.find(c=>c.chain===activeNamespace)}return authConnector}},getAnnouncedConnectorRdns:()=>state.connectors.filter(c=>"ANNOUNCED"===c.type).map(c=>c.info?.rdns),getConnectorById:id=>state.allConnectors.find(c=>c.id===id),getConnector:(id,rdns)=>state.allConnectors.filter(c=>c.chain===_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.state.activeChain).find(c=>c.explorerId===id||c.info?.rdns===rdns),syncIfAuthConnector(connector){if("ID_AUTH"!==connector.id)return;const authConnector=connector,optionsState=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.P9)(_OptionsController_js__WEBPACK_IMPORTED_MODULE_9__.H.state),themeMode=_ThemeController_js__WEBPACK_IMPORTED_MODULE_11__.W.getSnapshot().themeMode,themeVariables=_ThemeController_js__WEBPACK_IMPORTED_MODULE_11__.W.getSnapshot().themeVariables;authConnector?.provider?.syncDappData?.({metadata:optionsState.metadata,sdkVersion:optionsState.sdkVersion,sdkType:optionsState.sdkType,projectId:optionsState.projectId}),authConnector.provider.syncTheme({themeMode,themeVariables,w3mThemeVariables:(0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_3__.o)(themeVariables,themeMode)})},getConnectorsByNamespace(namespace){const namespaceConnectors=state.allConnectors.filter(connector=>connector.chain===namespace);return ConnectorController.mergeMultiChainConnectors(namespaceConnectors)},selectWalletConnector(wallet){const connector=ConnectorController.getConnector(wallet.id,wallet.rdns),namespace=_ChainController_js__WEBPACK_IMPORTED_MODULE_8__.W.state.activeChain;_utils_MobileWallet_js__WEBPACK_IMPORTED_MODULE_4__.W.handleMobileDeeplinkRedirect(connector?.explorerId||wallet.id,namespace),connector?_RouterController_js__WEBPACK_IMPORTED_MODULE_10__.I.push("ConnectingExternal",{connector}):_RouterController_js__WEBPACK_IMPORTED_MODULE_10__.I.push("ConnectingWalletConnect",{wallet})},getConnectors:namespace=>namespace?ConnectorController.getConnectorsByNamespace(namespace):ConnectorController.mergeMultiChainConnectors(state.allConnectors),setFilterByNamespace(namespace){state.filterByNamespace=namespace,state.connectors=ConnectorController.getConnectors(namespace),_ApiController_js__WEBPACK_IMPORTED_MODULE_7__.N.setFilterByNamespace(namespace)},setConnectorId(connectorId,namespace){connectorId&&(state.activeConnectorIds={...state.activeConnectorIds,[namespace]:connectorId},_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_5__.i.setConnectedConnectorId(namespace,connectorId))},removeConnectorId(namespace){state.activeConnectorIds={...state.activeConnectorIds,[namespace]:void 0},_utils_StorageUtil_js__WEBPACK_IMPORTED_MODULE_5__.i.deleteConnectedConnectorId(namespace)},getConnectorId(namespace){if(namespace)return state.activeConnectorIds[namespace]},isConnected:namespace=>namespace?Boolean(state.activeConnectorIds[namespace]):Object.values(state.activeConnectorIds).some(id=>Boolean(id)),resetConnectorIds(){state.activeConnectorIds={...defaultActiveConnectors}}},ConnectorController=(0,_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_6__.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{E:()=>EventsController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js"),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/SafeLocalStorage.js"),_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),_utils_FetchUtil_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js"),_AccountController_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),_AlertController_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js"),_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js");const baseUrl=_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_3__.w.getAnalyticsUrl(),api=new _utils_FetchUtil_js__WEBPACK_IMPORTED_MODULE_4__.Z({baseUrl,clientId:null}),excluded=["MODAL_CREATED"],state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({timestamp:Date.now(),reportedErrors:{},data:{type:"track",event:"MODAL_CREATED"}}),EventsController={state,subscribe:callback=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.B1)(state,()=>callback(state)),getSdkProperties(){const{projectId,sdkType,sdkVersion}=_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state;return{projectId,st:sdkType,sv:sdkVersion||"html-wagmi-4.2.2"}},async _sendAnalyticsEvent(payload){try{const address=_AccountController_js__WEBPACK_IMPORTED_MODULE_5__.U.state.address;if(excluded.includes(payload.data.event)||"undefined"==typeof window)return;await api.post({path:"/e",params:EventsController.getSdkProperties(),body:{eventId:_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_3__.w.getUUID(),url:window.location.href,domain:window.location.hostname,timestamp:payload.timestamp,props:{...payload.data,address}}}),state.reportedErrors.FORBIDDEN=!1}catch(err){err instanceof Error&&err.cause instanceof Response&&err.cause.status===_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__.o.HTTP_STATUS_CODES.FORBIDDEN&&!state.reportedErrors.FORBIDDEN&&(_AlertController_js__WEBPACK_IMPORTED_MODULE_6__.h.open({shortMessage:"Invalid App Configuration",longMessage:`Origin ${(0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_2__.IP)()?window.origin:"uknown"} not found on Allowlist - update configuration on cloud.reown.com`},"error"),state.reportedErrors.FORBIDDEN=!0)}},sendEvent(data){state.timestamp=Date.now(),state.data=data,_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state.features?.analytics&&EventsController._sendAnalyticsEvent(state)}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>ModalController});var vanilla=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),utils=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),CoreHelperUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),ConstantsUtil=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js"),AccountController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),ChainController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),ConnectorController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),RouterController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js");const NetworkUtil={onSwitchNetwork({network,ignoreSwitchConfirmation=!1}){const currentNetwork=ChainController.W.state.activeCaipNetwork,routerData=RouterController.I.state.data;if(network.id===currentNetwork?.id)return;const isCurrentNamespaceConnected=AccountController.U.getCaipAddress(ChainController.W.state.activeChain),isDifferentNamespace=network.chainNamespace!==ChainController.W.state.activeChain,isNextNamespaceConnected=AccountController.U.getCaipAddress(network.chainNamespace),isConnectedWithAuth=ConnectorController.a.getConnectorId(ChainController.W.state.activeChain)===ConstantsUtil.o.CONNECTOR_ID.AUTH,isSupportedForAuthConnector=ConstantsUtil.o.AUTH_CONNECTOR_SUPPORTED_CHAINS.find(c=>c===network.chainNamespace);ignoreSwitchConfirmation||isConnectedWithAuth&&isSupportedForAuthConnector?RouterController.I.push("SwitchNetwork",{...routerData,network}):isCurrentNamespaceConnected&&isDifferentNamespace&&!isNextNamespaceConnected?RouterController.I.push("SwitchActiveChain",{switchToChain:network.chainNamespace,navigateTo:"Connect",navigateWithReplace:!0,network}):RouterController.I.push("SwitchNetwork",{...routerData,network})}};var withErrorBoundary=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),ApiController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js"),ConnectionController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js"),EventsController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js"),OptionsController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),PublicStateController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js");const state=(0,vanilla.BX)({loading:!1,loadingNamespaceMap:new Map,open:!1,shake:!1,namespace:void 0}),controller={state,subscribe:callback=>(0,vanilla.B1)(state,()=>callback(state)),subscribeKey:(key,callback)=>(0,utils.u$)(state,key,callback),async open(options){const isConnected="connected"===AccountController.U.state.status,namespace=options?.namespace,currentNamespace=ChainController.W.state.activeChain,isSwitchingNamespace=namespace&&namespace!==currentNamespace,caipAddress=ChainController.W.getAccountData(options?.namespace)?.caipAddress;if(ConnectionController.x.state.wcBasic?ApiController.N.prefetch({fetchNetworkImages:!1,fetchConnectorImages:!1}):await ApiController.N.prefetch({fetchConnectorImages:!isConnected,fetchFeaturedWallets:!isConnected,fetchRecommendedWallets:!isConnected}),ConnectorController.a.setFilterByNamespace(options?.namespace),ModalController.setLoading(!0,namespace),namespace&&isSwitchingNamespace){const namespaceNetwork=ChainController.W.getNetworkData(namespace)?.caipNetwork||ChainController.W.getRequestedCaipNetworks(namespace)[0];namespaceNetwork&&NetworkUtil.onSwitchNetwork({network:namespaceNetwork,ignoreSwitchConfirmation:!0})}else{const hasNoAdapters=ChainController.W.state.noAdapters;OptionsController.H.state.manualWCControl||hasNoAdapters&&!caipAddress?CoreHelperUtil.w.isMobile()?RouterController.I.reset("AllWallets"):RouterController.I.reset("ConnectingWalletConnectBasic"):options?.view?RouterController.I.reset(options.view,options.data):caipAddress?RouterController.I.reset("Account"):RouterController.I.reset("Connect")}state.open=!0,PublicStateController.z.set({open:!0}),EventsController.E.sendEvent({type:"track",event:"MODAL_OPEN",properties:{connected:Boolean(caipAddress)}})},close(){const isEmbeddedEnabled=OptionsController.H.state.enableEmbedded,isConnected=Boolean(ChainController.W.state.activeCaipAddress);state.open&&EventsController.E.sendEvent({type:"track",event:"MODAL_CLOSE",properties:{connected:isConnected}}),state.open=!1,RouterController.I.reset("Connect"),ModalController.clearLoading(),isEmbeddedEnabled?isConnected?RouterController.I.replace("Account"):RouterController.I.push("Connect"):PublicStateController.z.set({open:!1}),ConnectionController.x.resetUri()},setLoading(loading,namespace){namespace&&state.loadingNamespaceMap.set(namespace,loading),state.loading=loading,PublicStateController.z.set({loading})},clearLoading(){state.loadingNamespaceMap.clear(),state.loading=!1},shake(){state.shake||(state.shake=!0,setTimeout(()=>{state.shake=!1},500))}},ModalController=(0,withErrorBoundary.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{H:()=>OptionsController});var vanilla=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),utils=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),ConstantsUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js"),CoreHelperUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js");const OptionsUtil={getFeatureValue(key,features){const optionValue=features?.[key];return void 0===optionValue?ConstantsUtil.oU.DEFAULT_FEATURES[key]:optionValue},filterSocialsByPlatform(socials){if(!socials||!socials.length)return socials;if(CoreHelperUtil.w.isTelegram()){if(CoreHelperUtil.w.isIos())return socials.filter(s=>"google"!==s);if(CoreHelperUtil.w.isMac())return socials.filter(s=>"x"!==s);if(CoreHelperUtil.w.isAndroid())return socials.filter(s=>!["facebook","x"].includes(s))}return socials}},state=(0,vanilla.BX)({features:ConstantsUtil.oU.DEFAULT_FEATURES,projectId:"",sdkType:"appkit",sdkVersion:"html-wagmi-undefined",defaultAccountTypes:ConstantsUtil.oU.DEFAULT_ACCOUNT_TYPES,enableNetworkSwitch:!0,experimental_preferUniversalLinks:!1,remoteFeatures:{}}),OptionsController={state,subscribeKey:(key,callback)=>(0,utils.u$)(state,key,callback),setOptions(options){Object.assign(state,options)},setRemoteFeatures(remoteFeatures){if(!remoteFeatures)return;const newRemoteFeatures={...state.remoteFeatures,...remoteFeatures};state.remoteFeatures=newRemoteFeatures,state.remoteFeatures?.socials&&(state.remoteFeatures.socials=OptionsUtil.filterSocialsByPlatform(state.remoteFeatures.socials))},setFeatures(features){if(!features)return;state.features||(state.features=ConstantsUtil.oU.DEFAULT_FEATURES);const newFeatures={...state.features,...features};state.features=newFeatures},setProjectId(projectId){state.projectId=projectId},setCustomRpcUrls(customRpcUrls){state.customRpcUrls=customRpcUrls},setAllWallets(allWallets){state.allWallets=allWallets},setIncludeWalletIds(includeWalletIds){state.includeWalletIds=includeWalletIds},setExcludeWalletIds(excludeWalletIds){state.excludeWalletIds=excludeWalletIds},setFeaturedWalletIds(featuredWalletIds){state.featuredWalletIds=featuredWalletIds},setTokens(tokens){state.tokens=tokens},setTermsConditionsUrl(termsConditionsUrl){state.termsConditionsUrl=termsConditionsUrl},setPrivacyPolicyUrl(privacyPolicyUrl){state.privacyPolicyUrl=privacyPolicyUrl},setCustomWallets(customWallets){state.customWallets=customWallets},setIsSiweEnabled(isSiweEnabled){state.isSiweEnabled=isSiweEnabled},setIsUniversalProvider(isUniversalProvider){state.isUniversalProvider=isUniversalProvider},setSdkVersion(sdkVersion){state.sdkVersion=sdkVersion},setMetadata(metadata){state.metadata=metadata},setDisableAppend(disableAppend){state.disableAppend=disableAppend},setEIP6963Enabled(enableEIP6963){state.enableEIP6963=enableEIP6963},setDebug(debug){state.debug=debug},setEnableWalletConnect(enableWalletConnect){state.enableWalletConnect=enableWalletConnect},setEnableWalletGuide(enableWalletGuide){state.enableWalletGuide=enableWalletGuide},setEnableAuthLogger(enableAuthLogger){state.enableAuthLogger=enableAuthLogger},setEnableWallets(enableWallets){state.enableWallets=enableWallets},setPreferUniversalLinks(preferUniversalLinks){state.experimental_preferUniversalLinks=preferUniversalLinks},setHasMultipleAddresses(hasMultipleAddresses){state.hasMultipleAddresses=hasMultipleAddresses},setSIWX(siwx){state.siwx=siwx},setConnectMethodsOrder(connectMethodsOrder){state.features={...state.features,connectMethodsOrder}},setWalletFeaturesOrder(walletFeaturesOrder){state.features={...state.features,walletFeaturesOrder}},setSocialsOrder(socialsOrder){state.remoteFeatures={...state.remoteFeatures,socials:socialsOrder}},setCollapseWallets(collapseWallets){state.features={...state.features,collapseWallets}},setEnableEmbedded(enableEmbedded){state.enableEmbedded=enableEmbedded},setAllowUnsupportedChain(allowUnsupportedChain){state.allowUnsupportedChain=allowUnsupportedChain},setManualWCControl(manualWCControl){state.manualWCControl=manualWCControl},setEnableNetworkSwitch(enableNetworkSwitch){state.enableNetworkSwitch=enableNetworkSwitch},setDefaultAccountTypes(defaultAccountType={}){Object.entries(defaultAccountType).forEach(([namespace,accountType])=>{accountType&&(state.defaultAccountTypes[namespace]=accountType)})},setUniversalProviderConfigOverride(universalProviderConfigOverride){state.universalProviderConfigOverride=universalProviderConfigOverride},getUniversalProviderConfigOverride:()=>state.universalProviderConfigOverride,getSnapshot:()=>(0,vanilla.P9)(state)}},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>PublicStateController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs");const state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({loading:!1,open:!1,selectedNetworkId:void 0,activeChain:void 0,initialized:!1}),PublicStateController={state,subscribe:callback=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.B1)(state,()=>callback(state)),subscribeOpen:callback=>(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.u$)(state,"open",callback),set(newState){Object.assign(state,{...state,...newState})}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>RouterController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),_AccountController_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),_ChainController_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),_ConnectorController_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),_ModalController_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js"),_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js");const state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({view:"Connect",history:["Connect"],transactionStack:[]}),controller={state,subscribeKey:(key,callback)=>(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.u$)(state,key,callback),pushTransactionStack(action){state.transactionStack.push(action)},popTransactionStack(status){const action=state.transactionStack.pop();if(!action)return;const{onSuccess,onError,onCancel}=action;switch(status){case"success":onSuccess?.();break;case"error":onError?.(),RouterController.goBack();break;case"cancel":onCancel?.(),RouterController.goBack()}},push(view,data){view!==state.view&&(state.view=view,state.history.push(view),state.data=data)},reset(view,data){state.view=view,state.history=[view],state.data=data},replace(view,data){state.history.at(-1)===view||(state.view=view,state.history[state.history.length-1]=view,state.data=data)},goBack(){const isConnected=_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.state.activeCaipAddress,isFarcasterView="ConnectingFarcaster"===RouterController.state.view,shouldReload=!isConnected&&isFarcasterView;if(state.history.length>1){state.history.pop();const[last]=state.history.slice(-1);if(last){const isConnectView="Connect"===last;state.view=isConnected&&isConnectView?"Account":last}}else _ModalController_js__WEBPACK_IMPORTED_MODULE_6__.W.close();state.data?.wallet&&(state.data.wallet=void 0),setTimeout(()=>{if(shouldReload){_AccountController_js__WEBPACK_IMPORTED_MODULE_3__.U.setFarcasterUrl(void 0,_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.state.activeChain);const authConnector=_ConnectorController_js__WEBPACK_IMPORTED_MODULE_5__.a.getAuthConnector();authConnector?.provider?.reload();const optionsState=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.P9)(_OptionsController_js__WEBPACK_IMPORTED_MODULE_7__.H.state);authConnector?.provider?.syncDappData?.({metadata:optionsState.metadata,sdkVersion:optionsState.sdkVersion,projectId:optionsState.projectId,sdkType:optionsState.sdkType})}},100)},goBackToIndex(historyIndex){if(state.history.length>1){state.history=state.history.slice(0,historyIndex+1);const[last]=state.history.slice(-1);last&&(state.view=last)}},goBackOrCloseModal(){RouterController.state.history.length>1?RouterController.goBack():_ModalController_js__WEBPACK_IMPORTED_MODULE_6__.W.close()}},RouterController=(0,_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_2__.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SendController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>SendController});var vanilla=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),utils=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),NAME="[big.js] ",INVALID=NAME+"Invalid ",INVALID_DP=INVALID+"decimal places",INVALID_RM=INVALID+"rounding mode",DIV_BY_ZERO=NAME+"Division by zero",P={},NUMERIC=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function round(x,sd,rm,more){var xc=x.c;if(undefined===rm&&(rm=x.constructor.RM),0!==rm&&1!==rm&&2!==rm&&3!==rm)throw Error(INVALID_RM);if(sd<1)more=3===rm&&(more||!!xc[0])||0===sd&&(1===rm&&xc[0]>=5||2===rm&&(xc[0]>5||5===xc[0]&&(more||undefined!==xc[1]))),xc.length=1,more?(x.e=x.e-sd+1,xc[0]=1):xc[0]=x.e=0;else if(sd<xc.length){if(more=1===rm&&xc[sd]>=5||2===rm&&(xc[sd]>5||5===xc[sd]&&(more||undefined!==xc[sd+1]||1&xc[sd-1]))||3===rm&&(more||!!xc[0]),xc.length=sd,more)for(;++xc[--sd]>9;)if(xc[sd]=0,0===sd){++x.e,xc.unshift(1);break}for(sd=xc.length;!xc[--sd];)xc.pop()}return x}function stringify(x,doExponential,isNonzero){var e=x.e,s=x.c.join(""),n=s.length;if(doExponential)s=s.charAt(0)+(n>1?"."+s.slice(1):"")+(e<0?"e":"e+")+e;else if(e<0){for(;++e;)s="0"+s;s="0."+s}else if(e>0)if(++e>n)for(e-=n;e--;)s+="0";else e<n&&(s=s.slice(0,e)+"."+s.slice(e));else n>1&&(s=s.charAt(0)+"."+s.slice(1));return x.s<0&&isNonzero?"-"+s:s}P.abs=function(){var x=new this.constructor(this);return x.s=1,x},P.cmp=function(y){var isneg,x=this,xc=x.c,yc=(y=new x.constructor(y)).c,i=x.s,j=y.s,k=x.e,l=y.e;if(!xc[0]||!yc[0])return xc[0]?i:yc[0]?-j:0;if(i!=j)return i;if(isneg=i<0,k!=l)return k>l^isneg?1:-1;for(j=(k=xc.length)<(l=yc.length)?k:l,i=-1;++i<j;)if(xc[i]!=yc[i])return xc[i]>yc[i]^isneg?1:-1;return k==l?0:k>l^isneg?1:-1},P.div=function(y){var x=this,Big=x.constructor,a=x.c,b=(y=new Big(y)).c,k=x.s==y.s?1:-1,dp=Big.DP;if(dp!==~~dp||dp<0||dp>1e6)throw Error(INVALID_DP);if(!b[0])throw Error(DIV_BY_ZERO);if(!a[0])return y.s=k,y.c=[y.e=0],y;var bl,bt,n,cmp,ri,bz=b.slice(),ai=bl=b.length,al=a.length,r=a.slice(0,bl),rl=r.length,q=y,qc=q.c=[],qi=0,p=dp+(q.e=x.e-y.e)+1;for(q.s=k,k=p<0?0:p,bz.unshift(0);rl++<bl;)r.push(0);do{for(n=0;n<10;n++){if(bl!=(rl=r.length))cmp=bl>rl?1:-1;else for(ri=-1,cmp=0;++ri<bl;)if(b[ri]!=r[ri]){cmp=b[ri]>r[ri]?1:-1;break}if(!(cmp<0))break;for(bt=rl==bl?b:bz;rl;){if(r[--rl]<bt[rl]){for(ri=rl;ri&&!r[--ri];)r[ri]=9;--r[ri],r[rl]+=10}r[rl]-=bt[rl]}for(;!r[0];)r.shift()}qc[qi++]=cmp?n:++n,r[0]&&cmp?r[rl]=a[ai]||0:r=[a[ai]]}while((ai++<al||undefined!==r[0])&&k--);return qc[0]||1==qi||(qc.shift(),q.e--,p--),qi>p&&round(q,p,Big.RM,undefined!==r[0]),q},P.eq=function(y){return 0===this.cmp(y)},P.gt=function(y){return this.cmp(y)>0},P.gte=function(y){return this.cmp(y)>-1},P.lt=function(y){return this.cmp(y)<0},P.lte=function(y){return this.cmp(y)<1},P.minus=P.sub=function(y){var i,j,t,xlty,x=this,Big=x.constructor,a=x.s,b=(y=new Big(y)).s;if(a!=b)return y.s=-b,x.plus(y);var xc=x.c.slice(),xe=x.e,yc=y.c,ye=y.e;if(!xc[0]||!yc[0])return yc[0]?y.s=-b:xc[0]?y=new Big(x):y.s=1,y;if(a=xe-ye){for((xlty=a<0)?(a=-a,t=xc):(ye=xe,t=yc),t.reverse(),b=a;b--;)t.push(0);t.reverse()}else for(j=((xlty=xc.length<yc.length)?xc:yc).length,a=b=0;b<j;b++)if(xc[b]!=yc[b]){xlty=xc[b]<yc[b];break}if(xlty&&(t=xc,xc=yc,yc=t,y.s=-y.s),(b=(j=yc.length)-(i=xc.length))>0)for(;b--;)xc[i++]=0;for(b=i;j>a;){if(xc[--j]<yc[j]){for(i=j;i&&!xc[--i];)xc[i]=9;--xc[i],xc[j]+=10}xc[j]-=yc[j]}for(;0===xc[--b];)xc.pop();for(;0===xc[0];)xc.shift(),--ye;return xc[0]||(y.s=1,xc=[ye=0]),y.c=xc,y.e=ye,y},P.mod=function(y){var ygtx,x=this,Big=x.constructor,a=x.s,b=(y=new Big(y)).s;if(!y.c[0])throw Error(DIV_BY_ZERO);return x.s=y.s=1,ygtx=1==y.cmp(x),x.s=a,y.s=b,ygtx?new Big(x):(a=Big.DP,b=Big.RM,Big.DP=Big.RM=0,x=x.div(y),Big.DP=a,Big.RM=b,this.minus(x.times(y)))},P.neg=function(){var x=new this.constructor(this);return x.s=-x.s,x},P.plus=P.add=function(y){var e,k,t,x=this,Big=x.constructor;if(y=new Big(y),x.s!=y.s)return y.s=-y.s,x.minus(y);var xe=x.e,xc=x.c,ye=y.e,yc=y.c;if(!xc[0]||!yc[0])return yc[0]||(xc[0]?y=new Big(x):y.s=x.s),y;if(xc=xc.slice(),e=xe-ye){for(e>0?(ye=xe,t=yc):(e=-e,t=xc),t.reverse();e--;)t.push(0);t.reverse()}for(xc.length-yc.length<0&&(t=yc,yc=xc,xc=t),e=yc.length,k=0;e;xc[e]%=10)k=(xc[--e]=xc[e]+yc[e]+k)/10|0;for(k&&(xc.unshift(k),++ye),e=xc.length;0===xc[--e];)xc.pop();return y.c=xc,y.e=ye,y},P.pow=function(n){var x=this,one=new x.constructor("1"),y=one,isneg=n<0;if(n!==~~n||n<-1e6||n>1e6)throw Error(INVALID+"exponent");for(isneg&&(n=-n);1&n&&(y=y.times(x)),n>>=1;)x=x.times(x);return isneg?one.div(y):y},P.prec=function(sd,rm){if(sd!==~~sd||sd<1||sd>1e6)throw Error(INVALID+"precision");return round(new this.constructor(this),sd,rm)},P.round=function(dp,rm){if(undefined===dp)dp=0;else if(dp!==~~dp||dp<-1e6||dp>1e6)throw Error(INVALID_DP);return round(new this.constructor(this),dp+this.e+1,rm)},P.sqrt=function(){var r,c,t,x=this,Big=x.constructor,s=x.s,e=x.e,half=new Big("0.5");if(!x.c[0])return new Big(x);if(s<0)throw Error(NAME+"No square root");0===(s=Math.sqrt(+stringify(x,!0,!0)))||s===1/0?((c=x.c.join("")).length+e&1||(c+="0"),e=((e+1)/2|0)-(e<0||1&e),r=new Big(((s=Math.sqrt(c))==1/0?"5e":(s=s.toExponential()).slice(0,s.indexOf("e")+1))+e)):r=new Big(s+""),e=r.e+(Big.DP+=4);do{t=r,r=half.times(t.plus(x.div(t)))}while(t.c.slice(0,e).join("")!==r.c.slice(0,e).join(""));return round(r,(Big.DP-=4)+r.e+1,Big.RM)},P.times=P.mul=function(y){var c,x=this,Big=x.constructor,xc=x.c,yc=(y=new Big(y)).c,a=xc.length,b=yc.length,i=x.e,j=y.e;if(y.s=x.s==y.s?1:-1,!xc[0]||!yc[0])return y.c=[y.e=0],y;for(y.e=i+j,a<b&&(c=xc,xc=yc,yc=c,j=a,a=b,b=j),c=new Array(j=a+b);j--;)c[j]=0;for(i=b;i--;){for(b=0,j=a+i;j>i;)b=c[j]+yc[i]*xc[j-i-1]+b,c[j--]=b%10,b=b/10|0;c[j]=b}for(b?++y.e:c.shift(),i=c.length;!c[--i];)c.pop();return y.c=c,y},P.toExponential=function(dp,rm){var x=this,n=x.c[0];if(undefined!==dp){if(dp!==~~dp||dp<0||dp>1e6)throw Error(INVALID_DP);for(x=round(new x.constructor(x),++dp,rm);x.c.length<dp;)x.c.push(0)}return stringify(x,!0,!!n)},P.toFixed=function(dp,rm){var x=this,n=x.c[0];if(undefined!==dp){if(dp!==~~dp||dp<0||dp>1e6)throw Error(INVALID_DP);for(dp=dp+(x=round(new x.constructor(x),dp+x.e+1,rm)).e+1;x.c.length<dp;)x.c.push(0)}return stringify(x,!1,!!n)},P[Symbol.for("nodejs.util.inspect.custom")]=P.toJSON=P.toString=function(){var x=this,Big=x.constructor;return stringify(x,x.e<=Big.NE||x.e>=Big.PE,!!x.c[0])},P.toNumber=function(){var n=+stringify(this,!0,!0);if(!0===this.constructor.strict&&!this.eq(n.toString()))throw Error(NAME+"Imprecise conversion");return n},P.toPrecision=function(sd,rm){var x=this,Big=x.constructor,n=x.c[0];if(undefined!==sd){if(sd!==~~sd||sd<1||sd>1e6)throw Error(INVALID+"precision");for(x=round(new Big(x),sd,rm);x.c.length<sd;)x.c.push(0)}return stringify(x,sd<=x.e||x.e<=Big.NE||x.e>=Big.PE,!!n)},P.valueOf=function(){var x=this,Big=x.constructor;if(!0===Big.strict)throw Error(NAME+"valueOf disallowed");return stringify(x,x.e<=Big.NE||x.e>=Big.PE,!0)};var Big=function _Big_(){function Big(n){var x=this;if(!(x instanceof Big))return undefined===n?_Big_():new Big(n);if(n instanceof Big)x.s=n.s,x.e=n.e,x.c=n.c.slice();else{if("string"!=typeof n){if(!0===Big.strict&&"bigint"!=typeof n)throw TypeError(INVALID+"value");n=0===n&&1/n<0?"-0":String(n)}!function parse(x,n){var e,i,nl;if(!NUMERIC.test(n))throw Error(INVALID+"number");x.s="-"==n.charAt(0)?(n=n.slice(1),-1):1,(e=n.indexOf("."))>-1&&(n=n.replace(".",""));(i=n.search(/e/i))>0?(e<0&&(e=i),e+=+n.slice(i+1),n=n.substring(0,i)):e<0&&(e=n.length);for(nl=n.length,i=0;i<nl&&"0"==n.charAt(i);)++i;if(i==nl)x.c=[x.e=0];else{for(;nl>0&&"0"==n.charAt(--nl););for(x.e=e-i-1,x.c=[],e=0;i<=nl;)x.c[e++]=+n.charAt(i++)}return x}(x,n)}x.constructor=Big}return Big.prototype=P,Big.DP=20,Big.RM=1,Big.NE=-7,Big.PE=21,Big.strict=false,Big.roundDown=0,Big.roundHalfUp=1,Big.roundHalfEven=2,Big.roundUp=3,Big}();const big=Big,NumberUtil={bigNumber:value=>new big(value||0),multiply(a,b){if(void 0===a||void 0===b)return new big(0);const aBigNumber=new big(a),bBigNumber=new big(b);return aBigNumber.times(bBigNumber)},formatNumberToLocalString:(value,decimals=2)=>void 0===value?"0.00":"number"==typeof value?value.toLocaleString("en-US",{maximumFractionDigits:decimals,minimumFractionDigits:decimals}):parseFloat(value).toLocaleString("en-US",{maximumFractionDigits:decimals,minimumFractionDigits:decimals}),parseLocalStringToNumber:value=>void 0===value?0:parseFloat(value.replace(/,/gu,""))},erc20ABI=[{type:"function",name:"transfer",stateMutability:"nonpayable",inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],outputs:[{name:"",type:"bool"}]},{type:"function",name:"transferFrom",stateMutability:"nonpayable",inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],outputs:[{name:"",type:"bool"}]}],usdtABI=[{type:"function",name:"transfer",stateMutability:"nonpayable",inputs:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],outputs:[]},{type:"function",name:"transferFrom",stateMutability:"nonpayable",inputs:[{name:"sender",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],outputs:[{name:"",type:"bool"}]}];var ConstantsUtil=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js");const ContractUtil_getERC20Abi=tokenAddress=>ConstantsUtil.o.USDT_CONTRACT_ADDRESSES.includes(tokenAddress)?usdtABI:erc20ABI;var W3mFrameConstants=__webpack_require__("./node_modules/@reown/appkit-controllers/node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js"),utils_ConstantsUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js"),CoreHelperUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),AccountController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),BlockchainApiController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js"),ChainController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),ConnectionController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js"),formatUnits=__webpack_require__("./node_modules/viem/_esm/utils/unit/formatUnits.js");const ERC7811Utils={createBalance(asset,chainId){const metadata={name:asset.metadata.name||"",symbol:asset.metadata.symbol||"",decimals:asset.metadata.decimals||0,value:asset.metadata.value||0,price:asset.metadata.price||0,iconUrl:asset.metadata.iconUrl||""};return{name:metadata.name,symbol:metadata.symbol,chainId,address:"native"===asset.address?void 0:this.convertAddressToCAIP10Address(asset.address,chainId),value:metadata.value,price:metadata.price,quantity:{decimals:metadata.decimals.toString(),numeric:this.convertHexToBalance({hex:asset.balance,decimals:metadata.decimals})},iconUrl:metadata.iconUrl}},convertHexToBalance:({hex,decimals})=>(0,formatUnits.J)(BigInt(hex),decimals),convertAddressToCAIP10Address:(address,chainId)=>`${chainId}:${address}`,createCAIP2ChainId:(chainId,namespace)=>`${namespace}:${parseInt(chainId,16)}`,getChainIdHexFromCAIP2ChainId(caip2ChainId){const parts=caip2ChainId.split(":");if(parts.length<2||!parts[1])return"0x0";const chainPart=parts[1],parsed=parseInt(chainPart,10);return isNaN(parsed)?"0x0":`0x${parsed.toString(16)}`},isWalletGetAssetsResponse(response){return"object"==typeof response&&null!==response&&Object.values(response).every(value=>Array.isArray(value)&&value.every(asset=>this.isValidAsset(asset)))},isValidAsset:asset=>"object"==typeof asset&&null!==asset&&"string"==typeof asset.address&&"string"==typeof asset.balance&&("ERC20"===asset.type||"NATIVE"===asset.type)&&"object"==typeof asset.metadata&&null!==asset.metadata&&"string"==typeof asset.metadata.name&&"string"==typeof asset.metadata.symbol&&"number"==typeof asset.metadata.decimals&&"number"==typeof asset.metadata.price&&"string"==typeof asset.metadata.iconUrl},SendApiUtil={async getMyTokensWithBalance(forceUpdate){const address=AccountController.U.state.address,caipNetwork=ChainController.W.state.activeCaipNetwork;if(!address||!caipNetwork)return[];if("eip155"===caipNetwork.chainNamespace){const eip155Balances=await this.getEIP155Balances(address,caipNetwork);if(eip155Balances)return this.filterLowQualityTokens(eip155Balances)}const response=await BlockchainApiController.T.getBalance(address,caipNetwork.caipNetworkId,forceUpdate);return this.filterLowQualityTokens(response.balances)},async getEIP155Balances(address,caipNetwork){try{const chainIdHex=ERC7811Utils.getChainIdHexFromCAIP2ChainId(caipNetwork.caipNetworkId),walletCapabilities=await ConnectionController.x.getCapabilities(address);if(!walletCapabilities?.[chainIdHex]?.assetDiscovery?.supported)return null;const walletGetAssetsResponse=await ConnectionController.x.walletGetAssets({account:address,chainFilter:[chainIdHex]});if(!ERC7811Utils.isWalletGetAssetsResponse(walletGetAssetsResponse))return null;return(walletGetAssetsResponse[chainIdHex]||[]).map(asset=>ERC7811Utils.createBalance(asset,caipNetwork.caipNetworkId))}catch(error){return null}},filterLowQualityTokens:balances=>balances.filter(balance=>"0"!==balance.quantity.decimals),mapBalancesToSwapTokens:balances=>balances?.map(token=>({...token,address:token?.address?token.address:ChainController.W.getActiveNetworkTokenAddress(),decimals:parseInt(token.quantity.decimals,10),logoUri:token.iconUrl,eip2612:!1}))||[]};var withErrorBoundary=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),EventsController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js"),RouterController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js"),SnackController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js");const state=(0,vanilla.BX)({tokenBalances:[],loading:!1}),controller={state,subscribe:callback=>(0,vanilla.B1)(state,()=>callback(state)),subscribeKey:(key,callback)=>(0,utils.u$)(state,key,callback),setToken(token){token&&(state.token=(0,vanilla.KR)(token))},setTokenAmount(sendTokenAmount){state.sendTokenAmount=sendTokenAmount},setReceiverAddress(receiverAddress){state.receiverAddress=receiverAddress},setReceiverProfileImageUrl(receiverProfileImageUrl){state.receiverProfileImageUrl=receiverProfileImageUrl},setReceiverProfileName(receiverProfileName){state.receiverProfileName=receiverProfileName},setNetworkBalanceInUsd(networkBalanceInUSD){state.networkBalanceInUSD=networkBalanceInUSD},setLoading(loading){state.loading=loading},async sendToken(){try{switch(SendController.setLoading(!0),ChainController.W.state.activeCaipNetwork?.chainNamespace){case"eip155":return void await SendController.sendEvmToken();case"solana":return void await SendController.sendSolanaToken();default:throw new Error("Unsupported chain")}}finally{SendController.setLoading(!1)}},async sendEvmToken(){const activeChainNamespace=ChainController.W.state.activeChain,activeAccountType=AccountController.U.state.preferredAccountTypes?.[activeChainNamespace];if(!SendController.state.sendTokenAmount||!SendController.state.receiverAddress)throw new Error("An amount and receiver address are required");if(!SendController.state.token)throw new Error("A token is required");SendController.state.token?.address?(EventsController.E.sendEvent({type:"track",event:"SEND_INITIATED",properties:{isSmartAccount:activeAccountType===W3mFrameConstants.Vl.ACCOUNT_TYPES.SMART_ACCOUNT,token:SendController.state.token.address,amount:SendController.state.sendTokenAmount,network:ChainController.W.state.activeCaipNetwork?.caipNetworkId||""}}),await SendController.sendERC20Token({receiverAddress:SendController.state.receiverAddress,tokenAddress:SendController.state.token.address,sendTokenAmount:SendController.state.sendTokenAmount,decimals:SendController.state.token.quantity.decimals})):(EventsController.E.sendEvent({type:"track",event:"SEND_INITIATED",properties:{isSmartAccount:activeAccountType===W3mFrameConstants.Vl.ACCOUNT_TYPES.SMART_ACCOUNT,token:SendController.state.token.symbol||"",amount:SendController.state.sendTokenAmount,network:ChainController.W.state.activeCaipNetwork?.caipNetworkId||""}}),await SendController.sendNativeToken({receiverAddress:SendController.state.receiverAddress,sendTokenAmount:SendController.state.sendTokenAmount,decimals:SendController.state.token.quantity.decimals}))},async fetchTokenBalance(onError){state.loading=!0;const chainId=ChainController.W.state.activeCaipNetwork?.caipNetworkId,chain=ChainController.W.state.activeCaipNetwork?.chainNamespace,caipAddress=ChainController.W.state.activeCaipAddress,address=caipAddress?CoreHelperUtil.w.getPlainAddress(caipAddress):void 0;if(state.lastRetry&&!CoreHelperUtil.w.isAllowedRetry(state.lastRetry,30*utils_ConstantsUtil.oU.ONE_SEC_MS))return state.loading=!1,[];try{if(address&&chainId&&chain){const balances=await SendApiUtil.getMyTokensWithBalance();return state.tokenBalances=balances,state.lastRetry=void 0,balances}}catch(error){state.lastRetry=Date.now(),onError?.(error),SnackController.P.showError("Token Balance Unavailable")}finally{state.loading=!1}return[]},fetchNetworkBalance(){if(0===state.tokenBalances.length)return;const networkTokenBalances=SendApiUtil.mapBalancesToSwapTokens(state.tokenBalances);if(!networkTokenBalances)return;const networkToken=networkTokenBalances.find(token=>token.address===ChainController.W.getActiveNetworkTokenAddress());networkToken&&(state.networkBalanceInUSD=networkToken?NumberUtil.multiply(networkToken.quantity.numeric,networkToken.price).toString():"0")},async sendNativeToken(params){RouterController.I.pushTransactionStack({});const to=params.receiverAddress,address=AccountController.U.state.address,value=ConnectionController.x.parseUnits(params.sendTokenAmount.toString(),Number(params.decimals));await ConnectionController.x.sendTransaction({chainNamespace:"eip155",to,address,data:"0x",value:value??BigInt(0)}),EventsController.E.sendEvent({type:"track",event:"SEND_SUCCESS",properties:{isSmartAccount:AccountController.U.state.preferredAccountTypes?.eip155===W3mFrameConstants.Vl.ACCOUNT_TYPES.SMART_ACCOUNT,token:SendController.state.token?.symbol||"",amount:params.sendTokenAmount,network:ChainController.W.state.activeCaipNetwork?.caipNetworkId||""}}),ConnectionController.x._getClient()?.updateBalance("eip155"),SendController.resetSend()},async sendERC20Token(params){RouterController.I.pushTransactionStack({onSuccess(){RouterController.I.replace("Account")}});const amount=ConnectionController.x.parseUnits(params.sendTokenAmount.toString(),Number(params.decimals));if(AccountController.U.state.address&&params.sendTokenAmount&&params.receiverAddress&&params.tokenAddress){const tokenAddress=CoreHelperUtil.w.getPlainAddress(params.tokenAddress);await ConnectionController.x.writeContract({fromAddress:AccountController.U.state.address,tokenAddress,args:[params.receiverAddress,amount??BigInt(0)],method:"transfer",abi:ContractUtil_getERC20Abi(tokenAddress),chainNamespace:"eip155"}),SendController.resetSend()}},async sendSolanaToken(){if(!SendController.state.sendTokenAmount||!SendController.state.receiverAddress)throw new Error("An amount and receiver address are required");RouterController.I.pushTransactionStack({onSuccess(){RouterController.I.replace("Account")}}),await ConnectionController.x.sendTransaction({chainNamespace:"solana",to:SendController.state.receiverAddress,value:SendController.state.sendTokenAmount}),ConnectionController.x._getClient()?.updateBalance("solana"),SendController.resetSend()},resetSend(){state.token=void 0,state.sendTokenAmount=void 0,state.receiverAddress=void 0,state.receiverProfileImageUrl=void 0,state.receiverProfileName=void 0,state.loading=!1,state.tokenBalances=[]}},SendController=(0,withErrorBoundary.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{P:()=>SnackController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js");const DEFAULT_STATE=Object.freeze({message:"",variant:"success",svg:void 0,open:!1,autoClose:!0}),state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({...DEFAULT_STATE}),SnackController={state,subscribeKey:(key,callback)=>(0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_1__.u$)(state,key,callback),showLoading(message,options={}){this._showMessage({message,variant:"loading",...options})},showSuccess(message){this._showMessage({message,variant:"success"})},showSvg(message,svg){this._showMessage({message,svg})},showError(message){const errorMessage=_utils_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_2__.w.parseError(message);this._showMessage({message:errorMessage,variant:"error"})},hide(){state.message=DEFAULT_STATE.message,state.variant=DEFAULT_STATE.variant,state.svg=DEFAULT_STATE.svg,state.open=DEFAULT_STATE.open,state.autoClose=DEFAULT_STATE.autoClose},_showMessage({message,svg,variant="success",autoClose=DEFAULT_STATE.autoClose}){state.open?(state.open=!1,setTimeout(()=>{state.message=message,state.variant=variant,state.svg=svg,state.open=!0,state.autoClose=autoClose},150)):(state.message=message,state.variant=variant,state.svg=svg,state.open=!0,state.autoClose=autoClose)}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ThemeController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>ThemeController});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js"),_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),_ConnectorController_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({themeMode:"dark",themeVariables:{},w3mThemeVariables:void 0}),controller={state,subscribe:callback=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.B1)(state,()=>callback(state)),setThemeMode(themeMode){state.themeMode=themeMode;try{const authConnector=_ConnectorController_js__WEBPACK_IMPORTED_MODULE_3__.a.getAuthConnector();if(authConnector){const themeVariables=controller.getSnapshot().themeVariables;authConnector.provider.syncTheme({themeMode,themeVariables,w3mThemeVariables:(0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__.o)(themeVariables,themeMode)})}}catch{console.info("Unable to sync theme to auth connector")}},setThemeVariables(themeVariables){state.themeVariables={...state.themeVariables,...themeVariables};try{const authConnector=_ConnectorController_js__WEBPACK_IMPORTED_MODULE_3__.a.getAuthConnector();if(authConnector){const themeVariablesSnapshot=controller.getSnapshot().themeVariables;authConnector.provider.syncTheme({themeVariables:themeVariablesSnapshot,w3mThemeVariables:(0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__.o)(state.themeVariables,state.themeMode)})}}catch{console.info("Unable to sync theme to auth connector")}},getSnapshot:()=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.P9)(state)},ThemeController=(0,_utils_withErrorBoundary_js__WEBPACK_IMPORTED_MODULE_2__.X)(controller)},"./node_modules/@reown/appkit-controllers/dist/esm/src/utils/AssetUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>AssetUtil});var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),_controllers_ApiController_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js"),_controllers_AssetController_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AssetController.js");const namespaceImageIds={eip155:"ba0ba0cd-17c6-4806-ad93-f9d174f17900",solana:"a1b58899-f671-4276-6a5e-56ca5bd59700",polkadot:"",bip122:"0b4838db-0161-4ffe-022d-532bf03dba00",cosmos:""},state=(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.BX)({networkImagePromises:{}}),AssetUtil={async fetchWalletImage(imageId){if(imageId)return await _controllers_ApiController_js__WEBPACK_IMPORTED_MODULE_1__.N._fetchWalletImage(imageId),this.getWalletImageById(imageId)},async fetchNetworkImage(imageId){if(!imageId)return;const existingImage=this.getNetworkImageById(imageId);return existingImage||(state.networkImagePromises[imageId]||(state.networkImagePromises[imageId]=_controllers_ApiController_js__WEBPACK_IMPORTED_MODULE_1__.N._fetchNetworkImage(imageId)),await state.networkImagePromises[imageId],this.getNetworkImageById(imageId))},getWalletImageById(imageId){if(imageId)return _controllers_AssetController_js__WEBPACK_IMPORTED_MODULE_2__.j.state.walletImages[imageId]},getWalletImage:wallet=>wallet?.image_url?wallet?.image_url:wallet?.image_id?_controllers_AssetController_js__WEBPACK_IMPORTED_MODULE_2__.j.state.walletImages[wallet.image_id]:void 0,getNetworkImage:network=>network?.assets?.imageUrl?network?.assets?.imageUrl:network?.assets?.imageId?_controllers_AssetController_js__WEBPACK_IMPORTED_MODULE_2__.j.state.networkImages[network.assets.imageId]:void 0,getNetworkImageById(imageId){if(imageId)return _controllers_AssetController_js__WEBPACK_IMPORTED_MODULE_2__.j.state.networkImages[imageId]},getConnectorImage:connector=>connector?.imageUrl?connector.imageUrl:connector?.imageId?_controllers_AssetController_js__WEBPACK_IMPORTED_MODULE_2__.j.state.connectorImages[connector.imageId]:void 0,getChainImage:chain=>_controllers_AssetController_js__WEBPACK_IMPORTED_MODULE_2__.j.state.networkImages[namespaceImageIds[chain]]}},"./node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Db:()=>MELD_PUBLIC_KEY,oU:()=>ConstantsUtil,tM:()=>ONRAMP_PROVIDERS});var process=__webpack_require__("./node_modules/process/browser.js");const SECURE_SITE=(void 0!==process&&void 0!==process.env?process.env.NEXT_PUBLIC_SECURE_SITE_ORIGIN:void 0)||"https://secure.walletconnect.org",ONRAMP_PROVIDERS=[{label:"Coinbase",name:"coinbase",feeRange:"1-2%",url:"",supportedChains:["eip155"]},{label:"Meld.io",name:"meld",feeRange:"1-2%",url:"https://meldcrypto.com",supportedChains:["eip155","solana"]}],MELD_PUBLIC_KEY="WXETMuFUQmqqybHuRkSgxv:25B8LJHSfpG6LVjR2ytU5Cwh7Z4Sch2ocoU",ConstantsUtil={FOUR_MINUTES_MS:24e4,TEN_SEC_MS:1e4,FIVE_SEC_MS:5e3,THREE_SEC_MS:3e3,ONE_SEC_MS:1e3,SECURE_SITE,SECURE_SITE_DASHBOARD:`${SECURE_SITE}/dashboard`,SECURE_SITE_FAVICON:`${SECURE_SITE}/images/favicon.png`,RESTRICTED_TIMEZONES:["ASIA/SHANGHAI","ASIA/URUMQI","ASIA/CHONGQING","ASIA/HARBIN","ASIA/KASHGAR","ASIA/MACAU","ASIA/HONG_KONG","ASIA/MACAO","ASIA/BEIJING","ASIA/HARBIN"],WC_COINBASE_PAY_SDK_CHAINS:["ethereum","arbitrum","polygon","berachain","avalanche-c-chain","optimism","celo","base"],WC_COINBASE_PAY_SDK_FALLBACK_CHAIN:"ethereum",WC_COINBASE_PAY_SDK_CHAIN_NAME_MAP:{Ethereum:"ethereum","Arbitrum One":"arbitrum",Polygon:"polygon",Berachain:"berachain",Avalanche:"avalanche-c-chain","OP Mainnet":"optimism",Celo:"celo",Base:"base"},WC_COINBASE_ONRAMP_APP_ID:"bf18c88d-495a-463b-b249-0b9d3656cf5e",SWAP_SUGGESTED_TOKENS:["ETH","UNI","1INCH","AAVE","SOL","ADA","AVAX","DOT","LINK","NITRO","GAIA","MILK","TRX","NEAR","GNO","WBTC","DAI","WETH","USDC","USDT","ARB","BAL","BICO","CRV","ENS","MATIC","OP"],SWAP_POPULAR_TOKENS:["ETH","UNI","1INCH","AAVE","SOL","ADA","AVAX","DOT","LINK","NITRO","GAIA","MILK","TRX","NEAR","GNO","WBTC","DAI","WETH","USDC","USDT","ARB","BAL","BICO","CRV","ENS","MATIC","OP","METAL","DAI","CHAMP","WOLF","SALE","BAL","BUSD","MUST","BTCpx","ROUTE","HEX","WELT","amDAI","VSQ","VISION","AURUM","pSP","SNX","VC","LINK","CHP","amUSDT","SPHERE","FOX","GIDDY","GFC","OMEN","OX_OLD","DE","WNT"],BALANCE_SUPPORTED_CHAINS:["eip155","solana"],SWAP_SUPPORTED_NETWORKS:["eip155:1","eip155:42161","eip155:10","eip155:324","eip155:8453","eip155:56","eip155:137","eip155:100","eip155:43114","eip155:250","eip155:8217","eip155:1313161554"],NAMES_SUPPORTED_CHAIN_NAMESPACES:["eip155"],ONRAMP_SUPPORTED_CHAIN_NAMESPACES:["eip155","solana"],ACTIVITY_ENABLED_CHAIN_NAMESPACES:["eip155"],NATIVE_TOKEN_ADDRESS:{eip155:"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",solana:"So11111111111111111111111111111111111111111",polkadot:"0x",bip122:"0x",cosmos:"0x"},CONVERT_SLIPPAGE_TOLERANCE:1,CONNECT_LABELS:{MOBILE:"Open and continue in the wallet app",WEB:"Open and continue in the wallet app"},SEND_SUPPORTED_NAMESPACES:["eip155","solana"],DEFAULT_REMOTE_FEATURES:{swaps:["1inch"],onramp:["coinbase","meld"],email:!0,socials:["google","x","discord","farcaster","github","apple","facebook"],activity:!0,reownBranding:!0},DEFAULT_REMOTE_FEATURES_DISABLED:{email:!1,socials:!1,swaps:!1,onramp:!1,activity:!1,reownBranding:!1},DEFAULT_FEATURES:{receive:!0,send:!0,emailShowWallets:!0,connectorTypeOrder:["walletConnect","recent","injected","featured","custom","external","recommended"],analytics:!0,allWallets:!0,legalCheckbox:!1,smartSessions:!1,collapseWallets:!1,walletFeaturesOrder:["onramp","swaps","receive","send"],connectMethodsOrder:void 0,pay:!1},DEFAULT_SOCIALS:["google","x","farcaster","discord","apple","github","facebook"],DEFAULT_ACCOUNT_TYPES:{bip122:"payment",eip155:"smartAccount",polkadot:"eoa",solana:"eoa"},ADAPTER_TYPES:{UNIVERSAL:"universal",SOLANA:"solana",WAGMI:"wagmi",ETHERS:"ethers",ETHERS5:"ethers5",BITCOIN:"bitcoin"}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{w:()=>CoreHelperUtil});var _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js"),_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js"),_StorageUtil_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js");const CoreHelperUtil={isMobile(){return!!this.isClient()&&Boolean("function"==typeof window?.matchMedia&&window?.matchMedia("(pointer:coarse)")?.matches||/Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent))},checkCaipNetwork:(network,networkName="")=>network?.caipNetworkId.toLocaleLowerCase().includes(networkName.toLowerCase()),isAndroid(){if(!this.isMobile())return!1;const ua=window?.navigator.userAgent.toLowerCase();return CoreHelperUtil.isMobile()&&ua.includes("android")},isIos(){if(!this.isMobile())return!1;const ua=window?.navigator.userAgent.toLowerCase();return ua.includes("iphone")||ua.includes("ipad")},isSafari(){if(!this.isClient())return!1;const ua=window?.navigator.userAgent.toLowerCase();return ua.includes("safari")},isClient:()=>"undefined"!=typeof window,isPairingExpired:expiry=>!expiry||expiry-Date.now()<=_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__.oU.TEN_SEC_MS,isAllowedRetry:(lastRetry,differenceMs=_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__.oU.ONE_SEC_MS)=>Date.now()-lastRetry>=differenceMs,copyToClopboard(text){navigator.clipboard.writeText(text)},isIframe(){try{return window?.self!==window?.top}catch(e){return!1}},isSafeApp(){if(CoreHelperUtil.isClient()&&window.self!==window.top)try{const ancestor=window?.location?.ancestorOrigins?.[0],safeAppUrl="https://app.safe.global";if(ancestor){const ancestorUrl=new URL(ancestor),safeUrl=new URL(safeAppUrl);return ancestorUrl.hostname===safeUrl.hostname}}catch{return!1}return!1},getPairingExpiry:()=>Date.now()+_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__.oU.FOUR_MINUTES_MS,getNetworkId:caipAddress=>caipAddress?.split(":")[1],getPlainAddress:caipAddress=>caipAddress?.split(":")[2],wait:async milliseconds=>new Promise(resolve=>{setTimeout(resolve,milliseconds)}),debounce(func,timeout=500){let timer;return(...args)=>{timer&&clearTimeout(timer),timer=setTimeout(function next(){func(...args)},timeout)}},isHttpUrl:url=>url.startsWith("http://")||url.startsWith("https://"),formatNativeUrl(appUrl,wcUri,universalLink=null){if(CoreHelperUtil.isHttpUrl(appUrl))return this.formatUniversalUrl(appUrl,wcUri);let safeAppUrl=appUrl,safeUniversalLink=universalLink;safeAppUrl.includes("://")||(safeAppUrl=appUrl.replaceAll("/","").replaceAll(":",""),safeAppUrl=`${safeAppUrl}://`),safeAppUrl.endsWith("/")||(safeAppUrl=`${safeAppUrl}/`),safeUniversalLink&&!safeUniversalLink?.endsWith("/")&&(safeUniversalLink=`${safeUniversalLink}/`),this.isTelegram()&&this.isAndroid()&&(wcUri=encodeURIComponent(wcUri));const encodedWcUrl=encodeURIComponent(wcUri);return{redirect:`${safeAppUrl}wc?uri=${encodedWcUrl}`,redirectUniversalLink:safeUniversalLink?`${safeUniversalLink}wc?uri=${encodedWcUrl}`:void 0,href:safeAppUrl}},formatUniversalUrl(appUrl,wcUri){if(!CoreHelperUtil.isHttpUrl(appUrl))return this.formatNativeUrl(appUrl,wcUri);let safeAppUrl=appUrl;safeAppUrl.endsWith("/")||(safeAppUrl=`${safeAppUrl}/`);return{redirect:`${safeAppUrl}wc?uri=${encodeURIComponent(wcUri)}`,href:safeAppUrl}},getOpenTargetForPlatform(target){return"popupWindow"===target?target:this.isTelegram()?_StorageUtil_js__WEBPACK_IMPORTED_MODULE_2__.i.getTelegramSocialProvider()?"_top":"_blank":target},openHref(href,target,features){window?.open(href,this.getOpenTargetForPlatform(target),features||"noreferrer noopener")},returnOpenHref(href,target,features){return window?.open(href,this.getOpenTargetForPlatform(target),features||"noreferrer noopener")},isTelegram:()=>"undefined"!=typeof window&&(Boolean(window.TelegramWebviewProxy)||Boolean(window.Telegram)||Boolean(window.TelegramWebviewProxyProto)),isPWA(){if("undefined"==typeof window)return!1;const isStandaloneDisplayMode=window.matchMedia?.("(display-mode: standalone)")?.matches,isIOSStandalone=window?.navigator?.standalone;return Boolean(isStandaloneDisplayMode||isIOSStandalone)},async preloadImage(src){const imagePromise=new Promise((resolve,reject)=>{const image=new Image;image.onload=resolve,image.onerror=reject,image.crossOrigin="anonymous",image.src=src});return Promise.race([imagePromise,CoreHelperUtil.wait(2e3)])},formatBalance(balance,symbol){let formattedBalance="0.000";if("string"==typeof balance){const number=Number(balance);if(number){const formattedValue=Math.floor(1e3*number)/1e3;formattedValue&&(formattedBalance=formattedValue.toString())}}return`${formattedBalance}${symbol?` ${symbol}`:""}`},formatBalance2(balance,symbol){let formattedBalance;if("0"===balance)formattedBalance="0";else if("string"==typeof balance){const number=Number(balance);number&&(formattedBalance=number.toString().match(/^-?\d+(?:\.\d{0,3})?/u)?.[0])}return{value:formattedBalance??"0",rest:"0"===formattedBalance?"000":"",symbol}},getApiUrl:()=>_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.o.W3M_API_URL,getBlockchainApiUrl:()=>_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.o.BLOCKCHAIN_API_RPC_URL,getAnalyticsUrl:()=>_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.o.PULSE_API_URL,getUUID:()=>crypto?.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu,c=>{const r=16*Math.random()|0;return("x"===c?r:3&r|8).toString(16)}),parseError:error=>"string"==typeof error?error:"string"==typeof error?.issues?.[0]?.message?error.issues[0].message:error instanceof Error?error.message:"Unknown error",sortRequestedNetworks(approvedIds,requestedNetworks=[]){const approvedIndexMap={};return requestedNetworks&&approvedIds&&(approvedIds.forEach((id,index)=>{approvedIndexMap[id]=index}),requestedNetworks.sort((a,b)=>{const indexA=approvedIndexMap[a.id],indexB=approvedIndexMap[b.id];return void 0!==indexA&&void 0!==indexB?indexA-indexB:void 0!==indexA?-1:void 0!==indexB?1:0})),requestedNetworks},calculateBalance(array){let sum=0;for(const item of array)sum+=item.value??0;return sum},formatTokenBalance(number){const roundedNumber=number.toFixed(2),[dollars,pennies]=roundedNumber.split(".");return{dollars,pennies}},isAddress(address,chain="eip155"){switch(chain){case"eip155":return!!/^(?:0x)?[0-9a-f]{40}$/iu.test(address)&&!(!/^(?:0x)?[0-9a-f]{40}$/iu.test(address)&&!/^(?:0x)?[0-9A-F]{40}$/iu.test(address));case"solana":return/[1-9A-HJ-NP-Za-km-z]{32,44}$/iu.test(address);default:return!1}},uniqueBy(arr,key){const set=new Set;return arr.filter(item=>{const keyValue=item[key];return!set.has(keyValue)&&(set.add(keyValue),!0)})},generateSdkVersion:(adapters,platform,version)=>`${platform}-${0===adapters.length?_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_1__.oU.ADAPTER_TYPES.UNIVERSAL:adapters.map(adapter=>adapter.adapterType).join(",")}-${version}`,createAccount:(namespace,address,type,publicKey,path)=>({namespace,address,type,publicKey,path}),isCaipAddress(address){if("string"!=typeof address)return!1;const sections=address.split(":"),namespace=sections[0];return 3===sections.filter(Boolean).length&&namespace in _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.o.CHAIN_NAME_MAP},isMac(){const ua=window?.navigator.userAgent.toLowerCase();return ua.includes("macintosh")&&!ua.includes("safari")},formatTelegramSocialLoginUrl(url){const valueToInject=`--${encodeURIComponent(window?.location.href)}`;if("auth.magic.link"===new URL(url).host){const providerParam="provider_authorization_url=",providerUrl=url.substring(url.indexOf(providerParam)+providerParam.length),resultUrl=this.injectIntoUrl(decodeURIComponent(providerUrl),"state=",valueToInject);return url.replace(providerUrl,encodeURIComponent(resultUrl))}return this.injectIntoUrl(url,"state=",valueToInject)},injectIntoUrl(url,key,appendString){const keyIndex=url.indexOf(key);if(-1===keyIndex)throw new Error(`${key} parameter not found in the URL: ${url}`);const keyEndIndex=url.indexOf("&",keyIndex),keyLength=key.length,keyParamEnd=-1!==keyEndIndex?keyEndIndex:url.length;return url.substring(0,keyIndex+keyLength)+(url.substring(keyIndex+keyLength,keyParamEnd)+appendString)+url.substring(keyEndIndex)}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{async function fetchData(...args){const response=await fetch(...args);if(!response.ok){throw new Error(`HTTP status code: ${response.status}`,{cause:response})}return response}__webpack_require__.d(__webpack_exports__,{Z:()=>FetchUtil});class FetchUtil{constructor({baseUrl,clientId}){this.baseUrl=baseUrl,this.clientId=clientId}async get({headers,signal,cache,...args}){const url=this.createUrl(args);return(await fetchData(url,{method:"GET",headers,signal,cache})).json()}async getBlob({headers,signal,...args}){const url=this.createUrl(args);return(await fetchData(url,{method:"GET",headers,signal})).blob()}async post({body,headers,signal,...args}){const url=this.createUrl(args);return(await fetchData(url,{method:"POST",headers,body:body?JSON.stringify(body):void 0,signal})).json()}async put({body,headers,signal,...args}){const url=this.createUrl(args);return(await fetchData(url,{method:"PUT",headers,body:body?JSON.stringify(body):void 0,signal})).json()}async delete({body,headers,signal,...args}){const url=this.createUrl(args);return(await fetchData(url,{method:"DELETE",headers,body:body?JSON.stringify(body):void 0,signal})).json()}createUrl({path,params}){const url=new URL(path,this.baseUrl);return params&&Object.entries(params).forEach(([key,value])=>{value&&url.searchParams.append(key,value)}),this.clientId&&url.searchParams.append("clientId",this.clientId),url}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/utils/MobileWallet.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>CUSTOM_DEEPLINK_WALLETS,W:()=>MobileWalletUtil});var _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js");const CUSTOM_DEEPLINK_WALLETS={PHANTOM:{id:"a797aa35c0fadbfc1a53e7f675162ed5226968b44a19ee3d24385c64d1d3c393",url:"https://phantom.app"},SOLFLARE:{id:"1ca0bdd4747578705b1939af023d120677c64fe6ca76add81fda36e350605e79",url:"https://solflare.com"},COINBASE:{id:"fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",url:"https://go.cb-w.com"}},MobileWalletUtil={handleMobileDeeplinkRedirect(id,namespace){const href=window.location.href,encodedHref=encodeURIComponent(href);if(id===CUSTOM_DEEPLINK_WALLETS.PHANTOM.id&&!("phantom"in window)){const protocol=href.startsWith("https")?"https":"http",host=href.split("/")[2],encodedRef=encodeURIComponent(`${protocol}://${host}`);window.location.href=`${CUSTOM_DEEPLINK_WALLETS.PHANTOM.url}/ul/browse/${encodedHref}?ref=${encodedRef}`}id!==CUSTOM_DEEPLINK_WALLETS.SOLFLARE.id||"solflare"in window||(window.location.href=`${CUSTOM_DEEPLINK_WALLETS.SOLFLARE.url}/ul/v1/browse/${encodedHref}?ref=${encodedHref}`),namespace===_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.o.CHAIN.SOLANA&&(id!==CUSTOM_DEEPLINK_WALLETS.COINBASE.id||"coinbaseSolana"in window||(window.location.href=`${CUSTOM_DEEPLINK_WALLETS.COINBASE.url}/dapp?cb_url=${encodedHref}`))}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{U:()=>SIWXUtil});__webpack_require__("./node_modules/@walletconnect/universal-provider/dist/index.es.js");var _reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js"),_reown_appkit_wallet_utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js"),_controllers_AccountController_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),_controllers_ConnectionController_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js"),_controllers_ConnectorController_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),_controllers_EventsController_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js"),_controllers_ModalController_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js"),_controllers_OptionsController_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),_controllers_RouterController_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js"),_controllers_SnackController_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js"),_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const SIWXUtil={getSIWX:()=>_controllers_OptionsController_js__WEBPACK_IMPORTED_MODULE_9__.H.state.siwx,async initializeIfEnabled(){const siwx=_controllers_OptionsController_js__WEBPACK_IMPORTED_MODULE_9__.H.state.siwx,caipAddress=_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.getActiveCaipAddress();if(!siwx||!caipAddress)return;const[namespace,chainId,address]=caipAddress.split(":");if(_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.checkIfSupportedNetwork(namespace))try{if((await siwx.getSessions(`${namespace}:${chainId}`,address)).length)return;await _controllers_ModalController_js__WEBPACK_IMPORTED_MODULE_8__.W.open({view:"SIWXSignMessage"})}catch(error){console.error("SIWXUtil:initializeIfEnabled",error),_controllers_EventsController_js__WEBPACK_IMPORTED_MODULE_7__.E.sendEvent({type:"track",event:"SIWX_AUTH_ERROR",properties:this.getSIWXEventProperties()}),await(_controllers_ConnectionController_js__WEBPACK_IMPORTED_MODULE_5__.x._getClient()?.disconnect().catch(console.error)),_controllers_RouterController_js__WEBPACK_IMPORTED_MODULE_10__.I.reset("Connect"),_controllers_SnackController_js__WEBPACK_IMPORTED_MODULE_11__.P.showError("A problem occurred while trying initialize authentication")}},async requestSignMessage(){const siwx=_controllers_OptionsController_js__WEBPACK_IMPORTED_MODULE_9__.H.state.siwx,address=_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_12__.w.getPlainAddress(_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.getActiveCaipAddress()),network=_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.getActiveCaipNetwork(),client=_controllers_ConnectionController_js__WEBPACK_IMPORTED_MODULE_5__.x._getClient();if(!siwx)throw new Error("SIWX is not enabled");if(!address)throw new Error("No ActiveCaipAddress found");if(!network)throw new Error("No ActiveCaipNetwork or client found");if(!client)throw new Error("No ConnectionController client found");try{const siwxMessage=await siwx.createMessage({chainId:network.caipNetworkId,accountAddress:address}),message=siwxMessage.toString();_controllers_ConnectorController_js__WEBPACK_IMPORTED_MODULE_6__.a.getConnectorId(network.chainNamespace)===_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__.o.CONNECTOR_ID.AUTH&&_controllers_RouterController_js__WEBPACK_IMPORTED_MODULE_10__.I.pushTransactionStack({});const signature=await client.signMessage(message);await siwx.addSession({data:siwxMessage,message,signature}),_controllers_ModalController_js__WEBPACK_IMPORTED_MODULE_8__.W.close(),_controllers_EventsController_js__WEBPACK_IMPORTED_MODULE_7__.E.sendEvent({type:"track",event:"SIWX_AUTH_SUCCESS",properties:this.getSIWXEventProperties()})}catch(error){const properties=this.getSIWXEventProperties();_controllers_ModalController_js__WEBPACK_IMPORTED_MODULE_8__.W.state.open&&"ApproveTransaction"!==_controllers_RouterController_js__WEBPACK_IMPORTED_MODULE_10__.I.state.view||await _controllers_ModalController_js__WEBPACK_IMPORTED_MODULE_8__.W.open({view:"SIWXSignMessage"}),properties.isSmartAccount?_controllers_SnackController_js__WEBPACK_IMPORTED_MODULE_11__.P.showError("This application might not support Smart Accounts"):_controllers_SnackController_js__WEBPACK_IMPORTED_MODULE_11__.P.showError("Signature declined"),_controllers_EventsController_js__WEBPACK_IMPORTED_MODULE_7__.E.sendEvent({type:"track",event:"SIWX_AUTH_ERROR",properties}),console.error("SWIXUtil:requestSignMessage",error)}},async cancelSignMessage(){try{const siwx=this.getSIWX(),isRequired=siwx?.getRequired?.();isRequired?await _controllers_ConnectionController_js__WEBPACK_IMPORTED_MODULE_5__.x.disconnect():_controllers_ModalController_js__WEBPACK_IMPORTED_MODULE_8__.W.close(),_controllers_RouterController_js__WEBPACK_IMPORTED_MODULE_10__.I.reset("Connect"),_controllers_EventsController_js__WEBPACK_IMPORTED_MODULE_7__.E.sendEvent({event:"CLICK_CANCEL_SIWX",type:"track",properties:this.getSIWXEventProperties()})}catch(error){console.error("SIWXUtil:cancelSignMessage",error)}},async getSessions(){const siwx=_controllers_OptionsController_js__WEBPACK_IMPORTED_MODULE_9__.H.state.siwx,address=_CoreHelperUtil_js__WEBPACK_IMPORTED_MODULE_12__.w.getPlainAddress(_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.getActiveCaipAddress()),network=_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.getActiveCaipNetwork();return siwx&&address&&network?siwx.getSessions(network.caipNetworkId,address):[]},async isSIWXCloseDisabled(){const siwx=this.getSIWX();if(siwx){const isApproveSignScreen="ApproveTransaction"===_controllers_RouterController_js__WEBPACK_IMPORTED_MODULE_10__.I.state.view,isSiwxSignMessage="SIWXSignMessage"===_controllers_RouterController_js__WEBPACK_IMPORTED_MODULE_10__.I.state.view;if(isApproveSignScreen||isSiwxSignMessage)return siwx.getRequired?.()&&0===(await this.getSessions()).length}return!1},async universalProviderAuthenticate({universalProvider,chains,methods}){const siwx=SIWXUtil.getSIWX(),namespaces=new Set(chains.map(chain=>chain.split(":")[0]));if(!siwx||1!==namespaces.size||!namespaces.has("eip155"))return!1;const siwxMessage=await siwx.createMessage({chainId:_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.getActiveCaipNetwork()?.caipNetworkId||"",accountAddress:""}),result=await universalProvider.authenticate({nonce:siwxMessage.nonce,domain:siwxMessage.domain,uri:siwxMessage.uri,exp:siwxMessage.expirationTime,iat:siwxMessage.issuedAt,nbf:siwxMessage.notBefore,requestId:siwxMessage.requestId,version:siwxMessage.version,resources:siwxMessage.resources,statement:siwxMessage.statement,chainId:siwxMessage.chainId,methods,chains:[siwxMessage.chainId,...chains.filter(chain=>chain!==siwxMessage.chainId)]});if(_controllers_SnackController_js__WEBPACK_IMPORTED_MODULE_11__.P.showLoading("Authenticating...",{autoClose:!1}),_controllers_AccountController_js__WEBPACK_IMPORTED_MODULE_3__.U.setConnectedWalletInfo({...result.session.peer.metadata,name:result.session.peer.metadata.name,icon:result.session.peer.metadata.icons?.[0],type:"WALLET_CONNECT"},Array.from(namespaces)[0]),result?.auths?.length){const sessions=result.auths.map(cacao=>{const message=universalProvider.client.formatAuthMessage({request:cacao.p,iss:cacao.p.iss});return{data:{...cacao.p,accountAddress:cacao.p.iss.split(":").slice(-1).join(""),chainId:cacao.p.iss.split(":").slice(2,4).join(":"),uri:cacao.p.aud,version:cacao.p.version||siwxMessage.version,expirationTime:cacao.p.exp,issuedAt:cacao.p.iat,notBefore:cacao.p.nbf},message,signature:cacao.s.s,cacao}});try{await siwx.setSessions(sessions),_controllers_EventsController_js__WEBPACK_IMPORTED_MODULE_7__.E.sendEvent({type:"track",event:"SIWX_AUTH_SUCCESS",properties:SIWXUtil.getSIWXEventProperties()})}catch(error){throw console.error("SIWX:universalProviderAuth - failed to set sessions",error),_controllers_EventsController_js__WEBPACK_IMPORTED_MODULE_7__.E.sendEvent({type:"track",event:"SIWX_AUTH_ERROR",properties:SIWXUtil.getSIWXEventProperties()}),await universalProvider.disconnect().catch(console.error),error}finally{_controllers_SnackController_js__WEBPACK_IMPORTED_MODULE_11__.P.hide()}}return!0},getSIWXEventProperties(){const activeChainNamespace=_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.state.activeChain;return{network:_controllers_ChainController_js__WEBPACK_IMPORTED_MODULE_4__.W.state.activeCaipNetwork?.caipNetworkId||"",isSmartAccount:_controllers_AccountController_js__WEBPACK_IMPORTED_MODULE_3__.U.state.preferredAccountTypes?.[activeChainNamespace]===_reown_appkit_wallet_utils__WEBPACK_IMPORTED_MODULE_2__.Vl.ACCOUNT_TYPES.SMART_ACCOUNT}},async clearSessions(){const siwx=this.getSIWX();siwx&&await siwx.setSessions([])}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{i:()=>StorageUtil});var _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/SafeLocalStorage.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const StorageUtil={cacheExpiry:{portfolio:3e4,nativeBalance:3e4,ens:3e5,identity:3e5},isCacheExpired:(timestamp,cacheExpiry)=>Date.now()-timestamp>cacheExpiry,getActiveNetworkProps(){const namespace=StorageUtil.getActiveNamespace(),caipNetworkId=StorageUtil.getActiveCaipNetworkId(),stringChainId=caipNetworkId?caipNetworkId.split(":")[1]:void 0;return{namespace,caipNetworkId,chainId:stringChainId?isNaN(Number(stringChainId))?stringChainId:Number(stringChainId):void 0}},setWalletConnectDeepLink({name,href}){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.DEEPLINK_CHOICE,JSON.stringify({href,name}))}catch{console.info("Unable to set WalletConnect deep link")}},getWalletConnectDeepLink(){try{const deepLink=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.DEEPLINK_CHOICE);if(deepLink)return JSON.parse(deepLink)}catch{console.info("Unable to get WalletConnect deep link")}},deleteWalletConnectDeepLink(){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.DEEPLINK_CHOICE)}catch{console.info("Unable to delete WalletConnect deep link")}},setActiveNamespace(namespace){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ACTIVE_NAMESPACE,namespace)}catch{console.info("Unable to set active namespace")}},setActiveCaipNetworkId(caipNetworkId){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ACTIVE_CAIP_NETWORK_ID,caipNetworkId),StorageUtil.setActiveNamespace(caipNetworkId.split(":")[0])}catch{console.info("Unable to set active caip network id")}},getActiveCaipNetworkId(){try{return _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ACTIVE_CAIP_NETWORK_ID)}catch{return void console.info("Unable to get active caip network id")}},deleteActiveCaipNetworkId(){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ACTIVE_CAIP_NETWORK_ID)}catch{console.info("Unable to delete active caip network id")}},deleteConnectedConnectorId(namespace){try{const key=(0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.T8)(namespace);_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(key)}catch{console.info("Unable to delete connected connector id")}},setAppKitRecent(wallet){try{const recentWallets=StorageUtil.getRecentWallets();recentWallets.find(w=>w.id===wallet.id)||(recentWallets.unshift(wallet),recentWallets.length>2&&recentWallets.pop(),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.RECENT_WALLETS,JSON.stringify(recentWallets)))}catch{console.info("Unable to set AppKit recent")}},getRecentWallets(){try{const recent=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.RECENT_WALLETS);return recent?JSON.parse(recent):[]}catch{console.info("Unable to get AppKit recent")}return[]},setConnectedConnectorId(namespace,connectorId){try{const key=(0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.T8)(namespace);_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(key,connectorId)}catch{console.info("Unable to set Connected Connector Id")}},getActiveNamespace(){try{return _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ACTIVE_NAMESPACE)}catch{console.info("Unable to get active namespace")}},getConnectedConnectorId(namespace){if(namespace)try{const key=(0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.T8)(namespace);return _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(key)}catch(e){console.info("Unable to get connected connector id in namespace ",namespace)}},setConnectedSocialProvider(socialProvider){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTED_SOCIAL,socialProvider)}catch{console.info("Unable to set connected social provider")}},getConnectedSocialProvider(){try{return _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTED_SOCIAL)}catch{console.info("Unable to get connected social provider")}},deleteConnectedSocialProvider(){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTED_SOCIAL)}catch{console.info("Unable to delete connected social provider")}},getConnectedSocialUsername(){try{return _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTED_SOCIAL_USERNAME)}catch{console.info("Unable to get connected social username")}},getStoredActiveCaipNetworkId(){const storedCaipNetworkId=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ACTIVE_CAIP_NETWORK_ID),networkId=storedCaipNetworkId?.split(":")?.[1];return networkId},setConnectionStatus(status){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTION_STATUS,status)}catch{console.info("Unable to set connection status")}},getConnectionStatus(){try{return _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTION_STATUS)}catch{return}},getConnectedNamespaces(){try{const namespaces=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTED_NAMESPACES);return namespaces?.length?namespaces.split(","):[]}catch{return[]}},setConnectedNamespaces(namespaces){try{const uniqueNamespaces=Array.from(new Set(namespaces));_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTED_NAMESPACES,uniqueNamespaces.join(","))}catch{console.info("Unable to set namespaces in storage")}},addConnectedNamespace(namespace){try{const namespaces=StorageUtil.getConnectedNamespaces();namespaces.includes(namespace)||(namespaces.push(namespace),StorageUtil.setConnectedNamespaces(namespaces))}catch{console.info("Unable to add connected namespace")}},removeConnectedNamespace(namespace){try{const namespaces=StorageUtil.getConnectedNamespaces(),index=namespaces.indexOf(namespace);index>-1&&(namespaces.splice(index,1),StorageUtil.setConnectedNamespaces(namespaces))}catch{console.info("Unable to remove connected namespace")}},getTelegramSocialProvider(){try{return _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.TELEGRAM_SOCIAL_PROVIDER)}catch{return console.info("Unable to get telegram social provider"),null}},setTelegramSocialProvider(socialProvider){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.TELEGRAM_SOCIAL_PROVIDER,socialProvider)}catch{console.info("Unable to set telegram social provider")}},removeTelegramSocialProvider(){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.TELEGRAM_SOCIAL_PROVIDER)}catch{console.info("Unable to remove telegram social provider")}},getBalanceCache(){let cache={};try{const result=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.PORTFOLIO_CACHE);cache=result?JSON.parse(result):{}}catch{console.info("Unable to get balance cache")}return cache},removeAddressFromBalanceCache(caipAddress){try{const cache=StorageUtil.getBalanceCache();_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.PORTFOLIO_CACHE,JSON.stringify({...cache,[caipAddress]:void 0}))}catch{console.info("Unable to remove address from balance cache",caipAddress)}},getBalanceCacheForCaipAddress(caipAddress){try{const balanceCache=StorageUtil.getBalanceCache()[caipAddress];if(balanceCache&&!this.isCacheExpired(balanceCache.timestamp,this.cacheExpiry.portfolio))return balanceCache.balance;StorageUtil.removeAddressFromBalanceCache(caipAddress)}catch{console.info("Unable to get balance cache for address",caipAddress)}},updateBalanceCache(params){try{const cache=StorageUtil.getBalanceCache();cache[params.caipAddress]=params,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.PORTFOLIO_CACHE,JSON.stringify(cache))}catch{console.info("Unable to update balance cache",params)}},getNativeBalanceCache(){let cache={};try{const result=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.NATIVE_BALANCE_CACHE);cache=result?JSON.parse(result):{}}catch{console.info("Unable to get balance cache")}return cache},removeAddressFromNativeBalanceCache(caipAddress){try{const cache=StorageUtil.getBalanceCache();_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.NATIVE_BALANCE_CACHE,JSON.stringify({...cache,[caipAddress]:void 0}))}catch{console.info("Unable to remove address from balance cache",caipAddress)}},getNativeBalanceCacheForCaipAddress(caipAddress){try{const nativeBalanceCache=StorageUtil.getNativeBalanceCache()[caipAddress];if(nativeBalanceCache&&!this.isCacheExpired(nativeBalanceCache.timestamp,this.cacheExpiry.nativeBalance))return nativeBalanceCache;console.info("Discarding cache for address",caipAddress),StorageUtil.removeAddressFromBalanceCache(caipAddress)}catch{console.info("Unable to get balance cache for address",caipAddress)}},updateNativeBalanceCache(params){try{const cache=StorageUtil.getNativeBalanceCache();cache[params.caipAddress]=params,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.NATIVE_BALANCE_CACHE,JSON.stringify(cache))}catch{console.info("Unable to update balance cache",params)}},getEnsCache(){let cache={};try{const result=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ENS_CACHE);cache=result?JSON.parse(result):{}}catch{console.info("Unable to get ens name cache")}return cache},getEnsFromCacheForAddress(address){try{const ensCache=StorageUtil.getEnsCache()[address];if(ensCache&&!this.isCacheExpired(ensCache.timestamp,this.cacheExpiry.ens))return ensCache.ens;StorageUtil.removeEnsFromCache(address)}catch{console.info("Unable to get ens name from cache",address)}},updateEnsCache(params){try{const cache=StorageUtil.getEnsCache();cache[params.address]=params,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ENS_CACHE,JSON.stringify(cache))}catch{console.info("Unable to update ens name cache",params)}},removeEnsFromCache(address){try{const cache=StorageUtil.getEnsCache();_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ENS_CACHE,JSON.stringify({...cache,[address]:void 0}))}catch{console.info("Unable to remove ens name from cache",address)}},getIdentityCache(){let cache={};try{const result=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.IDENTITY_CACHE);cache=result?JSON.parse(result):{}}catch{console.info("Unable to get identity cache")}return cache},getIdentityFromCacheForAddress(address){try{const identityCache=StorageUtil.getIdentityCache()[address];if(identityCache&&!this.isCacheExpired(identityCache.timestamp,this.cacheExpiry.identity))return identityCache.identity;StorageUtil.removeIdentityFromCache(address)}catch{console.info("Unable to get identity from cache",address)}},updateIdentityCache(params){try{const cache=StorageUtil.getIdentityCache();cache[params.address]={identity:params.identity,timestamp:params.timestamp},_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.IDENTITY_CACHE,JSON.stringify(cache))}catch{console.info("Unable to update identity cache",params)}},removeIdentityFromCache(address){try{const cache=StorageUtil.getIdentityCache();_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.IDENTITY_CACHE,JSON.stringify({...cache,[address]:void 0}))}catch{console.info("Unable to remove identity from cache",address)}},clearAddressCache(){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.PORTFOLIO_CACHE),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.NATIVE_BALANCE_CACHE),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.ENS_CACHE),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.removeItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.IDENTITY_CACHE)}catch{console.info("Unable to clear address cache")}},setPreferredAccountTypes(accountTypes){try{_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.PREFERRED_ACCOUNT_TYPES,JSON.stringify(accountTypes))}catch{console.info("Unable to set preferred account types",accountTypes)}},getPreferredAccountTypes(){try{const result=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.PREFERRED_ACCOUNT_TYPES);return result?JSON.parse(result):{}}catch{console.info("Unable to get preferred account types")}return{}},setConnections(connections,chainNamespace){try{const newConnections={...StorageUtil.getConnections(),[chainNamespace]:connections};_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.setItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTIONS,JSON.stringify(newConnections))}catch(error){console.error("Unable to sync connections to storage",error)}},getConnections(){try{const connectionsStorage=_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ud.getItem(_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.Ws.CONNECTIONS);return connectionsStorage?JSON.parse(connectionsStorage):{}}catch(error){return console.error("Unable to get connections from storage",error),{}}}}},"./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>AppKitError,X:()=>withErrorBoundary});var vanilla=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),utils=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs"),CoreHelperUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),FetchUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js"),OptionsController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js");const DEFAULT_STATE=Object.freeze({enabled:!0,events:[]}),api=new FetchUtil.Z({baseUrl:CoreHelperUtil.w.getAnalyticsUrl(),clientId:null}),state=(0,vanilla.BX)({...DEFAULT_STATE}),TelemetryController={state,subscribeKey:(key,callback)=>(0,utils.u$)(state,key,callback),async sendError(error,category){if(!state.enabled)return;const now=Date.now();if(state.events.filter(event=>{const eventTime=new Date(event.properties.timestamp||"").getTime();return now-eventTime<6e4}).length>=5)return;const errorEvent={type:"error",event:category,properties:{errorType:error.name,errorMessage:error.message,stackTrace:error.stack,timestamp:(new Date).toISOString()}};state.events.push(errorEvent);try{if("undefined"==typeof window)return;const{projectId,sdkType,sdkVersion}=OptionsController.H.state;await api.post({path:"/e",params:{projectId,st:sdkType,sv:sdkVersion||"html-wagmi-4.2.2"},body:{eventId:CoreHelperUtil.w.getUUID(),url:window.location.href,domain:window.location.hostname,timestamp:(new Date).toISOString(),props:{type:"error",event:category,errorType:error.name,errorMessage:error.message,stackTrace:error.stack}}})}catch{}},enable(){state.enabled=!0},disable(){state.enabled=!1},clearEvents(){state.events=[]}};class AppKitError extends Error{constructor(message,category,originalError){super(message),this.name="AppKitError",this.category=category,this.originalError=originalError,Object.setPrototypeOf(this,AppKitError.prototype);let isStackConstructedFromOriginal=!1;if(originalError instanceof Error&&"string"==typeof originalError.stack&&originalError.stack){const originalErrorStack=originalError.stack,firstNewlineIndex=originalErrorStack.indexOf("\n");if(firstNewlineIndex>-1){const originalFrames=originalErrorStack.substring(firstNewlineIndex+1);this.stack=`${this.name}: ${this.message}\n${originalFrames}`,isStackConstructedFromOriginal=!0}}isStackConstructedFromOriginal||(Error.captureStackTrace?Error.captureStackTrace(this,AppKitError):this.stack||(this.stack=`${this.name}: ${this.message}`))}}function errorHandler(err,defaultCategory){const error=err instanceof AppKitError?err:new AppKitError(err instanceof Error?err.message:String(err),defaultCategory,err);throw TelemetryController.sendError(error,error.category),error}function withErrorBoundary(controller,defaultCategory="INTERNAL_SDK_ERROR"){const newController={};return Object.keys(controller).forEach(key=>{const original=controller[key];if("function"==typeof original){let wrapped=original;wrapped="AsyncFunction"===original.constructor.name?async(...args)=>{try{return await original(...args)}catch(err){return errorHandler(err,defaultCategory)}}:(...args)=>{try{return original(...args)}catch(err){return errorHandler(err,defaultCategory)}},newController[key]=wrapped}else newController[key]=original}),newController}},"./node_modules/@reown/appkit-controllers/node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Vl:()=>W3mFrameRpcConstants});var process=__webpack_require__("./node_modules/process/browser.js");void 0!==process&&void 0!==process.env&&process.env.NEXT_PUBLIC_SECURE_SITE_SDK_URL,void 0!==process&&void 0!==process.env&&process.env.NEXT_PUBLIC_DEFAULT_LOG_LEVEL,void 0!==process&&void 0!==process.env&&process.env.NEXT_PUBLIC_SECURE_SITE_SDK_VERSION;const W3mFrameRpcConstants={SAFE_RPC_METHODS:["eth_accounts","eth_blockNumber","eth_call","eth_chainId","eth_estimateGas","eth_feeHistory","eth_gasPrice","eth_getAccount","eth_getBalance","eth_getBlockByHash","eth_getBlockByNumber","eth_getBlockReceipts","eth_getBlockTransactionCountByHash","eth_getBlockTransactionCountByNumber","eth_getCode","eth_getFilterChanges","eth_getFilterLogs","eth_getLogs","eth_getProof","eth_getStorageAt","eth_getTransactionByBlockHashAndIndex","eth_getTransactionByBlockNumberAndIndex","eth_getTransactionByHash","eth_getTransactionCount","eth_getTransactionReceipt","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_maxPriorityFeePerGas","eth_newBlockFilter","eth_newFilter","eth_newPendingTransactionFilter","eth_sendRawTransaction","eth_syncing","eth_uninstallFilter","wallet_getCapabilities","wallet_getCallsStatus","eth_getUserOperationReceipt","eth_estimateUserOperationGas","eth_getUserOperationByHash","eth_supportedEntryPoints","wallet_getAssets"],NOT_SAFE_RPC_METHODS:["personal_sign","eth_signTypedData_v4","eth_sendTransaction","solana_signMessage","solana_signTransaction","solana_signAllTransactions","solana_signAndSendTransaction","wallet_sendCalls","wallet_grantPermissions","wallet_revokePermissions","eth_sendUserOperation"],GET_CHAIN_ID:"eth_chainId",RPC_METHOD_NOT_ALLOWED_MESSAGE:"Requested RPC call is not allowed",RPC_METHOD_NOT_ALLOWED_UI_MESSAGE:"Action not allowed",ACCOUNT_TYPES:{EOA:"eoa",SMART_ACCOUNT:"smartAccount"}}},"./node_modules/@reown/appkit-ui/dist/esm/exports/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Zv:()=>UiHelperUtil.Z,EM:()=>WebComponentsUtil.E,RF:()=>ThemeUtil.RF,JX:()=>ThemeUtil.JX,ds:()=>ThemeUtil.ds});var ThemeUtil=__webpack_require__("./node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeUtil.js"),UiHelperUtil=__webpack_require__("./node_modules/@reown/appkit-ui/dist/esm/src/utils/UiHelperUtil.js"),dayjs_min=__webpack_require__("./node_modules/dayjs/dayjs.min.js"),dayjs_min_default=__webpack_require__.n(dayjs_min),en=__webpack_require__("./node_modules/dayjs/locale/en.js"),en_default=__webpack_require__.n(en),relativeTime=__webpack_require__("./node_modules/dayjs/plugin/relativeTime.js"),relativeTime_default=__webpack_require__.n(relativeTime),updateLocale=__webpack_require__("./node_modules/dayjs/plugin/updateLocale.js"),updateLocale_default=__webpack_require__.n(updateLocale);dayjs_min_default().extend(relativeTime_default()),dayjs_min_default().extend(updateLocale_default());const localeObject={...en_default(),name:"en-web3-modal",relativeTime:{future:"in %s",past:"%s ago",s:"%d sec",m:"1 min",mm:"%d min",h:"1 hr",hh:"%d hrs",d:"1 d",dd:"%d d",M:"1 mo",MM:"%d mo",y:"1 yr",yy:"%d yr"}};dayjs_min_default().locale("en-web3-modal",localeObject);var WebComponentsUtil=__webpack_require__("./node_modules/@reown/appkit-ui/dist/esm/src/utils/WebComponentsUtil.js")},"./node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{JX:()=>setColorTheme,RF:()=>initializeTheming,W5:()=>resetStyles,ck:()=>colorStyles,ds:()=>setThemeVariables,fD:()=>elementStyles});var lit__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/lit/index.js"),_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js");let themeTag,darkModeTag,lightModeTag;function initializeTheming(themeVariables,themeMode){themeTag=document.createElement("style"),darkModeTag=document.createElement("style"),lightModeTag=document.createElement("style"),themeTag.textContent=createRootStyles(themeVariables).core.cssText,darkModeTag.textContent=createRootStyles(themeVariables).dark.cssText,lightModeTag.textContent=createRootStyles(themeVariables).light.cssText,document.head.appendChild(themeTag),document.head.appendChild(darkModeTag),document.head.appendChild(lightModeTag),setColorTheme(themeMode)}function setColorTheme(themeMode){darkModeTag&&lightModeTag&&("light"===themeMode?(darkModeTag.removeAttribute("media"),lightModeTag.media="enabled"):(lightModeTag.removeAttribute("media"),darkModeTag.media="enabled"))}function setThemeVariables(themeVariables){themeTag&&darkModeTag&&lightModeTag&&(themeTag.textContent=createRootStyles(themeVariables).core.cssText,darkModeTag.textContent=createRootStyles(themeVariables).dark.cssText,lightModeTag.textContent=createRootStyles(themeVariables).light.cssText)}function createRootStyles(themeVariables){return{core:lit__WEBPACK_IMPORTED_MODULE_0__.AH`
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
      @keyframes w3m-shake {
        0% {
          transform: scale(1) rotate(0deg);
        }
        20% {
          transform: scale(1) rotate(-1deg);
        }
        40% {
          transform: scale(1) rotate(1.5deg);
        }
        60% {
          transform: scale(1) rotate(-1.5deg);
        }
        80% {
          transform: scale(1) rotate(1deg);
        }
        100% {
          transform: scale(1) rotate(0deg);
        }
      }
      @keyframes w3m-iframe-fade-out {
        0% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
      @keyframes w3m-iframe-zoom-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        100% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes w3m-iframe-zoom-in-mobile {
        0% {
          transform: scale(0.95);
          opacity: 0;
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }
      :root {
        --w3m-modal-width: 360px;
        --w3m-color-mix-strength: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)(themeVariables?.["--w3m-color-mix-strength"]?`${themeVariables["--w3m-color-mix-strength"]}%`:"0%")};
        --w3m-font-family: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)(themeVariables?.["--w3m-font-family"]||"Inter, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;")};
        --w3m-font-size-master: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)(themeVariables?.["--w3m-font-size-master"]||"10px")};
        --w3m-border-radius-master: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)(themeVariables?.["--w3m-border-radius-master"]||"4px")};
        --w3m-z-index: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)(themeVariables?.["--w3m-z-index"]||999)};

        --wui-font-family: var(--w3m-font-family);

        --wui-font-size-mini: calc(var(--w3m-font-size-master) * 0.8);
        --wui-font-size-micro: var(--w3m-font-size-master);
        --wui-font-size-tiny: calc(var(--w3m-font-size-master) * 1.2);
        --wui-font-size-small: calc(var(--w3m-font-size-master) * 1.4);
        --wui-font-size-paragraph: calc(var(--w3m-font-size-master) * 1.6);
        --wui-font-size-medium: calc(var(--w3m-font-size-master) * 1.8);
        --wui-font-size-large: calc(var(--w3m-font-size-master) * 2);
        --wui-font-size-title-6: calc(var(--w3m-font-size-master) * 2.2);
        --wui-font-size-medium-title: calc(var(--w3m-font-size-master) * 2.4);
        --wui-font-size-2xl: calc(var(--w3m-font-size-master) * 4);

        --wui-border-radius-5xs: var(--w3m-border-radius-master);
        --wui-border-radius-4xs: calc(var(--w3m-border-radius-master) * 1.5);
        --wui-border-radius-3xs: calc(var(--w3m-border-radius-master) * 2);
        --wui-border-radius-xxs: calc(var(--w3m-border-radius-master) * 3);
        --wui-border-radius-xs: calc(var(--w3m-border-radius-master) * 4);
        --wui-border-radius-s: calc(var(--w3m-border-radius-master) * 5);
        --wui-border-radius-m: calc(var(--w3m-border-radius-master) * 7);
        --wui-border-radius-l: calc(var(--w3m-border-radius-master) * 9);
        --wui-border-radius-3xl: calc(var(--w3m-border-radius-master) * 20);

        --wui-font-weight-light: 400;
        --wui-font-weight-regular: 500;
        --wui-font-weight-medium: 600;
        --wui-font-weight-bold: 700;

        --wui-letter-spacing-2xl: -1.6px;
        --wui-letter-spacing-medium-title: -0.96px;
        --wui-letter-spacing-title-6: -0.88px;
        --wui-letter-spacing-large: -0.8px;
        --wui-letter-spacing-medium: -0.72px;
        --wui-letter-spacing-paragraph: -0.64px;
        --wui-letter-spacing-small: -0.56px;
        --wui-letter-spacing-tiny: -0.48px;
        --wui-letter-spacing-micro: -0.2px;
        --wui-letter-spacing-mini: -0.16px;

        --wui-spacing-0: 0px;
        --wui-spacing-4xs: 2px;
        --wui-spacing-3xs: 4px;
        --wui-spacing-xxs: 6px;
        --wui-spacing-2xs: 7px;
        --wui-spacing-xs: 8px;
        --wui-spacing-1xs: 10px;
        --wui-spacing-s: 12px;
        --wui-spacing-m: 14px;
        --wui-spacing-l: 16px;
        --wui-spacing-2l: 18px;
        --wui-spacing-xl: 20px;
        --wui-spacing-xxl: 24px;
        --wui-spacing-2xl: 32px;
        --wui-spacing-3xl: 40px;
        --wui-spacing-4xl: 90px;
        --wui-spacing-5xl: 95px;

        --wui-icon-box-size-xxs: 14px;
        --wui-icon-box-size-xs: 20px;
        --wui-icon-box-size-sm: 24px;
        --wui-icon-box-size-md: 32px;
        --wui-icon-box-size-mdl: 36px;
        --wui-icon-box-size-lg: 40px;
        --wui-icon-box-size-2lg: 48px;
        --wui-icon-box-size-xl: 64px;

        --wui-icon-size-inherit: inherit;
        --wui-icon-size-xxs: 10px;
        --wui-icon-size-xs: 12px;
        --wui-icon-size-sm: 14px;
        --wui-icon-size-md: 16px;
        --wui-icon-size-mdl: 18px;
        --wui-icon-size-lg: 20px;
        --wui-icon-size-xl: 24px;
        --wui-icon-size-xxl: 28px;

        --wui-wallet-image-size-inherit: inherit;
        --wui-wallet-image-size-sm: 40px;
        --wui-wallet-image-size-md: 56px;
        --wui-wallet-image-size-lg: 80px;

        --wui-visual-size-size-inherit: inherit;
        --wui-visual-size-sm: 40px;
        --wui-visual-size-md: 55px;
        --wui-visual-size-lg: 80px;

        --wui-box-size-md: 100px;
        --wui-box-size-lg: 120px;

        --wui-ease-out-power-2: cubic-bezier(0, 0, 0.22, 1);
        --wui-ease-out-power-1: cubic-bezier(0, 0, 0.55, 1);

        --wui-ease-in-power-3: cubic-bezier(0.66, 0, 1, 1);
        --wui-ease-in-power-2: cubic-bezier(0.45, 0, 1, 1);
        --wui-ease-in-power-1: cubic-bezier(0.3, 0, 1, 1);

        --wui-ease-inout-power-1: cubic-bezier(0.45, 0, 0.55, 1);

        --wui-duration-lg: 200ms;
        --wui-duration-md: 125ms;
        --wui-duration-sm: 75ms;

        --wui-path-network-sm: path(
          'M15.4 2.1a5.21 5.21 0 0 1 5.2 0l11.61 6.7a5.21 5.21 0 0 1 2.61 4.52v13.4c0 1.87-1 3.59-2.6 4.52l-11.61 6.7c-1.62.93-3.6.93-5.22 0l-11.6-6.7a5.21 5.21 0 0 1-2.61-4.51v-13.4c0-1.87 1-3.6 2.6-4.52L15.4 2.1Z'
        );

        --wui-path-network-md: path(
          'M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z'
        );

        --wui-path-network-lg: path(
          'M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z'
        );

        --wui-width-network-sm: 36px;
        --wui-width-network-md: 48px;
        --wui-width-network-lg: 86px;

        --wui-height-network-sm: 40px;
        --wui-height-network-md: 54px;
        --wui-height-network-lg: 96px;

        --wui-icon-size-network-xs: 12px;
        --wui-icon-size-network-sm: 16px;
        --wui-icon-size-network-md: 24px;
        --wui-icon-size-network-lg: 42px;

        --wui-color-inherit: inherit;

        --wui-color-inverse-100: #fff;
        --wui-color-inverse-000: #000;

        --wui-cover: rgba(20, 20, 20, 0.8);

        --wui-color-modal-bg: var(--wui-color-modal-bg-base);

        --wui-color-accent-100: var(--wui-color-accent-base-100);
        --wui-color-accent-090: var(--wui-color-accent-base-090);
        --wui-color-accent-080: var(--wui-color-accent-base-080);

        --wui-color-success-100: var(--wui-color-success-base-100);
        --wui-color-success-125: var(--wui-color-success-base-125);

        --wui-color-warning-100: var(--wui-color-warning-base-100);

        --wui-color-error-100: var(--wui-color-error-base-100);
        --wui-color-error-125: var(--wui-color-error-base-125);

        --wui-color-blue-100: var(--wui-color-blue-base-100);
        --wui-color-blue-90: var(--wui-color-blue-base-90);

        --wui-icon-box-bg-error-100: var(--wui-icon-box-bg-error-base-100);
        --wui-icon-box-bg-blue-100: var(--wui-icon-box-bg-blue-base-100);
        --wui-icon-box-bg-success-100: var(--wui-icon-box-bg-success-base-100);
        --wui-icon-box-bg-inverse-100: var(--wui-icon-box-bg-inverse-base-100);

        --wui-all-wallets-bg-100: var(--wui-all-wallets-bg-100);

        --wui-avatar-border: var(--wui-avatar-border-base);

        --wui-thumbnail-border: var(--wui-thumbnail-border-base);

        --wui-wallet-button-bg: var(--wui-wallet-button-bg-base);

        --wui-box-shadow-blue: var(--wui-color-accent-glass-020);
      }

      @supports (background: color-mix(in srgb, white 50%, black)) {
        :root {
          --wui-color-modal-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-modal-bg-base)
          );

          --wui-box-shadow-blue: color-mix(in srgb, var(--wui-color-accent-100) 20%, transparent);

          --wui-color-accent-100: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 100%,
            transparent
          );
          --wui-color-accent-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-glass-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-020: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 20%,
            transparent
          );
          --wui-color-accent-glass-015: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 15%,
            transparent
          );
          --wui-color-accent-glass-010: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 10%,
            transparent
          );
          --wui-color-accent-glass-005: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 5%,
            transparent
          );
          --wui-color-accent-002: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 2%,
            transparent
          );

          --wui-color-fg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-100)
          );
          --wui-color-fg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-125)
          );
          --wui-color-fg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-150)
          );
          --wui-color-fg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-175)
          );
          --wui-color-fg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-200)
          );
          --wui-color-fg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-225)
          );
          --wui-color-fg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-250)
          );
          --wui-color-fg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-275)
          );
          --wui-color-fg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-300)
          );
          --wui-color-fg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-325)
          );
          --wui-color-fg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-350)
          );

          --wui-color-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-100)
          );
          --wui-color-bg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-125)
          );
          --wui-color-bg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-150)
          );
          --wui-color-bg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-175)
          );
          --wui-color-bg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-200)
          );
          --wui-color-bg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-225)
          );
          --wui-color-bg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-250)
          );
          --wui-color-bg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-275)
          );
          --wui-color-bg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-300)
          );
          --wui-color-bg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-325)
          );
          --wui-color-bg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-350)
          );

          --wui-color-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-100)
          );
          --wui-color-success-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-125)
          );

          --wui-color-warning-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-warning-base-100)
          );

          --wui-color-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-100)
          );
          --wui-color-blue-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-100)
          );
          --wui-color-blue-90: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-90)
          );
          --wui-color-error-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-125)
          );

          --wui-icon-box-bg-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-error-base-100)
          );
          --wui-icon-box-bg-accent-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-blue-base-100)
          );
          --wui-icon-box-bg-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-success-base-100)
          );
          --wui-icon-box-bg-inverse-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-inverse-base-100)
          );

          --wui-all-wallets-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-all-wallets-bg-100)
          );

          --wui-avatar-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-avatar-border-base)
          );

          --wui-thumbnail-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-thumbnail-border-base)
          );

          --wui-wallet-button-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-wallet-button-bg-base)
          );
        }
      }
    `,light:lit__WEBPACK_IMPORTED_MODULE_0__.AH`
      :root {
        --w3m-color-mix: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)(themeVariables?.["--w3m-color-mix"]||"#fff")};
        --w3m-accent: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)((0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__.o)(themeVariables,"dark")["--w3m-accent"])};
        --w3m-default: #fff;

        --wui-color-modal-bg-base: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)((0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__.o)(themeVariables,"dark")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(230, 100%, 67%, 1);
        --wui-color-blueberry-090: hsla(231, 76%, 61%, 1);
        --wui-color-blueberry-080: hsla(230, 59%, 55%, 1);
        --wui-color-blueberry-050: hsla(231, 100%, 70%, 0.1);

        --wui-color-fg-100: #e4e7e7;
        --wui-color-fg-125: #d0d5d5;
        --wui-color-fg-150: #a8b1b1;
        --wui-color-fg-175: #a8b0b0;
        --wui-color-fg-200: #949e9e;
        --wui-color-fg-225: #868f8f;
        --wui-color-fg-250: #788080;
        --wui-color-fg-275: #788181;
        --wui-color-fg-300: #6e7777;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #363636;

        --wui-color-bg-100: #141414;
        --wui-color-bg-125: #191a1a;
        --wui-color-bg-150: #1e1f1f;
        --wui-color-bg-175: #222525;
        --wui-color-bg-200: #272a2a;
        --wui-color-bg-225: #2c3030;
        --wui-color-bg-250: #313535;
        --wui-color-bg-275: #363b3b;
        --wui-color-bg-300: #3b4040;
        --wui-color-bg-325: #252525;
        --wui-color-bg-350: #ffffff;

        --wui-color-success-base-100: #26d962;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f25a67;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 217, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 217, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 217, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 217, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 217, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 217, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 217, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 217, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 217, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 217, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(242, 90, 103, 0.01);
        --wui-color-error-glass-002: rgba(242, 90, 103, 0.02);
        --wui-color-error-glass-005: rgba(242, 90, 103, 0.05);
        --wui-color-error-glass-010: rgba(242, 90, 103, 0.1);
        --wui-color-error-glass-015: rgba(242, 90, 103, 0.15);
        --wui-color-error-glass-020: rgba(242, 90, 103, 0.2);
        --wui-color-error-glass-025: rgba(242, 90, 103, 0.25);
        --wui-color-error-glass-030: rgba(242, 90, 103, 0.3);
        --wui-color-error-glass-060: rgba(242, 90, 103, 0.6);
        --wui-color-error-glass-080: rgba(242, 90, 103, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-color-gray-glass-001: rgba(255, 255, 255, 0.01);
        --wui-color-gray-glass-002: rgba(255, 255, 255, 0.02);
        --wui-color-gray-glass-005: rgba(255, 255, 255, 0.05);
        --wui-color-gray-glass-010: rgba(255, 255, 255, 0.1);
        --wui-color-gray-glass-015: rgba(255, 255, 255, 0.15);
        --wui-color-gray-glass-020: rgba(255, 255, 255, 0.2);
        --wui-color-gray-glass-025: rgba(255, 255, 255, 0.25);
        --wui-color-gray-glass-030: rgba(255, 255, 255, 0.3);
        --wui-color-gray-glass-060: rgba(255, 255, 255, 0.6);
        --wui-color-gray-glass-080: rgba(255, 255, 255, 0.8);
        --wui-color-gray-glass-090: rgba(255, 255, 255, 0.9);

        --wui-color-dark-glass-100: rgba(42, 42, 42, 1);

        --wui-icon-box-bg-error-base-100: #3c2426;
        --wui-icon-box-bg-blue-base-100: #20303f;
        --wui-icon-box-bg-success-base-100: #1f3a28;
        --wui-icon-box-bg-inverse-base-100: #243240;

        --wui-all-wallets-bg-100: #222b35;

        --wui-avatar-border-base: #252525;

        --wui-thumbnail-border-base: #252525;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --w3m-card-embedded-shadow-color: rgb(17 17 18 / 25%);
      }
    `,dark:lit__WEBPACK_IMPORTED_MODULE_0__.AH`
      :root {
        --w3m-color-mix: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)(themeVariables?.["--w3m-color-mix"]||"#000")};
        --w3m-accent: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)((0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__.o)(themeVariables,"light")["--w3m-accent"])};
        --w3m-default: #000;

        --wui-color-modal-bg-base: ${(0,lit__WEBPACK_IMPORTED_MODULE_0__.iz)((0,_reown_appkit_common__WEBPACK_IMPORTED_MODULE_1__.o)(themeVariables,"light")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(231, 100%, 70%, 1);
        --wui-color-blueberry-090: hsla(231, 97%, 72%, 1);
        --wui-color-blueberry-080: hsla(231, 92%, 74%, 1);

        --wui-color-fg-100: #141414;
        --wui-color-fg-125: #2d3131;
        --wui-color-fg-150: #474d4d;
        --wui-color-fg-175: #636d6d;
        --wui-color-fg-200: #798686;
        --wui-color-fg-225: #828f8f;
        --wui-color-fg-250: #8b9797;
        --wui-color-fg-275: #95a0a0;
        --wui-color-fg-300: #9ea9a9;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #d0d0d0;

        --wui-color-bg-100: #ffffff;
        --wui-color-bg-125: #f5fafa;
        --wui-color-bg-150: #f3f8f8;
        --wui-color-bg-175: #eef4f4;
        --wui-color-bg-200: #eaf1f1;
        --wui-color-bg-225: #e5eded;
        --wui-color-bg-250: #e1e9e9;
        --wui-color-bg-275: #dce7e7;
        --wui-color-bg-300: #d8e3e3;
        --wui-color-bg-325: #f3f3f3;
        --wui-color-bg-350: #202020;

        --wui-color-success-base-100: #26b562;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f05142;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 181, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 181, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 181, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 181, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 181, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 181, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 181, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 181, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 181, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 181, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(240, 81, 66, 0.01);
        --wui-color-error-glass-002: rgba(240, 81, 66, 0.02);
        --wui-color-error-glass-005: rgba(240, 81, 66, 0.05);
        --wui-color-error-glass-010: rgba(240, 81, 66, 0.1);
        --wui-color-error-glass-015: rgba(240, 81, 66, 0.15);
        --wui-color-error-glass-020: rgba(240, 81, 66, 0.2);
        --wui-color-error-glass-025: rgba(240, 81, 66, 0.25);
        --wui-color-error-glass-030: rgba(240, 81, 66, 0.3);
        --wui-color-error-glass-060: rgba(240, 81, 66, 0.6);
        --wui-color-error-glass-080: rgba(240, 81, 66, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-icon-box-bg-error-base-100: #f4dfdd;
        --wui-icon-box-bg-blue-base-100: #d9ecfb;
        --wui-icon-box-bg-success-base-100: #daf0e4;
        --wui-icon-box-bg-inverse-base-100: #dcecfc;

        --wui-all-wallets-bg-100: #e8f1fa;

        --wui-avatar-border-base: #f3f4f4;

        --wui-thumbnail-border-base: #eaefef;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --wui-color-gray-glass-001: rgba(0, 0, 0, 0.01);
        --wui-color-gray-glass-002: rgba(0, 0, 0, 0.02);
        --wui-color-gray-glass-005: rgba(0, 0, 0, 0.05);
        --wui-color-gray-glass-010: rgba(0, 0, 0, 0.1);
        --wui-color-gray-glass-015: rgba(0, 0, 0, 0.15);
        --wui-color-gray-glass-020: rgba(0, 0, 0, 0.2);
        --wui-color-gray-glass-025: rgba(0, 0, 0, 0.25);
        --wui-color-gray-glass-030: rgba(0, 0, 0, 0.3);
        --wui-color-gray-glass-060: rgba(0, 0, 0, 0.6);
        --wui-color-gray-glass-080: rgba(0, 0, 0, 0.8);
        --wui-color-gray-glass-090: rgba(0, 0, 0, 0.9);

        --wui-color-dark-glass-100: rgba(233, 233, 233, 1);

        --w3m-card-embedded-shadow-color: rgb(224 225 233 / 25%);
      }
    `}}const resetStyles=lit__WEBPACK_IMPORTED_MODULE_0__.AH`
  *,
  *::after,
  *::before,
  :host {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-style: normal;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    font-family: var(--wui-font-family);
    backface-visibility: hidden;
  }
`,elementStyles=lit__WEBPACK_IMPORTED_MODULE_0__.AH`
  button,
  a {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    transition:
      color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      background-color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1),
      box-shadow var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: background-color, color, border, box-shadow, border-radius;
    outline: none;
    border: none;
    column-gap: var(--wui-spacing-3xs);
    background-color: transparent;
    text-decoration: none;
  }

  wui-flex {
    transition: border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: border-radius;
  }

  button:disabled > wui-wallet-image,
  button:disabled > wui-all-wallets-image,
  button:disabled > wui-network-image,
  button:disabled > wui-image,
  button:disabled > wui-transaction-visual,
  button:disabled > wui-logo {
    filter: grayscale(1);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-color-gray-glass-005);
    }

    button:active:enabled {
      background-color: var(--wui-color-gray-glass-010);
    }
  }

  button:disabled > wui-icon-box {
    opacity: 0.5;
  }

  input {
    border: none;
    outline: none;
    appearance: none;
  }
`,colorStyles=lit__WEBPACK_IMPORTED_MODULE_0__.AH`
  .wui-color-inherit {
    color: var(--wui-color-inherit);
  }

  .wui-color-accent-100 {
    color: var(--wui-color-accent-100);
  }

  .wui-color-error-100 {
    color: var(--wui-color-error-100);
  }

  .wui-color-blue-100 {
    color: var(--wui-color-blue-100);
  }

  .wui-color-blue-90 {
    color: var(--wui-color-blue-90);
  }

  .wui-color-error-125 {
    color: var(--wui-color-error-125);
  }

  .wui-color-success-100 {
    color: var(--wui-color-success-100);
  }

  .wui-color-success-125 {
    color: var(--wui-color-success-125);
  }

  .wui-color-inverse-100 {
    color: var(--wui-color-inverse-100);
  }

  .wui-color-inverse-000 {
    color: var(--wui-color-inverse-000);
  }

  .wui-color-fg-100 {
    color: var(--wui-color-fg-100);
  }

  .wui-color-fg-200 {
    color: var(--wui-color-fg-200);
  }

  .wui-color-fg-300 {
    color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    color: var(--wui-color-fg-350);
  }

  .wui-bg-color-inherit {
    background-color: var(--wui-color-inherit);
  }

  .wui-bg-color-blue-100 {
    background-color: var(--wui-color-accent-100);
  }

  .wui-bg-color-error-100 {
    background-color: var(--wui-color-error-100);
  }

  .wui-bg-color-error-125 {
    background-color: var(--wui-color-error-125);
  }

  .wui-bg-color-success-100 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-success-125 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-inverse-100 {
    background-color: var(--wui-color-inverse-100);
  }

  .wui-bg-color-inverse-000 {
    background-color: var(--wui-color-inverse-000);
  }

  .wui-bg-color-fg-100 {
    background-color: var(--wui-color-fg-100);
  }

  .wui-bg-color-fg-200 {
    background-color: var(--wui-color-fg-200);
  }

  .wui-bg-color-fg-300 {
    background-color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    background-color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    background-color: var(--wui-color-fg-350);
  }
`},"./node_modules/@reown/appkit-ui/dist/esm/src/utils/UiHelperUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>UiHelperUtil});const UiHelperUtil={getSpacingStyles:(spacing,index)=>Array.isArray(spacing)?spacing[index]?`var(--wui-spacing-${spacing[index]})`:void 0:"string"==typeof spacing?`var(--wui-spacing-${spacing})`:void 0,getFormattedDate:date=>new Intl.DateTimeFormat("en-US",{month:"short",day:"numeric"}).format(date),getHostName(url){try{return new URL(url).hostname}catch(error){return""}},getTruncateString:({string,charsStart,charsEnd,truncate})=>string.length<=charsStart+charsEnd?string:"end"===truncate?`${string.substring(0,charsStart)}...`:"start"===truncate?`...${string.substring(string.length-charsEnd)}`:`${string.substring(0,Math.floor(charsStart))}...${string.substring(string.length-Math.floor(charsEnd))}`,generateAvatarColors(address){const baseColor=address.toLowerCase().replace(/^0x/iu,"").replace(/[^a-f0-9]/gu,"").substring(0,6).padEnd(6,"0"),rgbColor=this.hexToRgb(baseColor),masterBorderRadius=getComputedStyle(document.documentElement).getPropertyValue("--w3m-border-radius-master"),edge=100-3*Number(masterBorderRadius?.replace("px","")),gradientCircle=`${edge}% ${edge}% at 65% 40%`,colors=[];for(let i=0;i<5;i+=1){const tintedColor=this.tintColor(rgbColor,.15*i);colors.push(`rgb(${tintedColor[0]}, ${tintedColor[1]}, ${tintedColor[2]})`)}return`\n    --local-color-1: ${colors[0]};\n    --local-color-2: ${colors[1]};\n    --local-color-3: ${colors[2]};\n    --local-color-4: ${colors[3]};\n    --local-color-5: ${colors[4]};\n    --local-radial-circle: ${gradientCircle}\n   `},hexToRgb(hex){const bigint=parseInt(hex,16);return[bigint>>16&255,bigint>>8&255,255&bigint]},tintColor(rgb,tint){const[r,g,b]=rgb;return[Math.round(r+(255-r)*tint),Math.round(g+(255-g)*tint),Math.round(b+(255-b)*tint)]},isNumber:character=>/^[0-9]+$/u.test(character),getColorTheme:theme=>theme||("undefined"!=typeof window&&window.matchMedia?window.matchMedia("(prefers-color-scheme: dark)")?.matches?"dark":"light":"dark"),splitBalance(input){const parts=input.split(".");return 2===parts.length?[parts[0],parts[1]]:["0","00"]},roundNumber:(number,threshold,fixed)=>number.toString().length>=threshold?Number(number).toFixed(fixed):number,formatNumberToLocalString:(value,decimals=2)=>void 0===value?"0.00":"number"==typeof value?value.toLocaleString("en-US",{maximumFractionDigits:decimals,minimumFractionDigits:decimals}):parseFloat(value).toLocaleString("en-US",{maximumFractionDigits:decimals,minimumFractionDigits:decimals})}},"./node_modules/@reown/appkit-ui/dist/esm/src/utils/WebComponentsUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function customElement(tagName){return function create(classOrDescriptor){return"function"==typeof classOrDescriptor?function legacyCustomElement(tagName,clazz){return customElements.get(tagName)||customElements.define(tagName,clazz),clazz}(tagName,classOrDescriptor):function standardCustomElement(tagName,descriptor){const{kind,elements}=descriptor;return{kind,elements,finisher(clazz){customElements.get(tagName)||customElements.define(tagName,clazz)}}}(tagName,classOrDescriptor)}}__webpack_require__.d(__webpack_exports__,{E:()=>customElement})},"./node_modules/@reown/appkit-utils/dist/esm/src/ConstantsUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>ConstantsUtil});const ConstantsUtil={METMASK_CONNECTOR_NAME:"MetaMask",TRUST_CONNECTOR_NAME:"Trust Wallet",SOLFLARE_CONNECTOR_NAME:"Solflare",PHANTOM_CONNECTOR_NAME:"Phantom",COIN98_CONNECTOR_NAME:"Coin98",MAGIC_EDEN_CONNECTOR_NAME:"Magic Eden",BACKPACK_CONNECTOR_NAME:"Backpack",BITGET_CONNECTOR_NAME:"Bitget Wallet",FRONTIER_CONNECTOR_NAME:"Frontier",XVERSE_CONNECTOR_NAME:"Xverse Wallet",LEATHER_CONNECTOR_NAME:"Leather",EIP155:"eip155",ADD_CHAIN_METHOD:"wallet_addEthereumChain",EIP6963_ANNOUNCE_EVENT:"eip6963:announceProvider",EIP6963_REQUEST_EVENT:"eip6963:requestProvider",CONNECTOR_RDNS_MAP:{coinbaseWallet:"com.coinbase.wallet",coinbaseWalletSDK:"com.coinbase.wallet"},CONNECTOR_TYPE_EXTERNAL:"EXTERNAL",CONNECTOR_TYPE_WALLET_CONNECT:"WALLET_CONNECT",CONNECTOR_TYPE_INJECTED:"INJECTED",CONNECTOR_TYPE_ANNOUNCED:"ANNOUNCED",CONNECTOR_TYPE_AUTH:"AUTH",CONNECTOR_TYPE_MULTI_CHAIN:"MULTI_CHAIN",CONNECTOR_TYPE_W3M_AUTH:"ID_AUTH"}},"./node_modules/@reown/appkit-utils/dist/esm/src/HelpersUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{y:()=>HelpersUtil});var _ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reown/appkit-utils/dist/esm/src/ConstantsUtil.js");const HelpersUtil={getCaipTokens(tokens){if(!tokens)return;const caipTokens={};return Object.entries(tokens).forEach(([id,token])=>{caipTokens[`${_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_0__.o.EIP155}:${id}`]=token}),caipTokens},isLowerCaseMatch:(str1,str2)=>str1?.toLowerCase()===str2?.toLowerCase()}},"./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConnectorUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{g:()=>ConnectorUtil});var _reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js"),_reown_appkit_utils__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@reown/appkit-utils/dist/esm/src/HelpersUtil.js"),_WalletUtil_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/WalletUtil.js");const ConnectorUtil={getConnectorsByType(connectors,recommended,featured){const{customWallets}=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_5__.H.state,recent=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_7__.i.getRecentWallets(),filteredRecommended=_WalletUtil_js__WEBPACK_IMPORTED_MODULE_9__.A.filterOutDuplicateWallets(recommended),filteredFeatured=_WalletUtil_js__WEBPACK_IMPORTED_MODULE_9__.A.filterOutDuplicateWallets(featured),multiChain=connectors.filter(connector=>"MULTI_CHAIN"===connector.type),announced=connectors.filter(connector=>"ANNOUNCED"===connector.type),injected=connectors.filter(connector=>"INJECTED"===connector.type);return{custom:customWallets,recent,external:connectors.filter(connector=>"EXTERNAL"===connector.type),multiChain,announced,injected,recommended:filteredRecommended,featured:filteredFeatured}},showConnector(connector){const rdns=connector.info?.rdns,isRDNSExcluded=Boolean(rdns)&&_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_4__.N.state.excludedWallets.some(wallet=>Boolean(wallet.rdns)&&wallet.rdns===rdns),isNameExcluded=Boolean(connector.name)&&_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_4__.N.state.excludedWallets.some(wallet=>_reown_appkit_utils__WEBPACK_IMPORTED_MODULE_8__.y.isLowerCaseMatch(wallet.name,connector.name));if("INJECTED"===connector.type){if("Browser Wallet"===connector.name){if(!_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_6__.w.isMobile())return!1;if(_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_6__.w.isMobile()&&!rdns&&!_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_2__.x.checkInstalled())return!1}if(isRDNSExcluded||isNameExcluded)return!1}return"ANNOUNCED"!==connector.type&&"EXTERNAL"!==connector.type||!isRDNSExcluded&&!isNameExcluded},getIsConnectedWithWC:()=>Array.from(_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_1__.W.state.chains.values()).some(chain=>_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_3__.a.getConnectorId(chain.namespace)===_reown_appkit_common__WEBPACK_IMPORTED_MODULE_0__.o.CONNECTOR_ID.WALLET_CONNECT),getConnectorTypeOrder({recommended,featured,custom,recent,announced,injected,multiChain,external,overriddenConnectors=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_5__.H.state.features?.connectorTypeOrder??[]}){const isConnectedWithWC=ConnectorUtil.getIsConnectedWithWC(),enabledConnectors=[{type:"walletConnect",isEnabled:_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_5__.H.state.enableWalletConnect&&!isConnectedWithWC},{type:"recent",isEnabled:recent.length>0},{type:"injected",isEnabled:[...injected,...announced,...multiChain].length>0},{type:"featured",isEnabled:featured.length>0},{type:"custom",isEnabled:custom&&custom.length>0},{type:"external",isEnabled:external.length>0},{type:"recommended",isEnabled:recommended.length>0}].filter(option=>option.isEnabled),enabledConnectorTypes=new Set(enabledConnectors.map(option=>option.type)),prioritizedConnectors=overriddenConnectors.filter(type=>enabledConnectorTypes.has(type)).map(type=>({type,isEnabled:!0})),remainingConnectors=enabledConnectors.filter(({type:enabledConnectorType})=>!prioritizedConnectors.some(({type:prioritizedConnectorType})=>prioritizedConnectorType===enabledConnectorType));return Array.from(new Set([...prioritizedConnectors,...remainingConnectors].map(({type})=>type)))}}},"./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConstantsUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>ConstantsUtil});var process=__webpack_require__("./node_modules/process/browser.js");const ConstantsUtil={ACCOUNT_TABS:[{label:"Tokens"},{label:"NFTs"},{label:"Activity"}],SECURE_SITE_ORIGIN:(void 0!==process&&void 0!==process.env?process.env.NEXT_PUBLIC_SECURE_SITE_ORIGIN:void 0)||"https://secure.walletconnect.org",VIEW_DIRECTION:{Next:"next",Prev:"prev"},DEFAULT_CONNECT_METHOD_ORDER:["email","social","wallet"],ANIMATION_DURATIONS:{HeaderText:120,ModalHeight:150,ViewTransition:150}}},"./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/WalletUtil.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>WalletUtil});var _reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js"),_reown_appkit_utils__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reown/appkit-utils/dist/esm/src/HelpersUtil.js"),_ConnectorUtil_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConnectorUtil.js"),_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConstantsUtil.js");const WalletUtil={filterOutDuplicatesByRDNS(wallets){const connectors=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_2__.H.state.enableEIP6963?_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_0__.a.state.connectors:[],recent=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_4__.i.getRecentWallets(),connectorRDNSs=connectors.map(connector=>connector.info?.rdns).filter(Boolean),recentRDNSs=recent.map(wallet=>wallet.rdns).filter(Boolean),allRDNSs=connectorRDNSs.concat(recentRDNSs);if(allRDNSs.includes("io.metamask.mobile")&&_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_3__.w.isMobile()){const index=allRDNSs.indexOf("io.metamask.mobile");allRDNSs[index]="io.metamask"}return wallets.filter(wallet=>!allRDNSs.includes(String(wallet?.rdns)))},filterOutDuplicatesByIds(wallets){const connectors=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_0__.a.state.connectors.filter(connector=>"ANNOUNCED"===connector.type||"INJECTED"===connector.type),recent=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_4__.i.getRecentWallets(),connectorIds=connectors.map(connector=>connector.explorerId),recentIds=recent.map(wallet=>wallet.id),allIds=connectorIds.concat(recentIds);return wallets.filter(wallet=>!allIds.includes(wallet?.id))},filterOutDuplicateWallets(wallets){const uniqueByRDNS=this.filterOutDuplicatesByRDNS(wallets);return this.filterOutDuplicatesByIds(uniqueByRDNS)},markWalletsAsInstalled(wallets){const{connectors}=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_0__.a.state,{featuredWalletIds}=_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_2__.H.state,installedWalletRdnsMap=connectors.filter(connector=>"ANNOUNCED"===connector.type).reduce((rdnsMap,connector)=>connector.info?.rdns?(rdnsMap[connector.info.rdns]=!0,rdnsMap):rdnsMap,{});return wallets.map(wallet=>({...wallet,installed:Boolean(wallet.rdns)&&Boolean(installedWalletRdnsMap[wallet.rdns??""])})).sort((walletA,walletB)=>{const installationComparison=Number(walletB.installed)-Number(walletA.installed);if(0!==installationComparison)return installationComparison;if(featuredWalletIds?.length){const walletAFeaturedIndex=featuredWalletIds.indexOf(walletA.id),walletBFeaturedIndex=featuredWalletIds.indexOf(walletB.id);if(-1!==walletAFeaturedIndex&&-1!==walletBFeaturedIndex)return walletAFeaturedIndex-walletBFeaturedIndex;if(-1!==walletAFeaturedIndex)return-1;if(-1!==walletBFeaturedIndex)return 1}return 0})},getConnectOrderMethod(_features,_connectors){const connectMethodOrder=_features?.connectMethodsOrder||_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_2__.H.state.features?.connectMethodsOrder,connectors=_connectors||_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_0__.a.state.connectors;if(connectMethodOrder)return connectMethodOrder;const{injected,announced}=_ConnectorUtil_js__WEBPACK_IMPORTED_MODULE_6__.g.getConnectorsByType(connectors,_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_1__.N.state.recommended,_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_1__.N.state.featured),shownInjected=injected.filter(_ConnectorUtil_js__WEBPACK_IMPORTED_MODULE_6__.g.showConnector),shownAnnounced=announced.filter(_ConnectorUtil_js__WEBPACK_IMPORTED_MODULE_6__.g.showConnector);return shownInjected.length||shownAnnounced.length?["wallet","email","social"]:_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_7__.o.DEFAULT_CONNECT_METHOD_ORDER},isExcluded(wallet){const isRDNSExcluded=Boolean(wallet.rdns)&&_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_1__.N.state.excludedWallets.some(w=>w.rdns===wallet.rdns),isNameExcluded=Boolean(wallet.name)&&_reown_appkit_controllers__WEBPACK_IMPORTED_MODULE_1__.N.state.excludedWallets.some(w=>_reown_appkit_utils__WEBPACK_IMPORTED_MODULE_5__.y.isLowerCaseMatch(w.name,wallet.name));return isRDNSExcluded||isNameExcluded}}},"./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit/dist/esm/exports/core.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{createAppKit:()=>createAppKit});var ConnectorController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js"),ConnectionController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js"),CoreHelperUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js"),OptionsController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js"),index_es=__webpack_require__("./node_modules/@walletconnect/universal-provider/dist/index.es.js"),ConstantsUtil=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js");const ParseUtil={validateCaipAddress(address){if(3!==address.split(":")?.length)throw new Error("Invalid CAIP Address");return address},parseCaipAddress(caipAddress){const parts=caipAddress.split(":");if(3!==parts.length)throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);const[chainNamespace,chainId,address]=parts;if(!chainNamespace||!chainId||!address)throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);return{chainNamespace,chainId,address}},parseCaipNetworkId(caipNetworkId){const parts=caipNetworkId.split(":");if(2!==parts.length)throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);const[chainNamespace,chainId]=parts;if(!chainNamespace||!chainId)throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);return{chainNamespace,chainId}}};var NetworkUtil=__webpack_require__("./node_modules/@reown/appkit-common/dist/esm/src/utils/NetworkUtil.js"),ChainController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js"),BlockchainApiController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js"),AccountController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js"),StorageUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js"),vanilla=__webpack_require__("./node_modules/valtio/esm/vanilla.mjs"),utils=__webpack_require__("./node_modules/valtio/esm/vanilla/utils.mjs");const EnsUtil={convertEVMChainIdToCoinType(chainId){if(chainId>=2147483648)throw new Error("Invalid chainId");return(2147483648|chainId)>>>0}};var withErrorBoundary=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js"),RouterController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js");const state=(0,vanilla.BX)({suggestions:[],loading:!1}),controller={state,subscribe:callback=>(0,vanilla.B1)(state,()=>callback(state)),subscribeKey:(key,callback)=>(0,utils.u$)(state,key,callback),async resolveName(name){try{return await BlockchainApiController.T.lookupEnsName(name)}catch(e){const error=e;throw new Error(error?.reasons?.[0]?.description||"Error resolving name")}},async isNameRegistered(name){try{return await BlockchainApiController.T.lookupEnsName(name),!0}catch{return!1}},async getSuggestions(value){try{state.loading=!0,state.suggestions=[];const response=await BlockchainApiController.T.getEnsNameSuggestions(value);return state.suggestions=response.suggestions.map(suggestion=>({...suggestion,name:suggestion.name}))||[],state.suggestions}catch(e){const errorMessage=EnsController.parseEnsApiError(e,"Error fetching name suggestions");throw new Error(errorMessage)}finally{state.loading=!1}},async getNamesForAddress(address){try{if(!ChainController.W.state.activeCaipNetwork)return[];const cachedEns=StorageUtil.i.getEnsFromCacheForAddress(address);if(cachedEns)return cachedEns;const response=await BlockchainApiController.T.reverseLookupEnsName({address});return StorageUtil.i.updateEnsCache({address,ens:response,timestamp:Date.now()}),response}catch(e){const errorMessage=EnsController.parseEnsApiError(e,"Error fetching names for address");throw new Error(errorMessage)}},async registerName(name){const network=ChainController.W.state.activeCaipNetwork;if(!network)throw new Error("Network not found");const address=AccountController.U.state.address,emailConnector=ConnectorController.a.getAuthConnector();if(!address||!emailConnector)throw new Error("Address or auth connector not found");state.loading=!0;try{const message=JSON.stringify({name,attributes:{},timestamp:Math.floor(Date.now()/1e3)});RouterController.I.pushTransactionStack({onCancel(){RouterController.I.replace("RegisterAccountName")}});const signature=await ConnectionController.x.signMessage(message);state.loading=!1;const networkId=network.id;if(!networkId)throw new Error("Network not found");const coinType=EnsUtil.convertEVMChainIdToCoinType(Number(networkId));await BlockchainApiController.T.registerEnsName({coinType,address,signature,message}),AccountController.U.setProfileName(name,network.chainNamespace),RouterController.I.replace("RegisterAccountNameSuccess")}catch(e){const errorMessage=EnsController.parseEnsApiError(e,`Error registering name ${name}`);throw RouterController.I.replace("RegisterAccountName"),new Error(errorMessage)}finally{state.loading=!1}},validateName:name=>/^[a-zA-Z0-9-]{4,}$/u.test(name),parseEnsApiError(error,defaultError){const ensError=error;return ensError?.reasons?.[0]?.description||defaultError}},EnsController=(0,withErrorBoundary.X)(controller);var AssetUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/AssetUtil.js"),utils_ConstantsUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js"),ApiController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js");const USDC_CURRENCY_DEFAULT={id:"2b92315d-eab7-5bef-84fa-089a131333f5",name:"USD Coin",symbol:"USDC",networks:[{name:"ethereum-mainnet",display_name:"Ethereum",chain_id:"1",contract_address:"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"},{name:"polygon-mainnet",display_name:"Polygon",chain_id:"137",contract_address:"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"}]},USD_CURRENCY_DEFAULT={id:"USD",payment_method_limits:[{id:"card",min:"10.00",max:"7500.00"},{id:"ach_bank_account",min:"10.00",max:"25000.00"}]},defaultState={providers:utils_ConstantsUtil.tM,selectedProvider:null,error:null,purchaseCurrency:USDC_CURRENCY_DEFAULT,paymentCurrency:USD_CURRENCY_DEFAULT,purchaseCurrencies:[USDC_CURRENCY_DEFAULT],paymentCurrencies:[],quotesLoading:!1},OnRampController_state=(0,vanilla.BX)(defaultState),OnRampController_controller={state:OnRampController_state,subscribe:callback=>(0,vanilla.B1)(OnRampController_state,()=>callback(OnRampController_state)),subscribeKey:(key,callback)=>(0,utils.u$)(OnRampController_state,key,callback),setSelectedProvider(provider){if(provider&&"meld"===provider.name){const currency=ChainController.W.state.activeChain===ConstantsUtil.o.CHAIN.SOLANA?"SOL":"USDC",address=AccountController.U.state.address??"",url=new URL(provider.url);url.searchParams.append("publicKey",utils_ConstantsUtil.Db),url.searchParams.append("destinationCurrencyCode",currency),url.searchParams.append("walletAddress",address),url.searchParams.append("externalCustomerId",OptionsController.H.state.projectId),OnRampController_state.selectedProvider={...provider,url:url.toString()}}else OnRampController_state.selectedProvider=provider},setOnrampProviders(providers){if(Array.isArray(providers)&&providers.every(item=>"string"==typeof item)){const validOnramp=providers,newProviders=utils_ConstantsUtil.tM.filter(provider=>validOnramp.includes(provider.name));OnRampController_state.providers=newProviders}else OnRampController_state.providers=[]},setPurchaseCurrency(currency){OnRampController_state.purchaseCurrency=currency},setPaymentCurrency(currency){OnRampController_state.paymentCurrency=currency},setPurchaseAmount(amount){OnRampController.state.purchaseAmount=amount},setPaymentAmount(amount){OnRampController.state.paymentAmount=amount},async getAvailableCurrencies(){const options=await BlockchainApiController.T.getOnrampOptions();OnRampController_state.purchaseCurrencies=options.purchaseCurrencies,OnRampController_state.paymentCurrencies=options.paymentCurrencies,OnRampController_state.paymentCurrency=options.paymentCurrencies[0]||USD_CURRENCY_DEFAULT,OnRampController_state.purchaseCurrency=options.purchaseCurrencies[0]||USDC_CURRENCY_DEFAULT,await ApiController.N.fetchCurrencyImages(options.paymentCurrencies.map(currency=>currency.id)),await ApiController.N.fetchTokenImages(options.purchaseCurrencies.map(currency=>currency.symbol))},async getQuote(){OnRampController_state.quotesLoading=!0;try{const quote=await BlockchainApiController.T.getOnrampQuote({purchaseCurrency:OnRampController_state.purchaseCurrency,paymentCurrency:OnRampController_state.paymentCurrency,amount:OnRampController_state.paymentAmount?.toString()||"0",network:OnRampController_state.purchaseCurrency?.symbol});return OnRampController_state.quotesLoading=!1,OnRampController_state.purchaseAmount=Number(quote?.purchaseAmount.amount),quote}catch(error){return OnRampController_state.error=error.message,OnRampController_state.quotesLoading=!1,null}finally{OnRampController_state.quotesLoading=!1}},resetState(){OnRampController_state.selectedProvider=null,OnRampController_state.error=null,OnRampController_state.purchaseCurrency=USDC_CURRENCY_DEFAULT,OnRampController_state.paymentCurrency=USD_CURRENCY_DEFAULT,OnRampController_state.purchaseCurrencies=[USDC_CURRENCY_DEFAULT],OnRampController_state.paymentCurrencies=[],OnRampController_state.paymentAmount=void 0,OnRampController_state.purchaseAmount=void 0,OnRampController_state.quotesLoading=!1}},OnRampController=(0,withErrorBoundary.X)(OnRampController_controller);var AlertController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js"),EventsController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js"),ThemeController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ThemeController.js"),SendController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SendController.js"),SIWXUtil=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js"),ModalController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js"),PublicStateController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js"),SnackController=__webpack_require__("./node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js");function checkNamespaceConnectorId(namespace,connectorId){return ConnectorController.a.getConnectorId(namespace)===connectorId}__webpack_require__("./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConnectorUtil.js"),__webpack_require__("./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConstantsUtil.js");var WalletUtil=__webpack_require__("./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/WalletUtil.js"),esm_exports=__webpack_require__("./node_modules/@reown/appkit-ui/dist/esm/exports/index.js");const ErrorUtil={EmbeddedWalletAbortController:new AbortController,UniversalProviderErrors:{UNAUTHORIZED_DOMAIN_NOT_ALLOWED:{message:"Unauthorized: origin not allowed",alertErrorKey:"INVALID_APP_CONFIGURATION"},JWT_VALIDATION_ERROR:{message:"JWT validation error: JWT Token is not yet valid",alertErrorKey:"JWT_TOKEN_NOT_VALID"},INVALID_KEY:{message:"Unauthorized: invalid key",alertErrorKey:"INVALID_PROJECT_ID"}},ALERT_ERRORS:{SWITCH_NETWORK_NOT_FOUND:{shortMessage:"Network Not Found",longMessage:"Network not found - please make sure it is included in 'networks' array in createAppKit function"},INVALID_APP_CONFIGURATION:{shortMessage:"Invalid App Configuration",longMessage:()=>`Origin ${function isSafe(){return"undefined"!=typeof window}()?window.origin:"unknown"} not found on Allowlist - update configuration on cloud.reown.com`},IFRAME_LOAD_FAILED:{shortMessage:"Network Error - Could not load embedded wallet",longMessage:()=>"There was an issue loading the embedded wallet. Please try again later."},IFRAME_REQUEST_TIMEOUT:{shortMessage:"Embedded Wallet Request Timed Out",longMessage:()=>"There was an issue doing the request to the embedded wallet. Please try again later."},UNVERIFIED_DOMAIN:{shortMessage:"Invalid App Configuration",longMessage:()=>"There was an issue loading the embedded wallet. Please verify that your domain is allowed at cloud.reown.com"},JWT_TOKEN_NOT_VALID:{shortMessage:"Session Expired",longMessage:"Invalid session found on UniversalProvider - please check your time settings and connect again"},INVALID_PROJECT_ID:{shortMessage:"Invalid App Configuration",longMessage:"Invalid Project ID - update configuration"},PROJECT_ID_NOT_CONFIGURED:{shortMessage:"Project ID Not Configured",longMessage:"Project ID Not Configured - update configuration on cloud.reown.com"}}};var http=__webpack_require__("./node_modules/viem/_esm/clients/transports/http.js"),fallback=__webpack_require__("./node_modules/viem/_esm/clients/transports/fallback.js"),src_ConstantsUtil=__webpack_require__("./node_modules/@reown/appkit-utils/dist/esm/src/ConstantsUtil.js");const PresetsUtil={ConnectorExplorerIds:{[ConstantsUtil.o.CONNECTOR_ID.COINBASE]:"fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",[ConstantsUtil.o.CONNECTOR_ID.COINBASE_SDK]:"fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",[ConstantsUtil.o.CONNECTOR_ID.SAFE]:"225affb176778569276e484e1b92637ad061b01e13a048b35a9d280c3b58970f",[ConstantsUtil.o.CONNECTOR_ID.LEDGER]:"19177a98252e07ddfc9af2083ba8e07ef627cb6103467ffebb3f8f4205fd7927",[ConstantsUtil.o.CONNECTOR_ID.OKX]:"971e689d0a5be527bac79629b4ee9b925e82208e5168b733496a09c0faed0709",[src_ConstantsUtil.o.METMASK_CONNECTOR_NAME]:"c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96",[src_ConstantsUtil.o.TRUST_CONNECTOR_NAME]:"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0",[src_ConstantsUtil.o.SOLFLARE_CONNECTOR_NAME]:"1ca0bdd4747578705b1939af023d120677c64fe6ca76add81fda36e350605e79",[src_ConstantsUtil.o.PHANTOM_CONNECTOR_NAME]:"a797aa35c0fadbfc1a53e7f675162ed5226968b44a19ee3d24385c64d1d3c393",[src_ConstantsUtil.o.COIN98_CONNECTOR_NAME]:"2a3c89040ac3b723a1972a33a125b1db11e258a6975d3a61252cd64e6ea5ea01",[src_ConstantsUtil.o.MAGIC_EDEN_CONNECTOR_NAME]:"8b830a2b724a9c3fbab63af6f55ed29c9dfa8a55e732dc88c80a196a2ba136c6",[src_ConstantsUtil.o.BACKPACK_CONNECTOR_NAME]:"2bd8c14e035c2d48f184aaa168559e86b0e3433228d3c4075900a221785019b0",[src_ConstantsUtil.o.BITGET_CONNECTOR_NAME]:"38f5d18bd8522c244bdd70cb4a68e0e718865155811c043f052fb9f1c51de662",[src_ConstantsUtil.o.FRONTIER_CONNECTOR_NAME]:"85db431492aa2e8672e93f4ea7acf10c88b97b867b0d373107af63dc4880f041",[src_ConstantsUtil.o.XVERSE_CONNECTOR_NAME]:"2a87d74ae02e10bdd1f51f7ce6c4e1cc53cd5f2c0b6b5ad0d7b3007d2b13de7b",[src_ConstantsUtil.o.LEATHER_CONNECTOR_NAME]:"483afe1df1df63daf313109971ff3ef8356ddf1cc4e45877d205eee0b7893a13"},NetworkImageIds:{1:"ba0ba0cd-17c6-4806-ad93-f9d174f17900",42161:"3bff954d-5cb0-47a0-9a23-d20192e74600",43114:"30c46e53-e989-45fb-4549-be3bd4eb3b00",56:"93564157-2e8e-4ce7-81df-b264dbee9b00",250:"06b26297-fe0c-4733-5d6b-ffa5498aac00",10:"ab9c186a-c52f-464b-2906-ca59d760a400",137:"41d04d42-da3b-4453-8506-668cc0727900",5e3:"e86fae9b-b770-4eea-e520-150e12c81100",295:"6a97d510-cac8-4e58-c7ce-e8681b044c00",11155111:"e909ea0a-f92a-4512-c8fc-748044ea6800",84532:"a18a7ecd-e307-4360-4746-283182228e00",1301:"4eeea7ef-0014-4649-5d1d-07271a80f600",130:"2257980a-3463-48c6-cbac-a42d2a956e00",10143:"0a728e83-bacb-46db-7844-948f05434900",100:"02b53f6a-e3d4-479e-1cb4-21178987d100",9001:"f926ff41-260d-4028-635e-91913fc28e00",324:"b310f07f-4ef7-49f3-7073-2a0a39685800",314:"5a73b3dd-af74-424e-cae0-0de859ee9400",4689:"34e68754-e536-40da-c153-6ef2e7188a00",1088:"3897a66d-40b9-4833-162f-a2c90531c900",1284:"161038da-44ae-4ec7-1208-0ea569454b00",1285:"f1d73bb6-5450-4e18-38f7-fb6484264a00",7777777:"845c60df-d429-4991-e687-91ae45791600",42220:"ab781bbc-ccc6-418d-d32d-789b15da1f00",8453:"7289c336-3981-4081-c5f4-efc26ac64a00",1313161554:"3ff73439-a619-4894-9262-4470c773a100",2020:"b8101fc0-9c19-4b6f-ec65-f6dfff106e00",2021:"b8101fc0-9c19-4b6f-ec65-f6dfff106e00",80094:"e329c2c9-59b0-4a02-83e4-212ff3779900",2741:"fc2427d1-5af9-4a9c-8da5-6f94627cd900","5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp":"a1b58899-f671-4276-6a5e-56ca5bd59700","4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z":"a1b58899-f671-4276-6a5e-56ca5bd59700",EtWTRABZaYq6iMfeYKouRu166VU2xqa1:"a1b58899-f671-4276-6a5e-56ca5bd59700","000000000019d6689c085ae165831e93":"0b4838db-0161-4ffe-022d-532bf03dba00","000000000933ea01ad0ee984209779ba":"39354064-d79b-420b-065d-f980c4b78200"},ConnectorImageIds:{[ConstantsUtil.o.CONNECTOR_ID.COINBASE]:"0c2840c3-5b04-4c44-9661-fbd4b49e1800",[ConstantsUtil.o.CONNECTOR_ID.COINBASE_SDK]:"0c2840c3-5b04-4c44-9661-fbd4b49e1800",[ConstantsUtil.o.CONNECTOR_ID.SAFE]:"461db637-8616-43ce-035a-d89b8a1d5800",[ConstantsUtil.o.CONNECTOR_ID.LEDGER]:"54a1aa77-d202-4f8d-0fb2-5d2bb6db0300",[ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT]:"ef1a1fcf-7fe8-4d69-bd6d-fda1345b4400",[ConstantsUtil.o.CONNECTOR_ID.INJECTED]:"07ba87ed-43aa-4adf-4540-9e6a2b9cae00"},ConnectorNamesMap:{[ConstantsUtil.o.CONNECTOR_ID.INJECTED]:"Browser Wallet",[ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT]:"WalletConnect",[ConstantsUtil.o.CONNECTOR_ID.COINBASE]:"Coinbase",[ConstantsUtil.o.CONNECTOR_ID.COINBASE_SDK]:"Coinbase",[ConstantsUtil.o.CONNECTOR_ID.LEDGER]:"Ledger",[ConstantsUtil.o.CONNECTOR_ID.SAFE]:"Safe"},ConnectorTypesMap:{[ConstantsUtil.o.CONNECTOR_ID.INJECTED]:"INJECTED",[ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT]:"WALLET_CONNECT",[ConstantsUtil.o.CONNECTOR_ID.EIP6963]:"ANNOUNCED",[ConstantsUtil.o.CONNECTOR_ID.AUTH]:"AUTH"},WalletConnectRpcChainIds:[1,5,11155111,10,420,42161,421613,137,80001,42220,1313161554,1313161555,56,97,43114,43113,100,8453,84531,7777777,999,324,280]};function getBlockchainApiRpcUrl(caipNetworkId,projectId){const url=new URL("https://rpc.walletconnect.org/v1/");return url.searchParams.set("chainId",caipNetworkId),url.searchParams.set("projectId",projectId),url.toString()}const WC_HTTP_RPC_SUPPORTED_CHAINS=["near:mainnet","solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp","eip155:1101","eip155:56","eip155:42161","eip155:7777777","eip155:59144","eip155:324","solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1","eip155:5000","solana:4sgjmw1sunhzsxgspuhpqldx6wiyjntz","eip155:80084","eip155:5003","eip155:100","eip155:8453","eip155:42220","eip155:1313161555","eip155:17000","eip155:1","eip155:300","eip155:1313161554","eip155:1329","eip155:84532","eip155:421614","eip155:11155111","eip155:8217","eip155:43114","solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z","eip155:999999999","eip155:11155420","eip155:80002","eip155:97","eip155:43113","eip155:137","eip155:10","eip155:1301","bip122:000000000019d6689c085ae165831e93","bip122:000000000933ea01ad0ee984209779ba"],CaipNetworksUtil={extendRpcUrlWithProjectId(rpcUrl,projectId){let isReownUrl=!1;try{isReownUrl="rpc.walletconnect.org"===new URL(rpcUrl).host}catch(e){isReownUrl=!1}if(isReownUrl){const url=new URL(rpcUrl);return url.searchParams.has("projectId")||url.searchParams.set("projectId",projectId),url.toString()}return rpcUrl},isCaipNetwork:network=>"chainNamespace"in network&&"caipNetworkId"in network,getChainNamespace(network){return this.isCaipNetwork(network)?network.chainNamespace:ConstantsUtil.o.CHAIN.EVM},getCaipNetworkId(network){return this.isCaipNetwork(network)?network.caipNetworkId:`${ConstantsUtil.o.CHAIN.EVM}:${network.id}`},getDefaultRpcUrl(caipNetwork,caipNetworkId,projectId){const defaultRpcUrl=caipNetwork.rpcUrls?.default?.http?.[0];return WC_HTTP_RPC_SUPPORTED_CHAINS.includes(caipNetworkId)?getBlockchainApiRpcUrl(caipNetworkId,projectId):defaultRpcUrl||""},extendCaipNetwork(caipNetwork,{customNetworkImageUrls,projectId,customRpcUrls}){const chainNamespace=this.getChainNamespace(caipNetwork),caipNetworkId=this.getCaipNetworkId(caipNetwork),networkDefaultRpcUrl=caipNetwork.rpcUrls.default.http?.[0],reownRpcUrl=this.getDefaultRpcUrl(caipNetwork,caipNetworkId,projectId),chainDefaultRpcUrl=caipNetwork?.rpcUrls?.chainDefault?.http?.[0]||networkDefaultRpcUrl,customRpcUrlsOfNetwork=customRpcUrls?.[caipNetworkId]?.map(i=>i.url)||[],rpcUrls=[...customRpcUrlsOfNetwork,reownRpcUrl],rpcUrlsWithoutReown=[...customRpcUrlsOfNetwork];return chainDefaultRpcUrl&&!rpcUrlsWithoutReown.includes(chainDefaultRpcUrl)&&rpcUrlsWithoutReown.push(chainDefaultRpcUrl),{...caipNetwork,chainNamespace,caipNetworkId,assets:{imageId:PresetsUtil.NetworkImageIds[caipNetwork.id],imageUrl:customNetworkImageUrls?.[caipNetwork.id]},rpcUrls:{...caipNetwork.rpcUrls,default:{http:rpcUrls},chainDefault:{http:rpcUrlsWithoutReown}}}},extendCaipNetworks:(caipNetworks,{customNetworkImageUrls,projectId,customRpcUrls})=>caipNetworks.map(caipNetwork=>CaipNetworksUtil.extendCaipNetwork(caipNetwork,{customNetworkImageUrls,customRpcUrls,projectId})),getViemTransport(caipNetwork,projectId,customRpcUrls){const transports=[];return customRpcUrls?.forEach(rpcUrl=>{transports.push((0,http.L)(rpcUrl.url,rpcUrl.config))}),WC_HTTP_RPC_SUPPORTED_CHAINS.includes(caipNetwork.caipNetworkId)&&transports.push((0,http.L)(getBlockchainApiRpcUrl(caipNetwork.caipNetworkId,projectId),{fetchOptions:{headers:{"Content-Type":"text/plain"}}})),caipNetwork?.rpcUrls?.default?.http?.forEach(rpcUrl=>{transports.push((0,http.L)(rpcUrl))}),(0,fallback.Np)(transports)},extendWagmiTransports(caipNetwork,projectId,transport){if(WC_HTTP_RPC_SUPPORTED_CHAINS.includes(caipNetwork.caipNetworkId)){const reownRpcUrl=this.getDefaultRpcUrl(caipNetwork,caipNetwork.caipNetworkId,projectId);return(0,fallback.Np)([transport,(0,http.L)(reownRpcUrl)])}return transport},getUnsupportedNetwork:caipNetworkId=>({id:caipNetworkId.split(":")[1],caipNetworkId,name:ConstantsUtil.o.UNSUPPORTED_NETWORK_NAME,chainNamespace:caipNetworkId.split(":")[0],nativeCurrency:{name:"",decimals:0,symbol:""},rpcUrls:{default:{http:[]}}}),getCaipNetworkFromStorage(defaultCaipNetwork){const caipNetworkIdFromStorage=StorageUtil.i.getActiveCaipNetworkId(),caipNetworks=ChainController.W.getAllRequestedCaipNetworks(),availableNamespaces=Array.from(ChainController.W.state.chains?.keys()||[]),namespace=caipNetworkIdFromStorage?.split(":")[0],isNamespaceAvailable=!!namespace&&availableNamespaces.includes(namespace),caipNetwork=caipNetworks?.find(cn=>cn.caipNetworkId===caipNetworkIdFromStorage);return isNamespaceAvailable&&!caipNetwork&&caipNetworkIdFromStorage?this.getUnsupportedNetwork(caipNetworkIdFromStorage):caipNetwork||(defaultCaipNetwork||caipNetworks?.[0])}};var HelpersUtil=__webpack_require__("./node_modules/@reown/appkit-utils/dist/esm/src/HelpersUtil.js"),dist_index_es=__webpack_require__("./node_modules/@walletconnect/logger/dist/index.es.js");const LoggerUtil={createLogger(onError,level="error"){const loggerOptions=(0,dist_index_es.iP)({level}),{logger}=(0,dist_index_es.D5)({opts:loggerOptions});return logger.error=(...args)=>{for(const arg of args)if(arg instanceof Error)return void onError(arg,...args);onError(void 0,...args)},logger}},CLEAN_PROVIDERS_STATE={eip155:void 0,solana:void 0,polkadot:void 0,bip122:void 0,cosmos:void 0},ProviderUtil_state=(0,vanilla.BX)({providers:{...CLEAN_PROVIDERS_STATE},providerIds:{...CLEAN_PROVIDERS_STATE}}),ProviderUtil={state:ProviderUtil_state,subscribeKey:(key,callback)=>(0,utils.u$)(ProviderUtil_state,key,callback),subscribe:callback=>(0,vanilla.B1)(ProviderUtil_state,()=>{callback(ProviderUtil_state)}),subscribeProviders:callback=>(0,vanilla.B1)(ProviderUtil_state.providers,()=>callback(ProviderUtil_state.providers)),setProvider(chainNamespace,provider){provider&&(ProviderUtil_state.providers[chainNamespace]=(0,vanilla.KR)(provider))},getProvider:chainNamespace=>ProviderUtil_state.providers[chainNamespace],setProviderId(chainNamespace,providerId){providerId&&(ProviderUtil_state.providerIds[chainNamespace]=providerId)},getProviderId(chainNamespace){if(chainNamespace)return ProviderUtil_state.providerIds[chainNamespace]},reset(){ProviderUtil_state.providers={...CLEAN_PROVIDERS_STATE},ProviderUtil_state.providerIds={...CLEAN_PROVIDERS_STATE}},resetChain(chainNamespace){ProviderUtil_state.providers[chainNamespace]=void 0,ProviderUtil_state.providerIds[chainNamespace]=void 0}};var esm=__webpack_require__("./node_modules/bs58/src/esm/index.js"),toHex=__webpack_require__("./node_modules/viem/_esm/utils/encoding/toHex.js");const WcConstantsUtil_ERROR_CODE_UNRECOGNIZED_CHAIN_ID=4902,WcConstantsUtil_ERROR_CODE_DEFAULT=5e3,WcConstantsUtil_ERROR_INVALID_CHAIN_ID=32603,WcConstantsUtil_DEFAULT_ALLOWED_ANCESTORS=["http://localhost:*","https://*.pages.dev","https://*.vercel.app","https://*.ngrok-free.app","https://secure-mobile.walletconnect.com","https://secure-mobile.walletconnect.org"];function defineChain(chain){return{formatters:void 0,fees:void 0,serializers:void 0,...chain}}const solana=defineChain({id:"5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",name:"Solana",network:"solana-mainnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!1,chainNamespace:"solana",caipNetworkId:"solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",deprecatedCaipNetworkId:"solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ"}),solanaDevnet=defineChain({id:"EtWTRABZaYq6iMfeYKouRu166VU2xqa1",name:"Solana Devnet",network:"solana-devnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!0,chainNamespace:"solana",caipNetworkId:"solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1",deprecatedCaipNetworkId:"solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K"}),DEFAULT_METHODS=(defineChain({id:"4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z",name:"Solana Testnet",network:"solana-testnet",nativeCurrency:{name:"Solana",symbol:"SOL",decimals:9},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},blockExplorers:{default:{name:"Solscan",url:"https://solscan.io"}},testnet:!0,chainNamespace:"solana",caipNetworkId:"solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z"}),defineChain({id:"000000000019d6689c085ae165831e93",caipNetworkId:"bip122:000000000019d6689c085ae165831e93",chainNamespace:"bip122",name:"Bitcoin",nativeCurrency:{name:"Bitcoin",symbol:"BTC",decimals:8},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}}}),defineChain({id:"000000000933ea01ad0ee984209779ba",caipNetworkId:"bip122:000000000933ea01ad0ee984209779ba",chainNamespace:"bip122",name:"Bitcoin Testnet",nativeCurrency:{name:"Bitcoin",symbol:"BTC",decimals:8},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}},testnet:!0}),{solana:["solana_signMessage","solana_signTransaction","solana_requestAccounts","solana_getAccounts","solana_signAllTransactions","solana_signAndSendTransaction"],eip155:["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendTransaction","personal_sign","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode","wallet_getCallsStatus","wallet_showCallsStatus","wallet_sendCalls","wallet_getCapabilities","wallet_grantPermissions","wallet_revokePermissions","wallet_getAssets"],bip122:["sendTransfer","signMessage","signPsbt","getAccountAddresses"]}),WcHelpersUtil={getMethodsByChainNamespace:chainNamespace=>DEFAULT_METHODS[chainNamespace]||[],createDefaultNamespace(chainNamespace){return{methods:this.getMethodsByChainNamespace(chainNamespace),events:["accountsChanged","chainChanged"],chains:[],rpcMap:{}}},applyNamespaceOverrides(baseNamespaces,overrides){if(!overrides)return{...baseNamespaces};const result={...baseNamespaces},namespacesToOverride=new Set;if(overrides.methods&&Object.keys(overrides.methods).forEach(ns=>namespacesToOverride.add(ns)),overrides.chains&&Object.keys(overrides.chains).forEach(ns=>namespacesToOverride.add(ns)),overrides.events&&Object.keys(overrides.events).forEach(ns=>namespacesToOverride.add(ns)),overrides.rpcMap&&Object.keys(overrides.rpcMap).forEach(chainId=>{const[ns]=chainId.split(":");ns&&namespacesToOverride.add(ns)}),namespacesToOverride.forEach(ns=>{result[ns]||(result[ns]=this.createDefaultNamespace(ns))}),overrides.methods&&Object.entries(overrides.methods).forEach(([ns,methods])=>{result[ns]&&(result[ns].methods=methods)}),overrides.chains&&Object.entries(overrides.chains).forEach(([ns,chains])=>{result[ns]&&(result[ns].chains=chains)}),overrides.events&&Object.entries(overrides.events).forEach(([ns,events])=>{result[ns]&&(result[ns].events=events)}),overrides.rpcMap){const processedNamespaces=new Set;Object.entries(overrides.rpcMap).forEach(([chainId,rpcUrl])=>{const[ns,id]=chainId.split(":");ns&&id&&result[ns]&&(result[ns].rpcMap||(result[ns].rpcMap={}),processedNamespaces.has(ns)||(result[ns].rpcMap={},processedNamespaces.add(ns)),result[ns].rpcMap[id]=rpcUrl)})}return result},createNamespaces(caipNetworks,configOverride){const defaultNamespaces=caipNetworks.reduce((acc,chain)=>{const{id,chainNamespace,rpcUrls}=chain,rpcUrl=rpcUrls.default.http[0];acc[chainNamespace]||(acc[chainNamespace]=this.createDefaultNamespace(chainNamespace));const caipNetworkId=`${chainNamespace}:${id}`,namespace=acc[chainNamespace];switch(namespace.chains.push(caipNetworkId),caipNetworkId){case solana.caipNetworkId:namespace.chains.push(solana.deprecatedCaipNetworkId);break;case solanaDevnet.caipNetworkId:namespace.chains.push(solanaDevnet.deprecatedCaipNetworkId)}return namespace?.rpcMap&&rpcUrl&&(namespace.rpcMap[id]=rpcUrl),acc},{});return this.applyNamespaceOverrides(defaultNamespaces,configOverride)},resolveReownName:async name=>{const wcNameAddress=await EnsController.resolveName(name),networkNameAddresses=Object.values(wcNameAddress?.addresses)||[];return networkNameAddresses[0]?.address||!1},getChainsFromNamespaces:(namespaces={})=>Object.values(namespaces).flatMap(namespace=>{const chains=namespace.chains||[],accountsChains=namespace.accounts.map(account=>{const[chainNamespace,chainId]=account.split(":");return`${chainNamespace}:${chainId}`});return Array.from(new Set([...chains,...accountsChains]))}),isSessionEventData:data=>"object"==typeof data&&null!==data&&"id"in data&&"topic"in data&&"params"in data&&"object"==typeof data.params&&null!==data.params&&"chainId"in data.params&&"event"in data.params&&"object"==typeof data.params.event&&null!==data.params.event,isOriginAllowed(currentOrigin,allowedPatterns,defaultAllowedOrigins){for(const pattern of[...allowedPatterns,...defaultAllowedOrigins])if(pattern.includes("*")){const regexString=`^${pattern.replace(/[.*+?^${}()|[\]\\]/gu,"\\$&").replace(/\\\*/gu,".*")}$`;if(new RegExp(regexString,"u").test(currentOrigin))return!0}else try{if(new URL(pattern).origin===currentOrigin)return!0}catch(e){if(pattern===currentOrigin)return!0}return!1}};class WalletConnectConnector{constructor({provider,namespace}){this.id=ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT,this.name=PresetsUtil.ConnectorNamesMap[ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT],this.type="WALLET_CONNECT",this.imageId=PresetsUtil.ConnectorImageIds[ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT],this.getCaipNetworks=ChainController.W.getCaipNetworks.bind(ChainController.W),this.caipNetworks=this.getCaipNetworks(),this.provider=provider,this.chain=namespace}get chains(){return this.getCaipNetworks()}async connectWalletConnect(){if(!await this.authenticate()){const caipNetworks=this.getCaipNetworks(),universalProviderConfigOverride=OptionsController.H.state.universalProviderConfigOverride,namespaces=WcHelpersUtil.createNamespaces(caipNetworks,universalProviderConfigOverride);await this.provider.connect({optionalNamespaces:namespaces})}return{clientId:await this.provider.client.core.crypto.getClientId(),session:this.provider.session}}async disconnect(){await this.provider.disconnect()}async authenticate(){const chains=this.chains.map(network=>network.caipNetworkId);return SIWXUtil.U.universalProviderAuthenticate({universalProvider:this.provider,chains,methods:OPTIONAL_METHODS})}}const OPTIONAL_METHODS=["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendTransaction","personal_sign","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode","wallet_getCallsStatus","wallet_sendCalls","wallet_getCapabilities","wallet_grantPermissions","wallet_revokePermissions","wallet_getAssets"];class AdapterBlueprint{constructor(params){this.availableConnectors=[],this.eventListeners=new Map,this.getCaipNetworks=namespace=>ChainController.W.getCaipNetworks(namespace),params&&this.construct(params)}construct(params){this.projectId=params.projectId,this.namespace=params.namespace,this.adapterType=params.adapterType}get connectors(){return this.availableConnectors}get networks(){return this.getCaipNetworks(this.namespace)}setAuthProvider(authProvider){this.addConnector({id:ConstantsUtil.o.CONNECTOR_ID.AUTH,type:"AUTH",name:ConstantsUtil.o.CONNECTOR_NAMES.AUTH,provider:authProvider,imageId:PresetsUtil.ConnectorImageIds[ConstantsUtil.o.CONNECTOR_ID.AUTH],chain:this.namespace,chains:[]})}addConnector(...connectors){const connectorsAdded=new Set;this.availableConnectors=[...connectors,...this.availableConnectors].filter(connector=>!connectorsAdded.has(connector.id)&&(connectorsAdded.add(connector.id),!0)),this.emit("connectors",this.availableConnectors)}setStatus(status,chainNamespace){AccountController.U.setStatus(status,chainNamespace)}on(eventName,callback){this.eventListeners.has(eventName)||this.eventListeners.set(eventName,new Set),this.eventListeners.get(eventName)?.add(callback)}off(eventName,callback){const listeners=this.eventListeners.get(eventName);listeners&&listeners.delete(callback)}removeAllEventListeners(){this.eventListeners.forEach(listeners=>{listeners.clear()})}emit(eventName,data){const listeners=this.eventListeners.get(eventName);listeners&&listeners.forEach(callback=>callback(data))}async connectWalletConnect(_chainId){const connector=this.getWalletConnectConnector();return{clientId:(await connector.connectWalletConnect()).clientId}}async switchNetwork(params){const{caipNetwork,providerType}=params;if(!params.provider)return;const provider="provider"in params.provider?params.provider.provider:params.provider;if("WALLET_CONNECT"!==providerType){if(provider&&"AUTH"===providerType){const authProvider=provider,preferredAccountType=AccountController.U.state.preferredAccountTypes?.[caipNetwork.chainNamespace];await authProvider.switchNetwork(caipNetwork.caipNetworkId);const user=await authProvider.getUser({chainId:caipNetwork.caipNetworkId,preferredAccountType});this.emit("switchNetwork",user)}}else provider.setDefaultChain(caipNetwork.caipNetworkId)}getWalletConnectConnector(){const connector=this.connectors.find(c=>c instanceof WalletConnectConnector);if(!connector)throw new Error("WalletConnectConnector not found");return connector}}var console=__webpack_require__("./node_modules/console-browserify/index.js");class UniversalAdapter extends AdapterBlueprint{setUniversalProvider(universalProvider){this.addConnector(new WalletConnectConnector({provider:universalProvider,caipNetworks:this.getCaipNetworks(),namespace:this.namespace}))}async connect(params){return Promise.resolve({id:"WALLET_CONNECT",type:"WALLET_CONNECT",chainId:Number(params.chainId),provider:this.provider,address:""})}async disconnect(){try{const connector=this.getWalletConnectConnector();await connector.disconnect()}catch(error){console.warn("UniversalAdapter:disconnect - error",error)}}async getAccounts({namespace}){const provider=this.provider,addresses=provider?.session?.namespaces?.[namespace]?.accounts?.map(account=>{const[,,address]=account.split(":");return address}).filter((address,index,self)=>self.indexOf(address)===index)||[];return Promise.resolve({accounts:addresses.map(address=>CoreHelperUtil.w.createAccount(namespace,address,"bip122"===namespace?"payment":"eoa"))})}async syncConnectors(){return Promise.resolve()}async getBalance(params){if(!(params.caipNetwork&&utils_ConstantsUtil.oU.BALANCE_SUPPORTED_CHAINS.includes(params.caipNetwork?.chainNamespace))||params.caipNetwork?.testnet)return{balance:"0.00",symbol:params.caipNetwork?.nativeCurrency.symbol||""};if(AccountController.U.state.balanceLoading&&params.chainId===ChainController.W.state.activeCaipNetwork?.id)return{balance:AccountController.U.state.balance||"0.00",symbol:AccountController.U.state.balanceSymbol||""};const balance=(await AccountController.U.fetchTokenBalance()).find(b=>b.chainId===`${params.caipNetwork?.chainNamespace}:${params.chainId}`&&b.symbol===params.caipNetwork?.nativeCurrency.symbol);return{balance:balance?.quantity.numeric||"0.00",symbol:balance?.symbol||params.caipNetwork?.nativeCurrency.symbol||""}}async signMessage(params){const{provider,message,address}=params;if(!provider)throw new Error("UniversalAdapter:signMessage - provider is undefined");let signature="";if(ChainController.W.state.activeCaipNetwork?.chainNamespace===ConstantsUtil.o.CHAIN.SOLANA){signature=(await provider.request({method:"solana_signMessage",params:{message:esm.A.encode((new TextEncoder).encode(message)),pubkey:address}},ChainController.W.state.activeCaipNetwork?.caipNetworkId)).signature}else signature=await provider.request({method:"personal_sign",params:[message,address]},ChainController.W.state.activeCaipNetwork?.caipNetworkId);return{signature}}async estimateGas(){return Promise.resolve({gas:BigInt(0)})}async sendTransaction(){return Promise.resolve({hash:""})}walletGetAssets(_params){return Promise.resolve({})}async writeContract(){return Promise.resolve({hash:""})}parseUnits(){return 0n}formatUnits(){return"0"}async getCapabilities(){return Promise.resolve({})}async grantPermissions(){return Promise.resolve({})}async revokePermissions(){return Promise.resolve("0x")}async syncConnection(){return Promise.resolve({id:"WALLET_CONNECT",type:"WALLET_CONNECT",chainId:1,provider:this.provider,address:""})}async switchNetwork(params){const{caipNetwork}=params,connector=this.getWalletConnectConnector();if(caipNetwork.chainNamespace===ConstantsUtil.o.CHAIN.EVM)try{await(connector.provider?.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,toHex.nj)(caipNetwork.id)}]}))}catch(switchError){if(switchError.code===WcConstantsUtil_ERROR_CODE_UNRECOGNIZED_CHAIN_ID||switchError.code===WcConstantsUtil_ERROR_INVALID_CHAIN_ID||switchError.code===WcConstantsUtil_ERROR_CODE_DEFAULT||switchError?.data?.originalError?.code===WcConstantsUtil_ERROR_CODE_UNRECOGNIZED_CHAIN_ID)try{await(connector.provider?.request({method:"wallet_addEthereumChain",params:[{chainId:(0,toHex.nj)(caipNetwork.id),rpcUrls:[caipNetwork?.rpcUrls.chainDefault?.http],chainName:caipNetwork.name,nativeCurrency:caipNetwork.nativeCurrency,blockExplorerUrls:[caipNetwork.blockExplorers?.default.url]}]}))}catch(error){throw new Error("Chain is not supported")}}connector.provider.setDefaultChain(caipNetwork.caipNetworkId)}getWalletConnectProvider(){const connector=this.connectors.find(c=>"WALLET_CONNECT"===c.type),provider=connector?.provider;return provider}}var ConfigUtil_console=__webpack_require__("./node_modules/console-browserify/index.js");const FEATURE_KEYS=["email","socials","swaps","onramp","activity","reownBranding"],featureConfig={email:{apiFeatureName:"social_login",localFeatureName:"email",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:apiConfig=>{if(!apiConfig?.config)return!1;const config=apiConfig.config;return Boolean(apiConfig.isEnabled)&&config.includes("email")},processFallback:localValue=>void 0===localValue?utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.email:Boolean(localValue)},socials:{apiFeatureName:"social_login",localFeatureName:"socials",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:apiConfig=>{if(!apiConfig?.config)return!1;const config=apiConfig.config;return!!(Boolean(apiConfig.isEnabled)&&config.length>0)&&config.filter(s=>"email"!==s)},processFallback:localValue=>void 0===localValue?utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.socials:"boolean"==typeof localValue?!!localValue&&utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.socials:localValue},swaps:{apiFeatureName:"swap",localFeatureName:"swaps",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:apiConfig=>{if(!apiConfig?.config)return!1;const config=apiConfig.config;return!!(Boolean(apiConfig.isEnabled)&&config.length>0)&&config},processFallback:localValue=>void 0===localValue?utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.swaps:"boolean"==typeof localValue?!!localValue&&utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.swaps:localValue},onramp:{apiFeatureName:"onramp",localFeatureName:"onramp",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:apiConfig=>{if(!apiConfig?.config)return!1;const config=apiConfig.config;return!!(Boolean(apiConfig.isEnabled)&&config.length>0)&&config},processFallback:localValue=>void 0===localValue?utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.onramp:"boolean"==typeof localValue?!!localValue&&utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.onramp:localValue},activity:{apiFeatureName:"activity",localFeatureName:"history",returnType:!1,isLegacy:!0,isAvailableOnBasic:!1,processApi:apiConfig=>Boolean(apiConfig.isEnabled),processFallback:localValue=>void 0===localValue?utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.activity:Boolean(localValue)},reownBranding:{apiFeatureName:"reown_branding",localFeatureName:"reownBranding",returnType:!1,isLegacy:!1,isAvailableOnBasic:!1,processApi:apiConfig=>Boolean(apiConfig.isEnabled),processFallback:localValue=>void 0===localValue?utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES.reownBranding:Boolean(localValue)}},ConfigUtil={localSettingsOverridden:new Set,getApiConfig:(id,apiProjectConfig)=>apiProjectConfig?.find(f=>f.id===id),addWarning(localFeatureValue,featureKey){if(void 0!==localFeatureValue){const config=featureConfig[featureKey],warningName=config.isLegacy?`"features.${config.localFeatureName}" (now "${featureKey}")`:`"features.${featureKey}"`;this.localSettingsOverridden.add(warningName)}},processFeature(featureKey,localFeatures,apiProjectConfig,useApi,isBasic){const config=featureConfig[featureKey],localValue=localFeatures[config.localFeatureName];if(isBasic&&!config.isAvailableOnBasic)return!1;if(useApi){const apiConfig=this.getApiConfig(config.apiFeatureName,apiProjectConfig);return null===apiConfig?.config?this.processFallbackFeature(featureKey,localValue):!!apiConfig?.config&&(void 0!==localValue&&this.addWarning(localValue,featureKey),this.processApiFeature(featureKey,apiConfig))}return this.processFallbackFeature(featureKey,localValue)},processApiFeature:(featureKey,apiConfig)=>featureConfig[featureKey].processApi(apiConfig),processFallbackFeature:(featureKey,localValue)=>featureConfig[featureKey].processFallback(localValue),async fetchRemoteFeatures(config){const isBasic=config.basic??!1,localFeatures=config.features||{};this.localSettingsOverridden.clear();let apiProjectConfig=null,useApiConfig=!1;try{apiProjectConfig=await ApiController.N.fetchProjectConfig(),useApiConfig=null!=apiProjectConfig}catch(e){ConfigUtil_console.warn("[Reown Config] Failed to fetch remote project configuration. Using local/default values.",e)}const remoteFeaturesConfig=useApiConfig&&!isBasic?utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES:utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES_DISABLED;try{for(const featureKey of FEATURE_KEYS){const result=this.processFeature(featureKey,localFeatures,apiProjectConfig,useApiConfig,isBasic);Object.assign(remoteFeaturesConfig,{[featureKey]:result})}}catch(e){return ConfigUtil_console.warn("[Reown Config] Failed to process the configuration from Cloud. Using default values.",e),utils_ConstantsUtil.oU.DEFAULT_REMOTE_FEATURES}if(useApiConfig&&this.localSettingsOverridden.size>0){const warningMessage=`Your local configuration for ${Array.from(this.localSettingsOverridden).join(", ")} was ignored because a remote configuration was successfully fetched. Please manage these features via your project dashboard on dashboard.reown.com.`;AlertController.h.open({shortMessage:"Local configuration ignored",longMessage:`[Reown Config Notice] ${warningMessage}`},"warning")}return remoteFeaturesConfig}};var appkit_base_client_console=__webpack_require__("./node_modules/console-browserify/index.js");class AppKitBaseClient{constructor(options){this.chainNamespaces=[],this.remoteFeatures={},this.reportedAlertErrors={},this.getCaipNetwork=(chainNamespace,id)=>{if(chainNamespace){const caipNetworkWithId=ChainController.W.getNetworkData(chainNamespace)?.requestedCaipNetworks?.find(c=>c.id===id);if(caipNetworkWithId)return caipNetworkWithId;const namespaceCaipNetwork=ChainController.W.getNetworkData(chainNamespace)?.caipNetwork;if(namespaceCaipNetwork)return namespaceCaipNetwork;const requestedCaipNetworks=ChainController.W.getRequestedCaipNetworks(chainNamespace);return requestedCaipNetworks.filter(c=>c.chainNamespace===chainNamespace)?.[0]}return ChainController.W.state.activeCaipNetwork||this.defaultCaipNetwork},this.getCaipNetworkId=()=>{const network=this.getCaipNetwork();if(network)return network.id},this.getCaipNetworks=namespace=>ChainController.W.getCaipNetworks(namespace),this.getActiveChainNamespace=()=>ChainController.W.state.activeChain,this.setRequestedCaipNetworks=(requestedCaipNetworks,chain)=>{ChainController.W.setRequestedCaipNetworks(requestedCaipNetworks,chain)},this.getApprovedCaipNetworkIds=()=>ChainController.W.getAllApprovedCaipNetworkIds(),this.getCaipAddress=chainNamespace=>ChainController.W.state.activeChain!==chainNamespace&&chainNamespace?ChainController.W.getAccountProp("caipAddress",chainNamespace):ChainController.W.state.activeCaipAddress,this.setClientId=clientId=>{BlockchainApiController.T.setClientId(clientId)},this.getProvider=namespace=>ProviderUtil.getProvider(namespace),this.getProviderType=namespace=>ProviderUtil.getProviderId(namespace),this.getPreferredAccountType=namespace=>AccountController.U.state.preferredAccountTypes?.[namespace],this.setCaipAddress=(caipAddress,chain)=>{AccountController.U.setCaipAddress(caipAddress,chain),caipAddress&&OptionsController.H.state.enableEmbedded&&this.close()},this.setBalance=(balance,balanceSymbol,chain)=>{AccountController.U.setBalance(balance,balanceSymbol,chain)},this.setProfileName=(profileName,chain)=>{AccountController.U.setProfileName(profileName,chain)},this.setProfileImage=(profileImage,chain)=>{AccountController.U.setProfileImage(profileImage,chain)},this.setUser=(user,chain)=>{AccountController.U.setUser(user,chain)},this.resetAccount=chain=>{AccountController.U.resetAccount(chain)},this.setCaipNetwork=caipNetwork=>{ChainController.W.setActiveCaipNetwork(caipNetwork)},this.setCaipNetworkOfNamespace=(caipNetwork,chainNamespace)=>{ChainController.W.setChainNetworkData(chainNamespace,{caipNetwork})},this.setAllAccounts=(addresses,chain)=>{AccountController.U.setAllAccounts(addresses,chain),OptionsController.H.setHasMultipleAddresses(addresses?.length>1)},this.setStatus=(status,chain)=>{AccountController.U.setStatus(status,chain),ConnectorController.a.isConnected()?StorageUtil.i.setConnectionStatus("connected"):StorageUtil.i.setConnectionStatus("disconnected")},this.getAddressByChainNamespace=chainNamespace=>ChainController.W.getAccountProp("address",chainNamespace),this.setConnectors=connectors=>{const allConnectors=[...ConnectorController.a.state.allConnectors,...connectors];ConnectorController.a.setConnectors(allConnectors)},this.setConnections=(connections,chainNamespace)=>{ConnectionController.x.setConnections(connections,chainNamespace)},this.fetchIdentity=request=>BlockchainApiController.T.fetchIdentity(request),this.getReownName=address=>EnsController.getNamesForAddress(address),this.getConnectors=()=>ConnectorController.a.getConnectors(),this.getConnectorImage=connector=>AssetUtil.$.getConnectorImage(connector),this.setConnectedWalletInfo=(connectedWalletInfo,chain)=>{const type=ProviderUtil.getProviderId(chain),walletInfo=connectedWalletInfo?{...connectedWalletInfo,type}:void 0;AccountController.U.setConnectedWalletInfo(walletInfo,chain)},this.getIsConnectedState=()=>Boolean(ChainController.W.state.activeCaipAddress),this.addAddressLabel=(address,label,chain)=>{AccountController.U.addAddressLabel(address,label,chain)},this.removeAddressLabel=(address,chain)=>{AccountController.U.removeAddressLabel(address,chain)},this.getAddress=chainNamespace=>ChainController.W.state.activeChain!==chainNamespace&&chainNamespace?ChainController.W.getAccountProp("address",chainNamespace):AccountController.U.state.address,this.setApprovedCaipNetworksData=namespace=>ChainController.W.setApprovedCaipNetworksData(namespace),this.resetNetwork=namespace=>{ChainController.W.resetNetwork(namespace)},this.addConnector=connector=>{ConnectorController.a.addConnector(connector)},this.resetWcConnection=()=>{ConnectionController.x.resetWcConnection()},this.setAddressExplorerUrl=(addressExplorerUrl,chain)=>{AccountController.U.setAddressExplorerUrl(addressExplorerUrl,chain)},this.setSmartAccountDeployed=(isDeployed,chain)=>{AccountController.U.setSmartAccountDeployed(isDeployed,chain)},this.setSmartAccountEnabledNetworks=(smartAccountEnabledNetworks,chain)=>{ChainController.W.setSmartAccountEnabledNetworks(smartAccountEnabledNetworks,chain)},this.setPreferredAccountType=(preferredAccountType,chain)=>{AccountController.U.setPreferredAccountType(preferredAccountType,chain)},this.setEIP6963Enabled=enabled=>{OptionsController.H.setEIP6963Enabled(enabled)},this.handleUnsafeRPCRequest=()=>{if(this.isOpen()){if(this.isTransactionStackEmpty())return;this.redirect("ApproveTransaction")}else this.open({view:"ApproveTransaction"})},this.options=options,this.version=options.sdkVersion,this.caipNetworks=this.extendCaipNetworks(options),this.chainNamespaces=this.getChainNamespacesSet(options.adapters,this.caipNetworks),this.defaultCaipNetwork=this.extendDefaultCaipNetwork(options),this.chainAdapters=this.createAdapters(options.adapters),this.readyPromise=this.initialize(options)}getChainNamespacesSet(adapters,caipNetworks){const adapterNamespaces=adapters?.map(adapter=>adapter.namespace).filter(namespace=>Boolean(namespace));if(adapterNamespaces?.length)return[...new Set(adapterNamespaces)];const networkNamespaces=caipNetworks?.map(network=>network.chainNamespace);return[...new Set(networkNamespaces)]}async initialize(options){this.initializeProjectSettings(options),this.initControllers(options),await this.initChainAdapters(),this.sendInitializeEvent(options),await this.syncExistingConnection(),this.remoteFeatures=await ConfigUtil.fetchRemoteFeatures(options),OptionsController.H.setRemoteFeatures(this.remoteFeatures),this.remoteFeatures.onramp&&OnRampController.setOnrampProviders(this.remoteFeatures.onramp),(OptionsController.H.state.remoteFeatures?.email||Array.isArray(OptionsController.H.state.remoteFeatures?.socials)&&OptionsController.H.state.remoteFeatures?.socials.length>0)&&await this.checkAllowedOrigins()}async checkAllowedOrigins(){const allowedOrigins=await ApiController.N.fetchAllowedOrigins();if(allowedOrigins&&CoreHelperUtil.w.isClient()){const currentOrigin=window.location.origin;WcHelpersUtil.isOriginAllowed(currentOrigin,allowedOrigins,WcConstantsUtil_DEFAULT_ALLOWED_ANCESTORS)||AlertController.h.open(ErrorUtil.ALERT_ERRORS.INVALID_APP_CONFIGURATION,"error")}else AlertController.h.open(ErrorUtil.ALERT_ERRORS.PROJECT_ID_NOT_CONFIGURED,"error")}sendInitializeEvent(options){const{...optionsCopy}=options;delete optionsCopy.adapters,delete optionsCopy.universalProvider,EventsController.E.sendEvent({type:"track",event:"INITIALIZE",properties:{...optionsCopy,networks:options.networks.map(n=>n.id),siweConfig:{options:options.siweConfig?.options||{}}}})}initControllers(options){this.initializeOptionsController(options),this.initializeChainController(options),this.initializeThemeController(options),this.initializeConnectionController(options),this.initializeConnectorController()}initializeThemeController(options){options.themeMode&&ThemeController.W.setThemeMode(options.themeMode),options.themeVariables&&ThemeController.W.setThemeVariables(options.themeVariables)}initializeChainController(options){if(!this.connectionControllerClient||!this.networkControllerClient)throw new Error("ConnectionControllerClient and NetworkControllerClient must be set");ChainController.W.initialize(options.adapters??[],this.caipNetworks,{connectionControllerClient:this.connectionControllerClient,networkControllerClient:this.networkControllerClient});const network=this.getDefaultNetwork();network&&ChainController.W.setActiveCaipNetwork(network)}initializeConnectionController(options){ConnectionController.x.setWcBasic(options.basic??!1)}initializeConnectorController(){ConnectorController.a.initialize(this.chainNamespaces)}initializeProjectSettings(options){OptionsController.H.setProjectId(options.projectId),OptionsController.H.setSdkVersion(options.sdkVersion)}initializeOptionsController(options){OptionsController.H.setDebug(!1!==options.debug),OptionsController.H.setEnableWalletConnect(!1!==options.enableWalletConnect),OptionsController.H.setEnableWalletGuide(!1!==options.enableWalletGuide),OptionsController.H.setEnableWallets(!1!==options.enableWallets),OptionsController.H.setEIP6963Enabled(!1!==options.enableEIP6963),OptionsController.H.setEnableNetworkSwitch(!1!==options.enableNetworkSwitch),OptionsController.H.setEnableAuthLogger(!1!==options.enableAuthLogger),OptionsController.H.setCustomRpcUrls(options.customRpcUrls),OptionsController.H.setEnableEmbedded(options.enableEmbedded),OptionsController.H.setAllWallets(options.allWallets),OptionsController.H.setIncludeWalletIds(options.includeWalletIds),OptionsController.H.setExcludeWalletIds(options.excludeWalletIds),OptionsController.H.setFeaturedWalletIds(options.featuredWalletIds),OptionsController.H.setTokens(options.tokens),OptionsController.H.setTermsConditionsUrl(options.termsConditionsUrl),OptionsController.H.setPrivacyPolicyUrl(options.privacyPolicyUrl),OptionsController.H.setCustomWallets(options.customWallets),OptionsController.H.setFeatures(options.features),OptionsController.H.setAllowUnsupportedChain(options.allowUnsupportedChain),OptionsController.H.setUniversalProviderConfigOverride(options.universalProviderConfigOverride),OptionsController.H.setPreferUniversalLinks(options.experimental_preferUniversalLinks),OptionsController.H.setDefaultAccountTypes(options.defaultAccountTypes);const storedAccountTypes=StorageUtil.i.getPreferredAccountTypes()||{},defaultTypes={...OptionsController.H.state.defaultAccountTypes,...storedAccountTypes};AccountController.U.setPreferredAccountTypes(defaultTypes);const defaultMetaData=this.getDefaultMetaData();if(!options.metadata&&defaultMetaData&&(options.metadata=defaultMetaData),OptionsController.H.setMetadata(options.metadata),OptionsController.H.setDisableAppend(options.disableAppend),OptionsController.H.setEnableEmbedded(options.enableEmbedded),OptionsController.H.setSIWX(options.siwx),!options.projectId)return void AlertController.h.open(ErrorUtil.ALERT_ERRORS.PROJECT_ID_NOT_CONFIGURED,"error");const evmAdapter=options.adapters?.find(adapter=>adapter.namespace===ConstantsUtil.o.CHAIN.EVM);if(evmAdapter&&options.siweConfig){if(options.siwx)throw new Error("Cannot set both `siweConfig` and `siwx` options");OptionsController.H.setSIWX(options.siweConfig.mapToSIWX())}}getDefaultMetaData(){return CoreHelperUtil.w.isClient()?{name:document.getElementsByTagName("title")?.[0]?.textContent||"",description:document.querySelector('meta[property="og:description"]')?.content||"",url:window.location.origin,icons:[document.querySelector('link[rel~="icon"]')?.href||""]}:null}setUnsupportedNetwork(chainId){const namespace=this.getActiveChainNamespace();if(namespace){const unsupportedNetwork=CaipNetworksUtil.getUnsupportedNetwork(`${namespace}:${chainId}`);ChainController.W.setActiveCaipNetwork(unsupportedNetwork)}}getDefaultNetwork(){return CaipNetworksUtil.getCaipNetworkFromStorage(this.defaultCaipNetwork)}extendCaipNetwork(network,options){return CaipNetworksUtil.extendCaipNetwork(network,{customNetworkImageUrls:options.chainImages,projectId:options.projectId})}extendCaipNetworks(options){return CaipNetworksUtil.extendCaipNetworks(options.networks,{customNetworkImageUrls:options.chainImages,customRpcUrls:options.customRpcUrls,projectId:options.projectId})}extendDefaultCaipNetwork(options){const defaultNetwork=options.networks.find(n=>n.id===options.defaultNetwork?.id);return defaultNetwork?CaipNetworksUtil.extendCaipNetwork(defaultNetwork,{customNetworkImageUrls:options.chainImages,customRpcUrls:options.customRpcUrls,projectId:options.projectId}):void 0}async disconnectNamespace(namespace){try{const adapter=this.getAdapter(namespace),provider=ProviderUtil.getProvider(namespace),providerType=ProviderUtil.getProviderId(namespace),{caipAddress}=ChainController.W.getAccountData(namespace)||{};this.setLoading(!0,namespace),caipAddress&&adapter?.disconnect&&await adapter.disconnect({provider,providerType}),StorageUtil.i.removeConnectedNamespace(namespace),ProviderUtil.resetChain(namespace),this.setUser(void 0,namespace),this.setStatus("disconnected",namespace),this.setConnectedWalletInfo(void 0,namespace),ConnectorController.a.removeConnectorId(namespace),ChainController.W.resetAccount(namespace),ChainController.W.resetNetwork(namespace),this.setLoading(!1,namespace)}catch(error){throw this.setLoading(!1,namespace),new Error(`Failed to disconnect chain ${namespace}: ${error.message}`)}}createClients(){this.connectionControllerClient={connectWalletConnect:async()=>{const activeChain=ChainController.W.state.activeChain,adapter=this.getAdapter(activeChain),chainId=this.getCaipNetwork(activeChain)?.id;if(!adapter)throw new Error("Adapter not found");const result=await adapter.connectWalletConnect(chainId);this.close(),this.setClientId(result?.clientId||null),StorageUtil.i.setConnectedNamespaces([...ChainController.W.state.chains.keys()]),this.chainNamespaces.forEach(namespace=>{ConnectorController.a.setConnectorId(src_ConstantsUtil.o.CONNECTOR_TYPE_WALLET_CONNECT,namespace)}),await this.syncWalletConnectAccount()},connectExternal:async({id,info,type,provider,chain,caipNetwork,socialUri})=>{const activeChain=ChainController.W.state.activeChain,chainToUse=chain||activeChain,adapter=this.getAdapter(chainToUse);if(chain&&chain!==activeChain&&!caipNetwork){const toConnectNetwork=this.getCaipNetworks().find(network=>network.chainNamespace===chain);toConnectNetwork&&this.setCaipNetwork(toConnectNetwork)}if(!adapter)throw new Error("Adapter not found");const fallbackCaipNetwork=this.getCaipNetwork(chainToUse),res=await adapter.connect({id,info,type,provider,socialUri,chainId:caipNetwork?.id||fallbackCaipNetwork?.id,rpcUrl:caipNetwork?.rpcUrls?.default?.http?.[0]||fallbackCaipNetwork?.rpcUrls?.default?.http?.[0]});if(!res)return;StorageUtil.i.addConnectedNamespace(chainToUse),this.syncProvider({...res,chainNamespace:chainToUse});const syncedAccounts=AccountController.U.state.allAccounts,{accounts}=syncedAccounts?.length>0?{accounts:[...syncedAccounts]}:await adapter.getAccounts({namespace:chainToUse,id});this.setAllAccounts(accounts,chainToUse),this.setStatus("connected",chainToUse),this.syncConnectedWalletInfo(chainToUse)},reconnectExternal:async({id,info,type,provider})=>{const namespace=ChainController.W.state.activeChain,adapter=this.getAdapter(namespace);adapter?.reconnect&&(await(adapter?.reconnect({id,info,type,provider,chainId:this.getCaipNetwork()?.id})),StorageUtil.i.addConnectedNamespace(namespace),this.syncConnectedWalletInfo(namespace))},disconnect:async chainNamespace=>{const chainsToDisconnect=function getChainsToDisconnect(namespace){const namespaces=Array.from(ChainController.W.state.chains.keys());let chains=[];return namespace?(chains.push([namespace,ChainController.W.state.chains.get(namespace)]),checkNamespaceConnectorId(namespace,ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT)?namespaces.forEach(ns=>{ns!==namespace&&checkNamespaceConnectorId(ns,ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT)&&chains.push([ns,ChainController.W.state.chains.get(ns)])}):checkNamespaceConnectorId(namespace,ConstantsUtil.o.CONNECTOR_ID.AUTH)&&namespaces.forEach(ns=>{ns!==namespace&&checkNamespaceConnectorId(ns,ConstantsUtil.o.CONNECTOR_ID.AUTH)&&chains.push([ns,ChainController.W.state.chains.get(ns)])})):chains=Array.from(ChainController.W.state.chains.entries()),chains}(chainNamespace);try{const disconnectResults=await Promise.allSettled(chainsToDisconnect.map(async([ns])=>this.disconnectNamespace(ns)));SendController.R.resetSend(),ConnectionController.x.resetWcConnection(),await SIWXUtil.U.clearSessions(),ConnectorController.a.setFilterByNamespace(void 0);const failures=disconnectResults.filter(result=>"rejected"===result.status);if(failures.length>0)throw new Error(failures.map(f=>f.reason.message).join(", "));StorageUtil.i.deleteConnectedSocialProvider(),EventsController.E.sendEvent({type:"track",event:"DISCONNECT_SUCCESS",properties:{namespace:chainNamespace||"all"}})}catch(error){throw new Error(`Failed to disconnect chains: ${error.message}`)}},checkInstalled:ids=>ids?ids.some(id=>Boolean(window.ethereum?.[String(id)])):Boolean(window.ethereum),signMessage:async message=>{const adapter=this.getAdapter(ChainController.W.state.activeChain),result=await(adapter?.signMessage({message,address:AccountController.U.state.address,provider:ProviderUtil.getProvider(ChainController.W.state.activeChain)}));return result?.signature||""},sendTransaction:async args=>{const namespace=args.chainNamespace;if(utils_ConstantsUtil.oU.SEND_SUPPORTED_NAMESPACES.includes(namespace)){const adapter=this.getAdapter(ChainController.W.state.activeChain),provider=ProviderUtil.getProvider(namespace),result=await(adapter?.sendTransaction({...args,caipNetwork:this.getCaipNetwork(),provider}));return result?.hash||""}return""},estimateGas:async args=>{if(args.chainNamespace===ConstantsUtil.o.CHAIN.EVM){const adapter=this.getAdapter(ChainController.W.state.activeChain),provider=ProviderUtil.getProvider(ChainController.W.state.activeChain),caipNetwork=this.getCaipNetwork();if(!caipNetwork)throw new Error("CaipNetwork is undefined");const result=await(adapter?.estimateGas({...args,provider,caipNetwork}));return result?.gas||0n}return 0n},getEnsAvatar:async()=>(await this.syncIdentity({address:AccountController.U.state.address,chainId:Number(this.getCaipNetwork()?.id),chainNamespace:ChainController.W.state.activeChain}),AccountController.U.state.profileImage||!1),getEnsAddress:async name=>await WcHelpersUtil.resolveReownName(name),writeContract:async args=>{const adapter=this.getAdapter(ChainController.W.state.activeChain),caipNetwork=this.getCaipNetwork(),caipAddress=this.getCaipAddress(),provider=ProviderUtil.getProvider(ChainController.W.state.activeChain);if(!caipNetwork||!caipAddress)throw new Error("CaipNetwork or CaipAddress is undefined");const result=await(adapter?.writeContract({...args,caipNetwork,provider,caipAddress}));return result?.hash},parseUnits:(value,decimals)=>{const adapter=this.getAdapter(ChainController.W.state.activeChain);return adapter?.parseUnits({value,decimals})??0n},formatUnits:(value,decimals)=>{const adapter=this.getAdapter(ChainController.W.state.activeChain);return adapter?.formatUnits({value,decimals})??"0"},getCapabilities:async params=>{const adapter=this.getAdapter(ChainController.W.state.activeChain);return await(adapter?.getCapabilities(params))},grantPermissions:async params=>{const adapter=this.getAdapter(ChainController.W.state.activeChain);return await(adapter?.grantPermissions(params))},revokePermissions:async params=>{const adapter=this.getAdapter(ChainController.W.state.activeChain);return adapter?.revokePermissions?await adapter.revokePermissions(params):"0x"},walletGetAssets:async params=>{const adapter=this.getAdapter(ChainController.W.state.activeChain);return await(adapter?.walletGetAssets(params))??{}},updateBalance:namespace=>{const caipNetwork=this.getCaipNetwork(namespace);caipNetwork&&AccountController.U.state.address&&this.updateNativeBalance(AccountController.U.state.address,caipNetwork?.id,namespace)}},this.networkControllerClient={switchCaipNetwork:async caipNetwork=>await this.switchCaipNetwork(caipNetwork),getApprovedCaipNetworksData:async()=>this.getApprovedCaipNetworksData()},ConnectionController.x.setClient(this.connectionControllerClient)}getApprovedCaipNetworksData(){if(ProviderUtil.getProviderId(ChainController.W.state.activeChain)===src_ConstantsUtil.o.CONNECTOR_TYPE_WALLET_CONNECT){const namespaces=this.universalProvider?.session?.namespaces;return{supportsAllNetworks:"MetaMask Wallet"===this.universalProvider?.session?.peer?.metadata.name,approvedCaipNetworkIds:this.getChainsFromNamespaces(namespaces)}}return{supportsAllNetworks:!0,approvedCaipNetworkIds:[]}}async switchCaipNetwork(caipNetwork){if(!caipNetwork)return;const networkNamespace=caipNetwork.chainNamespace;if(this.getAddressByChainNamespace(caipNetwork.chainNamespace)){const provider=ProviderUtil.getProvider(networkNamespace),providerType=ProviderUtil.getProviderId(networkNamespace);if(caipNetwork.chainNamespace===ChainController.W.state.activeChain){const adapter=this.getAdapter(networkNamespace);await(adapter?.switchNetwork({caipNetwork,provider,providerType}))}else if(this.setCaipNetwork(caipNetwork),providerType===src_ConstantsUtil.o.CONNECTOR_TYPE_WALLET_CONNECT)this.syncWalletConnectAccount();else{const address=this.getAddressByChainNamespace(networkNamespace);address&&this.syncAccount({address,chainId:caipNetwork.id,chainNamespace:networkNamespace})}}else this.setCaipNetwork(caipNetwork)}getChainsFromNamespaces(namespaces={}){return Object.values(namespaces).flatMap(namespace=>{const chains=namespace.chains||[],accountsChains=namespace.accounts.map(account=>{const{chainId,chainNamespace}=ParseUtil.parseCaipAddress(account);return`${chainNamespace}:${chainId}`});return Array.from(new Set([...chains,...accountsChains]))})}createAdapters(blueprints){return this.createClients(),this.chainNamespaces.reduce((adapters,namespace)=>{const blueprint=blueprints?.find(b=>b.namespace===namespace);return blueprint?(blueprint.construct({namespace,projectId:this.options?.projectId,networks:this.getCaipNetworks()}),adapters[namespace]=blueprint):adapters[namespace]=new UniversalAdapter({namespace,networks:this.getCaipNetworks()}),adapters},{})}async initChainAdapter(namespace){this.onConnectors(namespace),this.listenAdapter(namespace),await(this.chainAdapters?.[namespace].syncConnectors(this.options,this)),await this.createUniversalProviderForAdapter(namespace)}async initChainAdapters(){await Promise.all(this.chainNamespaces.map(async namespace=>{await this.initChainAdapter(namespace)}))}onConnectors(chainNamespace){const adapter=this.getAdapter(chainNamespace);adapter?.on("connectors",this.setConnectors.bind(this))}listenAdapter(chainNamespace){const adapter=this.getAdapter(chainNamespace);if(!adapter)return;const connectionStatus=StorageUtil.i.getConnectionStatus();"connected"===connectionStatus?this.setStatus("connecting",chainNamespace):"disconnected"===connectionStatus?(StorageUtil.i.clearAddressCache(),this.setStatus(connectionStatus,chainNamespace)):this.setStatus(connectionStatus,chainNamespace),adapter.on("switchNetwork",({address,chainId})=>{const caipNetwork=this.getCaipNetworks().find(n=>n.id===chainId||n.caipNetworkId===chainId),isSameNamespace=ChainController.W.state.activeChain===chainNamespace,accountAddress=ChainController.W.getAccountProp("address",chainNamespace);if(caipNetwork){const account=isSameNamespace&&address?address:accountAddress;account&&this.syncAccount({address:account,chainId:caipNetwork.id,chainNamespace})}else this.setUnsupportedNetwork(chainId)}),adapter.on("disconnect",this.disconnect.bind(this,chainNamespace)),adapter.on("connections",connections=>{this.setConnections(connections,chainNamespace)}),adapter.on("pendingTransactions",()=>{const address=AccountController.U.state.address,activeCaipNetwork=ChainController.W.state.activeCaipNetwork;address&&activeCaipNetwork?.id&&this.updateNativeBalance(address,activeCaipNetwork.id,activeCaipNetwork.chainNamespace)}),adapter.on("accountChanged",({address,chainId})=>{const isActiveChain=ChainController.W.state.activeChain===chainNamespace;isActiveChain&&chainId?this.syncAccount({address,chainId,chainNamespace}):isActiveChain&&ChainController.W.state.activeCaipNetwork?.id?this.syncAccount({address,chainId:ChainController.W.state.activeCaipNetwork?.id,chainNamespace}):this.syncAccountInfo(address,chainId,chainNamespace),this.syncAllAccounts(chainNamespace)})}async createUniversalProviderForAdapter(chainNamespace){await this.getUniversalProvider(),this.universalProvider&&this.chainAdapters?.[chainNamespace]?.setUniversalProvider?.(this.universalProvider)}async syncExistingConnection(){await Promise.allSettled(this.chainNamespaces.map(namespace=>this.syncNamespaceConnection(namespace)))}async syncNamespaceConnection(namespace){try{namespace===ConstantsUtil.o.CHAIN.EVM&&CoreHelperUtil.w.isSafeApp()&&ConnectorController.a.setConnectorId(ConstantsUtil.o.CONNECTOR_ID.SAFE,namespace);const connectorId=ConnectorController.a.getConnectorId(namespace);switch(this.setStatus("connecting",namespace),connectorId){case ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT:await this.syncWalletConnectAccount();break;case ConstantsUtil.o.CONNECTOR_ID.AUTH:break;default:await this.syncAdapterConnection(namespace)}}catch(err){appkit_base_client_console.warn("AppKit couldn't sync existing connection",err),this.setStatus("disconnected",namespace)}}async syncAdapterConnection(namespace){const adapter=this.getAdapter(namespace),connectorId=ConnectorController.a.getConnectorId(namespace),caipNetwork=this.getCaipNetwork(namespace),connector=ConnectorController.a.getConnectors(namespace).find(c=>c.id===connectorId);try{if(!adapter||!connector)throw new Error(`Adapter or connector not found for namespace ${namespace}`);if(!caipNetwork?.id)throw new Error("CaipNetwork not found");const connection=await(adapter?.syncConnection({namespace,id:connector.id,chainId:caipNetwork.id,rpcUrl:caipNetwork?.rpcUrls?.default?.http?.[0]}));if(connection){const accounts=await(adapter?.getAccounts({namespace,id:connector.id}));accounts&&accounts.accounts.length>0?this.setAllAccounts(accounts.accounts,namespace):this.setAllAccounts([CoreHelperUtil.w.createAccount(namespace,connection.address,"eoa")],namespace),this.syncProvider({...connection,chainNamespace:namespace}),await this.syncAccount({...connection,chainNamespace:namespace}),this.setStatus("connected",namespace)}else this.setStatus("disconnected",namespace)}catch(e){this.setStatus("disconnected",namespace)}}async syncWalletConnectAccount(){const syncTasks=this.chainNamespaces.map(async chainNamespace=>{const adapter=this.getAdapter(chainNamespace),namespaceAccounts=this.universalProvider?.session?.namespaces?.[chainNamespace]?.accounts||[],activeChainId=ChainController.W.state.activeCaipNetwork?.id,sessionAddress=namespaceAccounts.find(account=>{const{chainId}=ParseUtil.parseCaipAddress(account);return chainId===activeChainId?.toString()})||namespaceAccounts[0];if(sessionAddress){const caipAddress=ParseUtil.validateCaipAddress(sessionAddress),{chainId,address}=ParseUtil.parseCaipAddress(caipAddress);if(ProviderUtil.setProviderId(chainNamespace,src_ConstantsUtil.o.CONNECTOR_TYPE_WALLET_CONNECT),this.caipNetworks&&ChainController.W.state.activeCaipNetwork&&adapter?.namespace!==ConstantsUtil.o.CHAIN.EVM){const provider=adapter?.getWalletConnectProvider({caipNetworks:this.getCaipNetworks(),provider:this.universalProvider,activeCaipNetwork:ChainController.W.state.activeCaipNetwork});ProviderUtil.setProvider(chainNamespace,provider)}else ProviderUtil.setProvider(chainNamespace,this.universalProvider);ConnectorController.a.setConnectorId(ConstantsUtil.o.CONNECTOR_ID.WALLET_CONNECT,chainNamespace),StorageUtil.i.addConnectedNamespace(chainNamespace),this.syncWalletConnectAccounts(chainNamespace),await this.syncAccount({address,chainId,chainNamespace})}else this.setStatus("disconnected",chainNamespace);this.syncConnectedWalletInfo(chainNamespace),await ChainController.W.setApprovedCaipNetworksData(chainNamespace)});await Promise.all(syncTasks)}syncWalletConnectAccounts(chainNamespace){const addresses=this.universalProvider?.session?.namespaces?.[chainNamespace]?.accounts?.map(account=>{const{address}=ParseUtil.parseCaipAddress(account);return address}).filter((address,index,self)=>self.indexOf(address)===index);addresses&&this.setAllAccounts(addresses.map(address=>CoreHelperUtil.w.createAccount(chainNamespace,address,"bip122"===chainNamespace?"payment":"eoa")),chainNamespace)}syncProvider({type,provider,id,chainNamespace}){ProviderUtil.setProviderId(chainNamespace,type),ProviderUtil.setProvider(chainNamespace,provider),ConnectorController.a.setConnectorId(id,chainNamespace)}async syncAllAccounts(namespace){const connectorId=ConnectorController.a.getConnectorId(namespace);if(!connectorId)return;const adapter=this.getAdapter(namespace),accounts=await(adapter?.getAccounts({namespace,id:connectorId}));accounts&&accounts.accounts.length>0&&this.setAllAccounts(accounts.accounts,namespace)}async syncAccount(params){const isActiveNamespace=params.chainNamespace===ChainController.W.state.activeChain,networkOfChain=ChainController.W.getCaipNetworkByNamespace(params.chainNamespace,params.chainId),{address,chainId,chainNamespace}=params,{chainId:activeChainId}=StorageUtil.i.getActiveNetworkProps(),chainIdToUse=chainId||activeChainId,isUnsupportedNetwork=ChainController.W.state.activeCaipNetwork?.name===ConstantsUtil.o.UNSUPPORTED_NETWORK_NAME,shouldSupportAllNetworks=ChainController.W.getNetworkProp("supportsAllNetworks",chainNamespace);if(this.setStatus("connected",chainNamespace),(!isUnsupportedNetwork||shouldSupportAllNetworks)&&chainIdToUse){let caipNetwork=this.getCaipNetworks().find(n=>n.id.toString()===chainIdToUse.toString()),fallbackCaipNetwork=this.getCaipNetworks().find(n=>n.chainNamespace===chainNamespace);if(!shouldSupportAllNetworks&&!caipNetwork&&!fallbackCaipNetwork){const caipNetworkIds=this.getApprovedCaipNetworkIds()||[],caipNetworkId=caipNetworkIds.find(id=>ParseUtil.parseCaipNetworkId(id)?.chainId===chainIdToUse.toString()),fallBackCaipNetworkId=caipNetworkIds.find(id=>ParseUtil.parseCaipNetworkId(id)?.chainNamespace===chainNamespace);caipNetwork=this.getCaipNetworks().find(n=>n.caipNetworkId===caipNetworkId),fallbackCaipNetwork=this.getCaipNetworks().find(n=>n.caipNetworkId===fallBackCaipNetworkId||"deprecatedCaipNetworkId"in n&&n.deprecatedCaipNetworkId===fallBackCaipNetworkId)}const network=caipNetwork||fallbackCaipNetwork;network?.chainNamespace===ChainController.W.state.activeChain?OptionsController.H.state.enableNetworkSwitch&&!OptionsController.H.state.allowUnsupportedChain&&ChainController.W.state.activeCaipNetwork?.name===ConstantsUtil.o.UNSUPPORTED_NETWORK_NAME?ChainController.W.showUnsupportedChainUI():this.setCaipNetwork(network):isActiveNamespace||networkOfChain&&this.setCaipNetworkOfNamespace(networkOfChain,chainNamespace),this.syncConnectedWalletInfo(chainNamespace),HelpersUtil.y.isLowerCaseMatch(address,AccountController.U.state.address)||this.syncAccountInfo(address,network?.id,chainNamespace),isActiveNamespace?await this.syncBalance({address,chainId:network?.id,chainNamespace}):await this.syncBalance({address,chainId:networkOfChain?.id,chainNamespace})}}async syncAccountInfo(address,chainId,chainNamespace){const caipAddress=this.getCaipAddress(chainNamespace),newChainId=chainId||caipAddress?.split(":")[1];if(!newChainId)return;const newCaipAddress=`${chainNamespace}:${newChainId}:${address}`;this.setCaipAddress(newCaipAddress,chainNamespace),await this.syncIdentity({address,chainId:newChainId,chainNamespace})}async syncReownName(address,chainNamespace){try{const registeredWcNames=await this.getReownName(address);if(registeredWcNames[0]){const wcName=registeredWcNames[0];this.setProfileName(wcName.name,chainNamespace)}else this.setProfileName(null,chainNamespace)}catch{this.setProfileName(null,chainNamespace)}}syncConnectedWalletInfo(chainNamespace){const connectorId=ConnectorController.a.getConnectorId(chainNamespace),providerType=ProviderUtil.getProviderId(chainNamespace);if(providerType===src_ConstantsUtil.o.CONNECTOR_TYPE_ANNOUNCED||providerType===src_ConstantsUtil.o.CONNECTOR_TYPE_INJECTED){if(connectorId){const connector=this.getConnectors().find(c=>c.id===connectorId);if(connector){const{info,name,imageUrl}=connector,icon=imageUrl||this.getConnectorImage(connector);this.setConnectedWalletInfo({name,icon,...info},chainNamespace)}}}else if(providerType===src_ConstantsUtil.o.CONNECTOR_TYPE_WALLET_CONNECT){const provider=ProviderUtil.getProvider(chainNamespace);provider?.session&&this.setConnectedWalletInfo({...provider.session.peer.metadata,name:provider.session.peer.metadata.name,icon:provider.session.peer.metadata.icons?.[0]},chainNamespace)}else if(connectorId&&connectorId===ConstantsUtil.o.CONNECTOR_ID.COINBASE){const connector=this.getConnectors().find(c=>c.id===ConstantsUtil.o.CONNECTOR_ID.COINBASE);this.setConnectedWalletInfo({name:"Coinbase Wallet",icon:this.getConnectorImage(connector)},chainNamespace)}}async syncBalance(params){NetworkUtil.L.getNetworksByNamespace(this.getCaipNetworks(),params.chainNamespace).find(n=>n.id.toString()===params.chainId?.toString())&&params.chainId&&await this.updateNativeBalance(params.address,params.chainId,params.chainNamespace)}async ready(){await this.readyPromise}async updateNativeBalance(address,chainId,namespace){const adapter=this.getAdapter(namespace),caipNetwork=ChainController.W.getCaipNetworkByNamespace(namespace,chainId);if(adapter){const balance=await adapter.getBalance({address,chainId,caipNetwork,tokens:this.options.tokens});return this.setBalance(balance.balance,balance.symbol,namespace),balance}}async initializeUniversalAdapter(){const logger=LoggerUtil.createLogger((error,...args)=>{error&&this.handleAlertError(error),appkit_base_client_console.error(...args)}),universalProviderOptions={projectId:this.options?.projectId,metadata:{name:this.options?.metadata?this.options?.metadata.name:"",description:this.options?.metadata?this.options?.metadata.description:"",url:this.options?.metadata?this.options?.metadata.url:"",icons:this.options?.metadata?this.options?.metadata.icons:[""]},logger};OptionsController.H.setManualWCControl(Boolean(this.options?.manualWCControl)),this.universalProvider=this.options.universalProvider??await index_es.A.init(universalProviderOptions),this.listenWalletConnect()}listenWalletConnect(){this.universalProvider&&(this.universalProvider.on("display_uri",uri=>{ConnectionController.x.setUri(uri)}),this.universalProvider.on("connect",ConnectionController.x.finalizeWcConnection),this.universalProvider.on("disconnect",()=>{this.chainNamespaces.forEach(namespace=>{this.resetAccount(namespace)}),ConnectionController.x.resetWcConnection()}),this.universalProvider.on("chainChanged",chainId=>{const caipNetwork=this.getCaipNetworks().find(c=>c.id==chainId),currentCaipNetwork=this.getCaipNetwork();caipNetwork?currentCaipNetwork?.id!==caipNetwork?.id&&this.setCaipNetwork(caipNetwork):this.setUnsupportedNetwork(chainId)}),this.universalProvider.on("session_event",callbackData=>{if(WcHelpersUtil.isSessionEventData(callbackData)){const{name,data}=callbackData.params.event;"accountsChanged"===name&&Array.isArray(data)&&CoreHelperUtil.w.isCaipAddress(data[0])&&this.syncAccount(ParseUtil.parseCaipAddress(data[0]))}}))}createUniversalProvider(){return!this.universalProviderInitPromise&&CoreHelperUtil.w.isClient()&&this.options?.projectId&&(this.universalProviderInitPromise=this.initializeUniversalAdapter()),this.universalProviderInitPromise}async getUniversalProvider(){if(!this.universalProvider)try{await this.createUniversalProvider()}catch(err){EventsController.E.sendEvent({type:"error",event:"INTERNAL_SDK_ERROR",properties:{errorType:"UniversalProviderInitError",errorMessage:err instanceof Error?err.message:"Unknown",uncaught:!1}}),appkit_base_client_console.error("AppKit:getUniversalProvider - Cannot create provider",err)}return this.universalProvider}handleAlertError(error){const matchedUniversalProviderError=Object.entries(ErrorUtil.UniversalProviderErrors).find(([,{message}])=>error.message.includes(message)),[errorKey,errorValue]=matchedUniversalProviderError??[],{message,alertErrorKey}=errorValue??{};if(errorKey&&message&&!this.reportedAlertErrors[errorKey]){const alertError=ErrorUtil.ALERT_ERRORS[alertErrorKey];alertError&&(AlertController.h.open(alertError,"error"),this.reportedAlertErrors[errorKey]=!0)}}getAdapter(namespace){if(namespace)return this.chainAdapters?.[namespace]}createAdapter(blueprint){if(!blueprint)return;const namespace=blueprint.namespace;if(!namespace)return;this.createClients();const adapterBlueprint=blueprint;adapterBlueprint.namespace=namespace,adapterBlueprint.construct({namespace,projectId:this.options?.projectId,networks:this.getCaipNetworks()}),this.chainNamespaces.includes(namespace)||this.chainNamespaces.push(namespace),this.chainAdapters&&(this.chainAdapters[namespace]=adapterBlueprint)}async open(options){return await this.injectModalUi(),options?.uri&&ConnectionController.x.setUri(options.uri),options?.arguments&&"Swap"===options?.view?ModalController.W.open({...options,data:{swap:options.arguments}}):ModalController.W.open(options)}async close(){await this.injectModalUi(),ModalController.W.close()}setLoading(loading,namespace){ModalController.W.setLoading(loading,namespace)}async disconnect(chainNamespace){await ConnectionController.x.disconnect(chainNamespace)}getSIWX(){return OptionsController.H.state.siwx}getError(){return""}getChainId(){return ChainController.W.state.activeCaipNetwork?.id}async switchNetwork(appKitNetwork){const network=this.getCaipNetworks().find(n=>n.id===appKitNetwork.id);network?await ChainController.W.switchActiveNetwork(network):AlertController.h.open(ErrorUtil.ALERT_ERRORS.SWITCH_NETWORK_NOT_FOUND,"error")}getWalletProvider(){return ChainController.W.state.activeChain?ProviderUtil.state.providers[ChainController.W.state.activeChain]:null}getWalletProviderType(){return ProviderUtil.getProviderId(ChainController.W.state.activeChain)}subscribeProviders(callback){return ProviderUtil.subscribeProviders(callback)}getThemeMode(){return ThemeController.W.state.themeMode}getThemeVariables(){return ThemeController.W.state.themeVariables}setThemeMode(themeMode){ThemeController.W.setThemeMode(themeMode),(0,esm_exports.JX)(ThemeController.W.state.themeMode)}setTermsConditionsUrl(termsConditionsUrl){OptionsController.H.setTermsConditionsUrl(termsConditionsUrl)}setPrivacyPolicyUrl(privacyPolicyUrl){OptionsController.H.setPrivacyPolicyUrl(privacyPolicyUrl)}setThemeVariables(themeVariables){ThemeController.W.setThemeVariables(themeVariables),(0,esm_exports.ds)(ThemeController.W.state.themeVariables)}subscribeTheme(callback){return ThemeController.W.subscribe(callback)}getWalletInfo(){return AccountController.U.state.connectedWalletInfo}getAccount(namespace){const authConnector=ConnectorController.a.getAuthConnector(namespace),accountState=ChainController.W.getAccountData(namespace),activeChain=ChainController.W.state.activeChain,activeConnectorId=StorageUtil.i.getConnectedConnectorId(namespace||activeChain);if(accountState)return{allAccounts:accountState.allAccounts,caipAddress:accountState.caipAddress,address:CoreHelperUtil.w.getPlainAddress(accountState.caipAddress),isConnected:Boolean(accountState.caipAddress),status:accountState.status,embeddedWalletInfo:authConnector&&activeConnectorId===ConstantsUtil.o.CONNECTOR_ID.AUTH?{user:accountState.user?{...accountState.user,username:StorageUtil.i.getConnectedSocialUsername()}:void 0,authProvider:accountState.socialProvider||"email",accountType:accountState.preferredAccountTypes?.[namespace||activeChain],isSmartAccountDeployed:Boolean(accountState.smartAccountDeployed)}:void 0}}subscribeAccount(callback,namespace){const updateVal=()=>{const account=this.getAccount(namespace);account&&callback(account)};namespace?ChainController.W.subscribeChainProp("accountState",updateVal,namespace):ChainController.W.subscribe(updateVal),ConnectorController.a.subscribe(updateVal)}subscribeNetwork(callback){return ChainController.W.subscribe(({activeCaipNetwork})=>{callback({caipNetwork:activeCaipNetwork,chainId:activeCaipNetwork?.id,caipNetworkId:activeCaipNetwork?.caipNetworkId})})}subscribeWalletInfo(callback){return AccountController.U.subscribeKey("connectedWalletInfo",callback)}subscribeShouldUpdateToAddress(callback){AccountController.U.subscribeKey("shouldUpdateToAddress",callback)}subscribeCaipNetworkChange(callback){ChainController.W.subscribeKey("activeCaipNetwork",callback)}getState(){return PublicStateController.z.state}subscribeState(callback){return PublicStateController.z.subscribe(callback)}showErrorMessage(message){SnackController.P.showError(message)}showSuccessMessage(message){SnackController.P.showSuccess(message)}getEvent(){return{...EventsController.E.state}}subscribeEvents(callback){return EventsController.E.subscribe(callback)}replace(route){RouterController.I.replace(route)}redirect(route){RouterController.I.push(route)}popTransactionStack(status){RouterController.I.popTransactionStack(status)}isOpen(){return ModalController.W.state.open}isTransactionStackEmpty(){return 0===RouterController.I.state.transactionStack.length}static getInstance(){return this.instance}updateFeatures(newFeatures){OptionsController.H.setFeatures(newFeatures)}updateRemoteFeatures(newRemoteFeatures){OptionsController.H.setRemoteFeatures(newRemoteFeatures)}updateOptions(newOptions){const updatedOptions={...OptionsController.H.state||{},...newOptions};OptionsController.H.setOptions(updatedOptions)}setConnectMethodsOrder(connectMethodsOrder){OptionsController.H.setConnectMethodsOrder(connectMethodsOrder)}setWalletFeaturesOrder(walletFeaturesOrder){OptionsController.H.setWalletFeaturesOrder(walletFeaturesOrder)}setCollapseWallets(collapseWallets){OptionsController.H.setCollapseWallets(collapseWallets)}setSocialsOrder(socialsOrder){OptionsController.H.setSocialsOrder(socialsOrder)}getConnectMethodsOrder(){return WalletUtil.A.getConnectOrderMethod(OptionsController.H.state.features,ConnectorController.a.getConnectors())}addNetwork(namespace,network){if(this.chainAdapters&&!this.chainAdapters[namespace])throw new Error(`Adapter for namespace ${namespace} doesn't exist`);const extendedNetwork=this.extendCaipNetwork(network,this.options);this.getCaipNetworks().find(n=>n.id===extendedNetwork.id)||ChainController.W.addNetwork(extendedNetwork)}removeNetwork(namespace,networkId){if(this.chainAdapters&&!this.chainAdapters[namespace])throw new Error(`Adapter for namespace ${namespace} doesn't exist`);this.getCaipNetworks().find(n=>n.id===networkId)&&ChainController.W.removeNetwork(namespace,networkId)}}let isInitialized=!1;class AppKit extends AppKitBaseClient{async open(options){ConnectorController.a.isConnected()||await super.open(options)}async close(){await super.close(),this.options.manualWCControl&&ConnectionController.x.finalizeWcConnection()}async syncIdentity(_request){return Promise.resolve()}async syncBalance(_params){return Promise.resolve()}async injectModalUi(){if(!isInitialized&&CoreHelperUtil.w.isClient()){await Promise.all([__webpack_require__.e(598),__webpack_require__.e(910),__webpack_require__.e(2502)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/exports/basic.js")),await Promise.all([__webpack_require__.e(910),__webpack_require__.e(5767)]).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@walletconnect/ethereum-provider/node_modules/@reown/appkit-scaffold-ui/dist/esm/exports/w3m-modal.js"));if(!document.querySelector("w3m-modal")){const modal=document.createElement("w3m-modal");OptionsController.H.state.disableAppend||OptionsController.H.state.enableEmbedded||document.body.insertAdjacentElement("beforeend",modal)}isInitialized=!0}}}const PACKAGE_VERSION="1.7.8";function createAppKit(options){return new AppKit({...options,basic:!0,sdkVersion:`html-core-${PACKAGE_VERSION}`})}},"./node_modules/lit/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{AH:()=>lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.AH,JW:()=>lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.JW,WF:()=>lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.WF,iz:()=>lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.iz,qy:()=>lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.qy});__webpack_require__("./node_modules/@lit/reactive-element/reactive-element.js"),__webpack_require__("./node_modules/lit-html/lit-html.js");var lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-element/lit-element.js")}}]);
//# sourceMappingURL=224.b81e521b.iframe.bundle.js.map