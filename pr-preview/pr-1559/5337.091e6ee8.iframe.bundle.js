"use strict";(self.webpackChunklayerswap=self.webpackChunklayerswap||[]).push([[5337],{"./node_modules/viem/_esm/utils/ccip.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{offchainLookup:()=>offchainLookup,offchainLookupSignature:()=>offchainLookupSignature});var call=__webpack_require__("./node_modules/viem/_esm/actions/public/call.js"),stringify=__webpack_require__("./node_modules/viem/_esm/utils/stringify.js"),base=__webpack_require__("./node_modules/viem/_esm/errors/base.js"),utils=__webpack_require__("./node_modules/viem/_esm/errors/utils.js");class OffchainLookupError extends base.C{constructor({callbackSelector,cause,data,extraData,sender,urls}){super(cause.shortMessage||"An error occurred while fetching for an offchain result.",{cause,metaMessages:[...cause.metaMessages||[],cause.metaMessages?.length?"":[],"Offchain Gateway Call:",urls&&["  Gateway URL(s):",...urls.map(url=>`    ${(0,utils.I)(url)}`)],`  Sender: ${sender}`,`  Data: ${data}`,`  Callback selector: ${callbackSelector}`,`  Extra data: ${extraData}`].flat(),name:"OffchainLookupError"})}}class OffchainLookupResponseMalformedError extends base.C{constructor({result,url}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,utils.I)(url)}`,`Response: ${(0,stringify.A)(result)}`],name:"OffchainLookupResponseMalformedError"})}}class OffchainLookupSenderMismatchError extends base.C{constructor({sender,to}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${to}`,`OffchainLookup sender address: ${sender}`],name:"OffchainLookupSenderMismatchError"})}}var request=__webpack_require__("./node_modules/viem/_esm/errors/request.js"),decodeErrorResult=__webpack_require__("./node_modules/viem/_esm/utils/abi/decodeErrorResult.js"),encodeAbiParameters=__webpack_require__("./node_modules/viem/_esm/utils/abi/encodeAbiParameters.js"),isAddressEqual=__webpack_require__("./node_modules/viem/_esm/utils/address/isAddressEqual.js"),concat=__webpack_require__("./node_modules/viem/_esm/utils/data/concat.js"),isHex=__webpack_require__("./node_modules/viem/_esm/utils/data/isHex.js"),localBatchGatewayRequest=__webpack_require__("./node_modules/viem/_esm/utils/ens/localBatchGatewayRequest.js");const offchainLookupSignature="0x556f1830",offchainLookupAbiItem={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function offchainLookup(client,{blockNumber,blockTag,data,to}){const{args}=(0,decodeErrorResult.W)({data,abi:[offchainLookupAbiItem]}),[sender,urls,callData,callbackSelector,extraData]=args,{ccipRead}=client,ccipRequest_=ccipRead&&"function"==typeof ccipRead?.request?ccipRead.request:ccipRequest;try{if(!(0,isAddressEqual.h)(to,sender))throw new OffchainLookupSenderMismatchError({sender,to});const result=urls.includes(localBatchGatewayRequest.J)?await(0,localBatchGatewayRequest.X)({data:callData,ccipRequest:ccipRequest_}):await ccipRequest_({data:callData,sender,urls}),{data:data_}=await(0,call.T)(client,{blockNumber,blockTag,data:(0,concat.xW)([callbackSelector,(0,encodeAbiParameters.h)([{type:"bytes"},{type:"bytes"}],[result,extraData])]),to});return data_}catch(err){throw new OffchainLookupError({callbackSelector,cause:err,data,extraData,sender,urls})}}async function ccipRequest({data,sender,urls}){let error=new Error("An unknown error occurred.");for(let i=0;i<urls.length;i++){const url=urls[i],method=url.includes("{data}")?"GET":"POST",body="POST"===method?{data,sender}:void 0,headers="POST"===method?{"Content-Type":"application/json"}:{};try{const response=await fetch(url.replace("{sender}",sender.toLowerCase()).replace("{data}",data),{body:JSON.stringify(body),headers,method});let result;if(result=response.headers.get("Content-Type")?.startsWith("application/json")?(await response.json()).data:await response.text(),!response.ok){error=new request.Ci({body,details:result?.error?(0,stringify.A)(result.error):response.statusText,headers:response.headers,status:response.status,url});continue}if(!(0,isHex.q)(result)){error=new OffchainLookupResponseMalformedError({result,url});continue}return result}catch(err){error=new request.Ci({body,details:err.message,url})}}throw error}},"./node_modules/viem/_esm/utils/ens/localBatchGatewayRequest.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{X:()=>localBatchGatewayRequest,J:()=>localBatchGatewayUrl});var abis=__webpack_require__("./node_modules/viem/_esm/constants/abis.js"),solidity=__webpack_require__("./node_modules/viem/_esm/constants/solidity.js"),errors_abi=__webpack_require__("./node_modules/viem/_esm/errors/abi.js"),slice=__webpack_require__("./node_modules/viem/_esm/utils/data/slice.js"),toFunctionSelector=__webpack_require__("./node_modules/viem/_esm/utils/hash/toFunctionSelector.js"),decodeAbiParameters=__webpack_require__("./node_modules/viem/_esm/utils/abi/decodeAbiParameters.js"),formatAbiItem=__webpack_require__("./node_modules/viem/_esm/utils/abi/formatAbiItem.js");var concat=__webpack_require__("./node_modules/viem/_esm/utils/data/concat.js"),encodeAbiParameters=__webpack_require__("./node_modules/viem/_esm/utils/abi/encodeAbiParameters.js"),getAbiItem=__webpack_require__("./node_modules/viem/_esm/utils/abi/getAbiItem.js");const docsPath="/docs/contract/encodeErrorResult";function encodeErrorResult(parameters){const{abi,errorName,args}=parameters;let abiItem=abi[0];if(errorName){const item=(0,getAbiItem.iY)({abi,args,name:errorName});if(!item)throw new errors_abi.yy(errorName,{docsPath});abiItem=item}if("error"!==abiItem.type)throw new errors_abi.yy(void 0,{docsPath});const definition=(0,formatAbiItem.B)(abiItem),signature=(0,toFunctionSelector.V)(definition);let data="0x";if(args&&args.length>0){if(!abiItem.inputs)throw new errors_abi.ZP(abiItem.name,{docsPath});data=(0,encodeAbiParameters.h)(abiItem.inputs,args)}return(0,concat.aP)([signature,data])}const encodeFunctionResult_docsPath="/docs/contract/encodeFunctionResult";const localBatchGatewayUrl="x-batch-gateway:true";async function localBatchGatewayRequest(parameters){const{data,ccipRequest}=parameters,{args:[queries]}=function decodeFunctionData(parameters){const{abi,data}=parameters,signature=(0,slice.di)(data,0,4),description=abi.find(x=>"function"===x.type&&signature===(0,toFunctionSelector.V)((0,formatAbiItem.B)(x)));if(!description)throw new errors_abi.EB(signature,{docsPath:"/docs/contract/decodeFunctionData"});return{functionName:description.name,args:"inputs"in description&&description.inputs&&description.inputs.length>0?(0,decodeAbiParameters.n)(description.inputs,(0,slice.di)(data,4)):void 0}}({abi:abis.b2,data}),failures=[],responses=[];return await Promise.all(queries.map(async(query,i)=>{try{responses[i]=query.urls.includes(localBatchGatewayUrl)?await localBatchGatewayRequest({data:query.data,ccipRequest}):await ccipRequest(query),failures[i]=!1}catch(err){failures[i]=!0,responses[i]=function encodeError(error){return"HttpRequestError"===error.name&&error.status?encodeErrorResult({abi:abis.b2,errorName:"HttpError",args:[error.status,error.shortMessage]}):encodeErrorResult({abi:[solidity.Mc],errorName:"Error",args:["shortMessage"in error?error.shortMessage:error.message]})}(err)}})),function encodeFunctionResult(parameters){const{abi,functionName,result}=parameters;let abiItem=abi[0];if(functionName){const item=(0,getAbiItem.iY)({abi,name:functionName});if(!item)throw new errors_abi.Iz(functionName,{docsPath:encodeFunctionResult_docsPath});abiItem=item}if("function"!==abiItem.type)throw new errors_abi.Iz(void 0,{docsPath:encodeFunctionResult_docsPath});if(!abiItem.outputs)throw new errors_abi.MR(abiItem.name,{docsPath:encodeFunctionResult_docsPath});const values=(()=>{if(0===abiItem.outputs.length)return[];if(1===abiItem.outputs.length)return[result];if(Array.isArray(result))return result;throw new errors_abi.dm(result)})();return(0,encodeAbiParameters.h)(abiItem.outputs,values)}({abi:abis.b2,functionName:"query",result:[failures,responses]})}}}]);